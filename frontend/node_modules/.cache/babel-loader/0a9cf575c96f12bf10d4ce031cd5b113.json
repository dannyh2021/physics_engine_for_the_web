{"ast":null,"code":"import{Matrix3,Matrix4,Quaternion}from\"three\";// R = R_z(phi) R_y(theta) R_x(psi)\n// Two solutions if theta not equal to +1 or -1, otherwise infinite solutions (gimbal lock)\n/** Returns Euler angles assuming matrix is a rotation matrix. */export function printEulerAngles(rotationMatrix){var elements=rotationMatrix.elements;var r_11=elements[0];var r_12=elements[3];var r_13=elements[6];var r_21=elements[1];var r_31=elements[2];var r_32=elements[5];var r_33=elements[8];if(!(r_31===1||r_31===-1)){var theta_1=-Math.asin(r_31);var theta_2=Math.PI-theta_1;var psi_1=Math.atan2(r_32/Math.cos(theta_1),r_33/Math.cos(theta_1));var psi_2=Math.atan2(r_32/Math.cos(theta_2),r_33/Math.cos(theta_2));var phi_1=Math.atan2(r_21/Math.cos(theta_1),r_11/Math.cos(theta_1));var phi_2=Math.atan2(r_21/Math.cos(theta_2),r_11/Math.cos(theta_2));console.log(\"psi_1: \".concat(psi_1,\", psi_2: \").concat(psi_2));console.log(\"theta_1: \".concat(theta_1,\", theta_2: \").concat(theta_2));console.log(\"phi_1: \".concat(phi_1,\", phi_2: \").concat(phi_2));}else{var phi=0;var theta;var psi;if(r_31===-1){theta=Math.PI/2;psi=phi+Math.atan2(r_12,r_13);}else{theta=-Math.PI/2;psi=-phi+Math.atan2(-r_12,-r_13);}console.log(\"psi: \".concat(psi,\",\"));console.log(\"theta: \".concat(theta));console.log(\"phi: \".concat(phi));}};/**\n* R = R_z(phi) R_y(theta) R_x(psi)\n* @param rotationMatrix assumes valid rotation matrix\n* @return JSON of euler angles psi, theta, and phi {psi: number, theta: number, phi: number}\n*/export function getEulerAngles(rotationMatrix){var elements=rotationMatrix.elements;var r_11=elements[0];var r_12=elements[3];var r_13=elements[6];var r_21=elements[1];var r_31=elements[2];var r_32=elements[5];var r_33=elements[8];var psi;var theta;var phi;if(!(r_31===1||r_31===-1)){theta=-Math.asin(r_31);psi=Math.atan2(r_32/Math.cos(theta),r_33/Math.cos(theta));phi=Math.atan2(r_21/Math.cos(theta),r_11/Math.cos(theta));}else{phi=0;if(r_31===-1){theta=Math.PI/2;psi=phi+Math.atan2(r_12,r_13);}else{theta=-Math.PI/2;psi=-phi+Math.atan2(-r_12,-r_13);}}var angles={psi:psi,theta:theta,phi:phi};return angles;}export function xRotationMatrix3(angle){var c=Math.cos(angle);var s=Math.sin(angle);var m=new Matrix3();m.set(1,0,0,0,c,-s,0,s,c);return m;}export function yRotationMatrix3(angle){var c=Math.cos(angle);var s=Math.sin(angle);var m=new Matrix3();m.set(c,0,s,0,1,0,-s,0,c);return m;}export function zRotationMatrix3(angle){var c=Math.cos(angle);var s=Math.sin(angle);var m=new Matrix3();m.set(c,-s,0,s,c,0,0,0,1);return m;}export function convertMatrix3ToMatrix4(matrix){var elements=matrix.elements;var m=new Matrix4();m.set(elements[0],elements[3],elements[6],0,elements[1],elements[4],elements[7],0,elements[2],elements[5],elements[8],0,0,0,0,1);return m;}/**\n * Not sure what it's called but suppose you have vectors a and b.\n * Then this function will return a matrix a_star, where a_star(b) = a x b\n * In other words, a_star is a linear map that acts returns the cross product of a with its input.\n * Derived in chapter 4.8 of Goldstein's Classical Mechanics book.\n * @param vector the vector\n */export function getVectorCrossMatrix(v){var m=new Matrix3();m.set(0,-v.z,v.y,v.z,0,-v.x,-v.y,v.x,0);return m;}export function addMatrices(a,b){var aElements=a.elements;var bElements=b.elements;var m=new Matrix3();var elements=[];for(var i=0;i<9;i++){elements.push(aElements[i]+bElements[i]);}m.elements=elements;return m;};export function convertQuaternionToMatrix(q){var rMatrix=new Matrix3();rMatrix.set(1-2*q.y*q.y-2*q.z*q.z,2*q.x*q.y-2*q.w*q.z,2*q.x*q.z+2*q.w*q.y,2*q.x*q.y+2*q.w*q.z,1-2*q.x*q.x-2*q.z*q.z,2*q.y*q.z-2*q.w*q.x,2*q.x*q.z-2*q.w*q.y,2*q.y*q.z+2*q.w*q.x,1-2*q.x*q.x-2*q.y*q.y);return rMatrix;}export function scaleQuaternion(q,s){return new Quaternion(q.x*s,q.y*s,q.z*s,q.w*s);}export function addQuaternions(q1,q2){return new Quaternion(q1.x+q2.x,q1.y+q2.y,q1.z+q2.z,q1.w+q2.w);}// assumes v1 and v2 are normalized\nexport function getQuaternionRotatingV1ToV2(v1,v2){var a=v1.clone().cross(v2);var w=1+v1.dot(v2);var q=new Quaternion(a.x,a.y,a.z,w).normalize();return q;}","map":{"version":3,"names":["Matrix3","Matrix4","Quaternion","printEulerAngles","rotationMatrix","elements","r_11","r_12","r_13","r_21","r_31","r_32","r_33","theta_1","Math","asin","theta_2","PI","psi_1","atan2","cos","psi_2","phi_1","phi_2","console","log","phi","theta","psi","getEulerAngles","angles","xRotationMatrix3","angle","c","s","sin","m","set","yRotationMatrix3","zRotationMatrix3","convertMatrix3ToMatrix4","matrix","getVectorCrossMatrix","v","z","y","x","addMatrices","a","b","aElements","bElements","i","push","convertQuaternionToMatrix","q","rMatrix","w","scaleQuaternion","addQuaternions","q1","q2","getQuaternionRotatingV1ToV2","v1","v2","clone","cross","dot","normalize"],"sources":["/Users/danny/Github/physics_engine_for_the_web/frontend/src/physics_engine/math_library.ts"],"sourcesContent":["import { Matrix3, Matrix4, Vector3, Quaternion } from \"three\";\n\n// R = R_z(phi) R_y(theta) R_x(psi)\n// Two solutions if theta not equal to +1 or -1, otherwise infinite solutions (gimbal lock)\n/** Returns Euler angles assuming matrix is a rotation matrix. */\nexport function printEulerAngles(rotationMatrix: Matrix3) {\n    const elements = rotationMatrix.elements;\n    const r_11 = elements[0];\n    const r_12 = elements[3];\n    const r_13 = elements[6];\n    const r_21 = elements[1];\n    const r_31 = elements[2];\n    const r_32 = elements[5];\n    const r_33 = elements[8];\n\n    if (!(r_31 === 1 || r_31 === -1)) {\n        const theta_1 = - Math.asin(r_31);\n        const theta_2 = Math.PI - theta_1;\n\n        const psi_1 = Math.atan2(r_32/Math.cos(theta_1), r_33/Math.cos(theta_1));\n        const psi_2 = Math.atan2(r_32/Math.cos(theta_2), r_33/Math.cos(theta_2));\n\n        const phi_1 = Math.atan2(r_21/Math.cos(theta_1), r_11/Math.cos(theta_1));\n        const phi_2 = Math.atan2(r_21/Math.cos(theta_2), r_11/Math.cos(theta_2));\n\n        console.log(`psi_1: ${psi_1}, psi_2: ${psi_2}`);\n        console.log(`theta_1: ${theta_1}, theta_2: ${theta_2}`);\n        console.log(`phi_1: ${phi_1}, phi_2: ${phi_2}`);\n    } else {\n        const phi = 0;\n        let theta: number;\n        let psi: number;\n\n        if (r_31 === -1) {\n            theta = Math.PI/2;\n            psi = phi + Math.atan2(r_12, r_13);\n        } else {\n            theta = -Math.PI/2;\n            psi = -phi + Math.atan2(-r_12, -r_13);\n        }\n\n        console.log(`psi: ${psi},`);\n        console.log(`theta: ${theta}`);\n        console.log(`phi: ${phi}`);\n    }\n};\n\n/**\n* R = R_z(phi) R_y(theta) R_x(psi)\n* @param rotationMatrix assumes valid rotation matrix\n* @return JSON of euler angles psi, theta, and phi {psi: number, theta: number, phi: number}\n*/\nexport function getEulerAngles(rotationMatrix: Matrix3) {\n   const elements = rotationMatrix.elements;\n   const r_11 = elements[0];\n   const r_12 = elements[3];\n   const r_13 = elements[6];\n   const r_21 = elements[1];\n   const r_31 = elements[2];\n   const r_32 = elements[5];\n   const r_33 = elements[8];\n\n   let psi: number;\n   let theta: number;\n   let phi: number;\n\n   if (!(r_31 === 1 || r_31 === -1)) {\n       theta = - Math.asin(r_31);\n\n       psi = Math.atan2(r_32/Math.cos(theta), r_33/Math.cos(theta));\n\n       phi = Math.atan2(r_21/Math.cos(theta), r_11/Math.cos(theta));\n   } else {\n       phi = 0;\n\n       if (r_31 === -1) {\n           theta = Math.PI/2;\n           psi = phi + Math.atan2(r_12, r_13);\n       } else {\n           theta = -Math.PI/2;\n           psi = -phi + Math.atan2(-r_12, -r_13);\n       }\n   }\n\n   const angles = {psi: psi, theta: theta, phi: phi};\n   return angles;\n}\n\nexport function xRotationMatrix3(angle: number) {\n    const c = Math.cos(angle);\n    const s = Math.sin(angle);\n\n    const m = new Matrix3()\n    m.set(\n        1, 0, 0,\n        0, c, -s,\n        0, s, c\n    );\n    return m;\n}\n\nexport function yRotationMatrix3(angle: number) {\n    const c = Math.cos(angle);\n    const s = Math.sin(angle);\n\n    const m = new Matrix3();\n    m.set(\n        c, 0, s,\n        0, 1, 0,\n        -s, 0, c,\n    );\n    return m;\n}\n\nexport function zRotationMatrix3(angle: number) {\n    const c = Math.cos(angle);\n    const s = Math.sin(angle);\n\n    const m = new Matrix3();\n    m.set(\n        c, -s, 0,\n        s, c, 0,\n        0, 0, 1,\n    );\n    return m;\n}\n\nexport function convertMatrix3ToMatrix4(matrix: Matrix3): Matrix4 {\n    const elements = matrix.elements;\n    \n    const m = new Matrix4();\n    m.set(\n        elements[0], elements[3], elements[6], 0,\n        elements[1], elements[4], elements[7], 0,\n        elements[2], elements[5], elements[8], 0,\n        0, 0, 0, 1\n    );\n\n    return m;\n}\n\n/**\n * Not sure what it's called but suppose you have vectors a and b.\n * Then this function will return a matrix a_star, where a_star(b) = a x b\n * In other words, a_star is a linear map that acts returns the cross product of a with its input.\n * Derived in chapter 4.8 of Goldstein's Classical Mechanics book.\n * @param vector the vector\n */\nexport function getVectorCrossMatrix(v: Vector3) {\n    const m = new Matrix3();\n    m.set(\n        0, -v.z, v.y,\n        v.z, 0, -v.x,\n        -v.y, v.x, 0\n    );\n    return m;\n}\n\nexport function addMatrices(a: Matrix3, b: Matrix3) {\n    const aElements = a.elements;\n    const bElements = b.elements;\n    const m = new Matrix3();\n    const elements = [];\n    for (let i = 0; i < 9; i++) {\n        elements.push(aElements[i] + bElements[i]);\n    }\n    m.elements = elements;\n    return m;\n};\n\nexport function convertQuaternionToMatrix(q: Quaternion) {\n    const rMatrix = new Matrix3();\n    rMatrix.set(\n        1 - 2*q.y*q.y - 2*q.z*q.z, 2*q.x*q.y - 2*q.w*q.z, 2*q.x*q.z + 2*q.w*q.y,\n        2*q.x*q.y + 2*q.w*q.z, 1 - 2*q.x*q.x - 2*q.z*q.z, 2*q.y*q.z - 2*q.w*q.x,\n        2*q.x*q.z - 2*q.w*q.y, 2*q.y*q.z + 2*q.w*q.x, 1 - 2*q.x*q.x - 2*q.y*q.y\n    );\n    return rMatrix;\n}\n\nexport function scaleQuaternion(q: Quaternion, s: number) {\n    return new Quaternion(q.x*s, q.y*s, q.z*s, q.w*s);\n}\n\nexport function addQuaternions(q1: Quaternion, q2: Quaternion) {\n    return new Quaternion(q1.x+q2.x, q1.y+q2.y, q1.z+q2.z, q1.w+q2.w);\n}\n\n// assumes v1 and v2 are normalized\nexport function getQuaternionRotatingV1ToV2(v1: Vector3, v2: Vector3) {\n    const a = v1.clone().cross(v2);\n    const w = 1 + v1.dot(v2);\n    const q = new Quaternion(a.x, a.y, a.z, w).normalize();\n    return q;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}