{"ast":null,"code":"var _jsxFileName = \"/Users/danny/Github/physics_engine_for_the_web/frontend/src/Playgrounds/Playground3.tsx\";\nimport React from \"react\";\nimport { World, checkCollision, getAllContacts, resolveCollision } from \"../physics_engine/physics_engine\";\nimport * as THREE from \"three\";\nimport { Vector3 } from \"three\";\nimport { Sphere } from \"../physics_engine/Sphere\";\nimport { Box } from \"../physics_engine/Box\";\nimport { Plane } from \"../physics_engine/Plane\";\nimport { OrbitControls } from \"three-orbitcontrols-ts\";\nimport { yRotationMatrix3, zRotationMatrix3, convertMatrix3ToMatrix4, xRotationMatrix3, getQuaternionRotatingV1ToV2 } from \"../physics_engine/math_library\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CANVAS_WIDTH = 1000;\nconst CANVAS_HEIGHT = 500; // camera\n\nconst camera = new THREE.PerspectiveCamera(45, CANVAS_WIDTH / CANVAS_HEIGHT, 1, 1000);\ncamera.position.set(0, -CANVAS_HEIGHT / 6, CANVAS_HEIGHT / 6);\ncamera.up.set(0, 1, 0); // add lighting\n\nconst light_color = 0xffffff;\nconst intensity = 1;\nconst point_light = new THREE.PointLight(light_color, intensity);\npoint_light.position.set(10, 10, 50);\nconst ambient_light = new THREE.AmbientLight(light_color, 0.2);\nexport default class Playground3 extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = void 0;\n    this.w = void 0;\n    this.renderer = void 0;\n    this.animationRequestID = void 0;\n    this.scene = void 0;\n    this.canvasRef = /*#__PURE__*/React.createRef();\n    this.w = new World(); // graphics\n\n    this.renderer = null;\n    this.animationRequestID = null; // bindings\n\n    this.onRestart = this.onRestart.bind(this);\n    this.onResume = this.onResume.bind(this);\n    this.onPause = this.onPause.bind(this);\n  }\n\n  componentDidMount() {\n    // graphics\n    this.renderer = new THREE.WebGLRenderer({\n      canvas: this.canvasRef.current,\n      alpha: false\n    });\n    this.renderer.setSize(CANVAS_WIDTH, CANVAS_HEIGHT); // orbit controls\n\n    const controls = new OrbitControls(camera, this.renderer.domElement);\n    this.initialize();\n    this.onVisualize();\n  }\n\n  initialize() {\n    // cancel ongoing animation\n    if (this.animationRequestID) {\n      cancelAnimationFrame(this.animationRequestID);\n    }\n\n    this.w = new World();\n    this.scene = new THREE.Scene(); // set up objects\n\n    const sphere = new Sphere(new Vector3(-50, 30, 10), 5);\n    sphere.velocity = new Vector3(10, 0, 0);\n    const sphere2 = new Sphere(new Vector3(0, 30, 10), 5);\n    const box = new Box(new Vector3(30, 30, 10), 10, 10, 10);\n    box.angularMomentum = new Vector3(0, 0, 0);\n    const box2 = new Box(new Vector3(2, 0, 30), 10, 10, 10); // box2.rotation.setFromAxisAngle(new Vector3(1, 1, 0).normalize(), Math.PI/4);\n\n    const yRotation = yRotationMatrix3(Math.PI / 4);\n    const zRotation = zRotationMatrix3(Math.PI / 4);\n    const xRotation = xRotationMatrix3(Math.PI / 4);\n    const rotationMatrix4 = convertMatrix3ToMatrix4(xRotation.clone().multiply(yRotation)); // box2.rotation.setFromRotationMatrix(rotationMatrix4);\n\n    const v2 = new Vector3(1, 1, 1).normalize();\n    const rotation = getQuaternionRotatingV1ToV2(new Vector3(0, 0, 1), v2);\n    box2.rotation = rotation;\n    box2.velocity = new Vector3(0, 0, -5);\n    box2.angularMomentum = new Vector3(0, 0, 0);\n    const box3 = new Box(new Vector3(0, 0, 0), 10, 10, 10);\n    box3.angularMomentum = new Vector3(0, 0, 0);\n    this.w.addObject(sphere);\n    this.w.addObject(sphere2);\n    this.w.addObject(box); // this.w.addObject(box2);\n    // this.w.addObject(box3);\n    // add plane\n\n    const plane = new Plane(new Vector3(55, 0, 0), new Vector3(-1, 0, 0), 1000, 1000); // this.w.addObject(plane);\n    // add object meshes and bounding box meshes to scene\n\n    for (let object of this.w.objects) {\n      this.scene.add(object.mesh);\n\n      if (object instanceof Plane) {\n        continue;\n      }\n\n      this.scene.add(object.boundingBoxMesh);\n    } // add gridHelper\n\n\n    const gridHelper = new THREE.GridHelper(100, 10);\n    gridHelper.rotateOnWorldAxis(new Vector3(1, 0, 0), Math.PI / 2);\n    this.scene.add(gridHelper); // add lighting\n\n    this.scene.add(point_light, ambient_light);\n  }\n\n  onVisualize() {\n    // cancel ongoing animation\n    if (this.animationRequestID) {\n      cancelAnimationFrame(this.animationRequestID);\n    }\n\n    const renderer = this.renderer;\n    const scene = this.scene;\n    const world = this.w;\n    const objects = world.objects;\n    let boundingBoxIntersections;\n    let contacts;\n    const currentInstance = this;\n\n    function animate() {\n      currentInstance.animationRequestID = requestAnimationFrame(animate); // update bounding box intersections and contacts, for visualization\n\n      boundingBoxIntersections = world.getAllBoundingBoxIntersections();\n      contacts = getAllContacts(boundingBoxIntersections); // physics step\n\n      world.integrateObjects(1 / 60); // graphics step\n\n      world.updateMeshes(); // reset mesh colors\n\n      for (let object of objects) {\n        if (object instanceof Plane) {\n          continue;\n        }\n\n        object.mesh.material = new THREE.MeshPhongMaterial({\n          color: 0x00bcd6\n        });\n        object.boundingBoxMesh.material = new THREE.LineBasicMaterial({\n          color: 0xffffff\n        });\n      } // color the bound boxes of intersecting boxes\n\n\n      for (let intersection of boundingBoxIntersections) {\n        const a = intersection.a,\n              b = intersection.b;\n\n        if (a instanceof Plane || b instanceof Plane) {\n          continue;\n        }\n\n        a.boundingBoxMesh.material = new THREE.LineBasicMaterial({\n          color: 0xff0000\n        });\n        b.boundingBoxMesh.material = new THREE.LineBasicMaterial({\n          color: 0xff0000\n        }); // check for collisions and color them\n\n        if (checkCollision(a, b)) {\n          const red_material = new THREE.MeshPhongMaterial({\n            color: 0xff0000\n          });\n          red_material.opacity = 0.6;\n          red_material.transparent = true;\n          a.mesh.material = red_material;\n          b.mesh.material = red_material;\n        }\n      }\n\n      const toBeRemoved = [];\n\n      for (let contact of contacts) {\n        const sphere_geometry = new THREE.SphereGeometry(1);\n        const material = new THREE.MeshBasicMaterial({\n          color: 0xffff00\n        });\n        const sphere = new THREE.Mesh(sphere_geometry, material);\n        sphere.position.set(contact.contactPoint.x, contact.contactPoint.y, contact.contactPoint.z);\n        scene.add(sphere);\n        toBeRemoved.push(sphere);\n        const dir = contact.contactNormal.clone().normalize();\n        const origin = contact.contactPoint;\n        const length = 20;\n        const hex = 0xffff00;\n        const arrowHelper = new THREE.ArrowHelper(dir, origin, length, hex);\n        scene.add(arrowHelper);\n        toBeRemoved.push(arrowHelper);\n        console.log(\"contact: \", contact);\n        resolveCollision(contact);\n\n        if (contact.type === \"vertex-face\") {} else if (contact.type === \"edge-edge\") {// console.log(\"edge: \", contact.);\n        } else {\n          console.error(\"contact type not recognized\");\n        }\n      }\n\n      currentInstance.renderer.render(scene, camera);\n\n      for (let object of toBeRemoved) {\n        scene.remove(object);\n      }\n    }\n\n    animate();\n  }\n\n  onRestart() {\n    this.initialize();\n    this.onVisualize();\n  }\n\n  onResume() {\n    this.onVisualize();\n  }\n\n  onPause() {\n    // cancel ongoing animation\n    if (this.animationRequestID) {\n      cancelAnimationFrame(this.animationRequestID);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playground\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Playground 3 page desu...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.onRestart,\n        children: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.onResume,\n        children: \"Resume\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.onPause,\n        children: \"Pause\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"canvas_container\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: this.canvasRef,\n          width: CANVAS_WIDTH,\n          height: CANVAS_HEIGHT\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nfunction convertMatrix3toMatrix4(arg0) {\n  throw new Error(\"Function not implemented.\");\n}","map":{"version":3,"names":["React","World","checkCollision","getAllContacts","resolveCollision","THREE","Vector3","Sphere","Box","Plane","OrbitControls","yRotationMatrix3","zRotationMatrix3","convertMatrix3ToMatrix4","xRotationMatrix3","getQuaternionRotatingV1ToV2","CANVAS_WIDTH","CANVAS_HEIGHT","camera","PerspectiveCamera","position","set","up","light_color","intensity","point_light","PointLight","ambient_light","AmbientLight","Playground3","Component","constructor","props","canvasRef","w","renderer","animationRequestID","scene","createRef","onRestart","bind","onResume","onPause","componentDidMount","WebGLRenderer","canvas","current","alpha","setSize","controls","domElement","initialize","onVisualize","cancelAnimationFrame","Scene","sphere","velocity","sphere2","box","angularMomentum","box2","yRotation","Math","PI","zRotation","xRotation","rotationMatrix4","clone","multiply","v2","normalize","rotation","box3","addObject","plane","object","objects","add","mesh","boundingBoxMesh","gridHelper","GridHelper","rotateOnWorldAxis","world","boundingBoxIntersections","contacts","currentInstance","animate","requestAnimationFrame","getAllBoundingBoxIntersections","integrateObjects","updateMeshes","material","MeshPhongMaterial","color","LineBasicMaterial","intersection","a","b","red_material","opacity","transparent","toBeRemoved","contact","sphere_geometry","SphereGeometry","MeshBasicMaterial","Mesh","contactPoint","x","y","z","push","dir","contactNormal","origin","length","hex","arrowHelper","ArrowHelper","console","log","type","error","render","remove","convertMatrix3toMatrix4","arg0","Error"],"sources":["/Users/danny/Github/physics_engine_for_the_web/frontend/src/Playgrounds/Playground3.tsx"],"sourcesContent":["import React from \"react\";\nimport { World, checkCollision, getAllContacts, resolveCollision } from \"../physics_engine/physics_engine\";\nimport * as THREE from \"three\";\nimport { Matrix3, Scene, Vector3 } from \"three\";\nimport { Sphere } from \"../physics_engine/Sphere\";\nimport { Box } from \"../physics_engine/Box\";\nimport { Plane } from \"../physics_engine/Plane\";\nimport { OrbitControls } from \"three-orbitcontrols-ts\";\nimport { yRotationMatrix3, zRotationMatrix3, convertMatrix3ToMatrix4, xRotationMatrix3, getQuaternionRotatingV1ToV2 } from \"../physics_engine/math_library\";\n\nconst CANVAS_WIDTH = 1000;\nconst CANVAS_HEIGHT = 500;\n\n// camera\nconst camera = new THREE.PerspectiveCamera(45, CANVAS_WIDTH / CANVAS_HEIGHT, 1, 1000);\ncamera.position.set(0, -CANVAS_HEIGHT / 6, CANVAS_HEIGHT / 6);\ncamera.up.set(0, 1, 0);\n\n// add lighting\nconst light_color = 0xffffff;\nconst intensity = 1;\nconst point_light = new THREE.PointLight(light_color, intensity);\npoint_light.position.set(10, 10, 50);\n\nconst ambient_light = new THREE.AmbientLight(light_color, 0.2);\n\nexport default class Playground3 extends React.Component {\n    private canvasRef: any;\n\n    private w: World;\n\n    private renderer: any;\n    private animationRequestID: any;\n    private scene: THREE.Scene;\n\n    constructor(props: any) {\n        super(props);\n        this.canvasRef = React.createRef();\n        this.w = new World();\n\n        // graphics\n        this.renderer = null;\n        this.animationRequestID = null;\n\n        // bindings\n        this.onRestart = this.onRestart.bind(this);\n        this.onResume = this.onResume.bind(this);\n        this.onPause = this.onPause.bind(this);\n    }\n\n    componentDidMount(): void {\n        // graphics\n        this.renderer = new THREE.WebGLRenderer({ canvas: this.canvasRef.current, alpha: false })\n        this.renderer.setSize(CANVAS_WIDTH, CANVAS_HEIGHT);\n\n        // orbit controls\n        const controls = new OrbitControls(camera, this.renderer.domElement);\n\n        this.initialize();\n        this.onVisualize();\n    }\n\n    initialize(): void {\n        // cancel ongoing animation\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n\n        this.w = new World();\n        this.scene = new THREE.Scene();\n\n        // set up objects\n        const sphere = new Sphere(new Vector3(-50, 30, 10), 5);\n        sphere.velocity = new Vector3(10, 0, 0);\n        const sphere2 = new Sphere(new Vector3(0, 30, 10), 5);\n\n        const box = new Box(new Vector3(30, 30, 10), 10, 10, 10);\n        box.angularMomentum = new Vector3(0, 0, 0);\n\n        const box2 = new Box(new Vector3(2, 0, 30), 10, 10, 10);\n        // box2.rotation.setFromAxisAngle(new Vector3(1, 1, 0).normalize(), Math.PI/4);\n        const yRotation = yRotationMatrix3(Math.PI/4);\n        const zRotation = zRotationMatrix3(Math.PI/4);\n        const xRotation = xRotationMatrix3(Math.PI/4);\n        const rotationMatrix4 = convertMatrix3ToMatrix4(xRotation.clone().multiply(yRotation));\n        // box2.rotation.setFromRotationMatrix(rotationMatrix4);\n        const v2 = new Vector3(1, 1, 1).normalize();\n        const rotation = getQuaternionRotatingV1ToV2(new Vector3(0, 0, 1), v2);\n        box2.rotation = rotation;\n\n\n        box2.velocity = new Vector3(0, 0, -5);\n        box2.angularMomentum = new Vector3(0, 0, 0);\n\n        const box3 = new Box(new Vector3(0, 0, 0), 10, 10, 10);\n        box3.angularMomentum = new Vector3(0, 0, 0);\n\n        this.w.addObject(sphere);\n        this.w.addObject(sphere2);\n        this.w.addObject(box);\n\n        // this.w.addObject(box2);\n        // this.w.addObject(box3);\n\n        // add plane\n        const plane = new Plane(new Vector3(55, 0, 0), new Vector3(-1, 0, 0), 1000, 1000);\n        // this.w.addObject(plane);\n\n        // add object meshes and bounding box meshes to scene\n        for (let object of this.w.objects) {\n            this.scene.add(object.mesh);\n\n            if (object instanceof Plane) {\n                continue;\n            }\n            this.scene.add(object.boundingBoxMesh);\n        }\n\n        // add gridHelper\n        const gridHelper = new THREE.GridHelper( 100, 10 );\n        gridHelper.rotateOnWorldAxis(new Vector3(1, 0, 0), Math.PI/2);\n        this.scene.add(gridHelper);\n\n        // add lighting\n        this.scene.add(point_light, ambient_light);\n    }\n\n    onVisualize() {\n        // cancel ongoing animation\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n\n        const renderer = this.renderer;\n        const scene = this.scene;\n        const world = this.w;\n        const objects = world.objects;\n\n        let boundingBoxIntersections;\n        let contacts;\n\n        const currentInstance = this;\n        function animate() {\n            currentInstance.animationRequestID = requestAnimationFrame(animate);\n\n            // update bounding box intersections and contacts, for visualization\n            boundingBoxIntersections = world.getAllBoundingBoxIntersections();\n            contacts = getAllContacts(boundingBoxIntersections);\n\n            // physics step\n            world.integrateObjects(1/60);\n\n            // graphics step\n            world.updateMeshes();\n\n            // reset mesh colors\n            for (let object of objects) {\n                if (object instanceof Plane) {\n                    continue;\n                }\n\n                object.mesh.material = new THREE.MeshPhongMaterial({ color: 0x00bcd6 })\n                object.boundingBoxMesh.material = new THREE.LineBasicMaterial({ color: 0xffffff });\n            }\n\n            // color the bound boxes of intersecting boxes\n            for (let intersection of boundingBoxIntersections) {\n                const a = intersection.a, b = intersection.b;\n                if (a instanceof Plane || b instanceof Plane) {\n                    continue;\n                }\n\n                a.boundingBoxMesh.material = new THREE.LineBasicMaterial({ color: 0xff0000 });\n                b.boundingBoxMesh.material = new THREE.LineBasicMaterial({ color: 0xff0000 });\n\n                // check for collisions and color them\n                if (checkCollision(a, b)) {\n                    const red_material = new THREE.MeshPhongMaterial({ color: 0xff0000 });\n                    red_material.opacity = 0.6;\n                    red_material.transparent = true;\n                    a.mesh.material = red_material;\n                    b.mesh.material = red_material;\n                }\n            }\n\n            const toBeRemoved: any[] = [];\n\n            for (let contact of contacts) {\n                const sphere_geometry = new THREE.SphereGeometry(1);\n                const material = new THREE.MeshBasicMaterial({ color: 0xffff00 });\n                const sphere = new THREE.Mesh(sphere_geometry, material);\n                sphere.position.set(contact.contactPoint.x, contact.contactPoint.y, contact.contactPoint.z);\n                scene.add(sphere);\n                toBeRemoved.push(sphere);\n                const dir = contact.contactNormal.clone().normalize();\n                const origin = contact.contactPoint;\n                const length = 20;\n                const hex = 0xffff00;\n                const arrowHelper = new THREE.ArrowHelper(dir, origin, length, hex);\n                scene.add(arrowHelper);\n                toBeRemoved.push(arrowHelper);\n\n                console.log(\"contact: \", contact);\n\n                resolveCollision(contact);\n\n                if (contact.type === \"vertex-face\") {\n\n                } else if (contact.type === \"edge-edge\") {\n                    // console.log(\"edge: \", contact.);\n                } else {\n                    console.error(\"contact type not recognized\");\n                }\n            }\n\n            currentInstance.renderer.render(scene, camera);\n            for (let object of toBeRemoved) {\n                scene.remove(object);\n            }\n        }\n\n        animate();\n    }\n\n    onRestart(): void {\n        this.initialize();\n        this.onVisualize();\n    }\n\n    onResume(): void {\n        this.onVisualize();\n    }\n\n    onPause(): void {\n        // cancel ongoing animation\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"playground\">\n                <h2>Playground 3 page desu...</h2>\n                <button onClick={this.onRestart}>Restart</button>\n                <button onClick={this.onResume}>Resume</button>\n                <button onClick={this.onPause}>Pause</button>\n                <div id=\"canvas_container\">\n                    <canvas ref={this.canvasRef} width={CANVAS_WIDTH} height={CANVAS_HEIGHT} />\n                </div>\n            </div>\n        )\n    }\n}\n\nfunction convertMatrix3toMatrix4(arg0: THREE.Matrix3) {\n    throw new Error(\"Function not implemented.\");\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}