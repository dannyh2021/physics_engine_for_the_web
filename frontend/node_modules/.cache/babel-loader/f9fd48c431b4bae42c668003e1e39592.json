{"ast":null,"code":"import { Vector3 } from \"three\";\nimport * as THREE from \"three\";\nimport { Sphere } from \"./Sphere\";\nexport class World {\n  constructor(canvas) {\n    this.canvas = canvas;\n    this.objects = [];\n    this.currentLoopInterval = null;\n    this.objects = [];\n  }\n\n  startGameLoop() {\n    const s = new Sphere(new Vector3(0, 0, 0), 1);\n    this.clearCurrentLoop();\n    let i = 0;\n    this.currentLoopInterval = setInterval(() => {\n      i++;\n      console.log(i);\n    }, 1000);\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      canvas: this.canvas,\n      alpha: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n    const sphereGeometry = new THREE.SphereGeometry(1);\n    const material = new THREE.MeshBasicMaterial({\n      color: 0xffff00\n    });\n    const sphere = new THREE.Mesh(sphereGeometry, material);\n    scene.add(sphere);\n\n    function animate() {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    }\n  }\n\n  runLoop() {\n    let i = 0;\n    console.log(\"clearing: \", this.currentLoopInterval);\n    clearInterval(this.currentLoopInterval);\n    this.currentLoopInterval = setInterval(() => {\n      i++;\n      console.log(i);\n    }, 1000);\n  }\n\n  clearCurrentLoop() {\n    clearInterval(this.currentLoopInterval);\n  }\n\n  test() {\n    const s = new Sphere(new Vector3(0, 0, 0), 1);\n    this.objects.push(s);\n    console.log(\"hi\");\n    console.log(this.objects);\n  }\n\n}","map":{"version":3,"names":["Vector3","THREE","Sphere","World","constructor","canvas","objects","currentLoopInterval","startGameLoop","s","clearCurrentLoop","i","setInterval","console","log","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","alpha","setSize","document","body","appendChild","domElement","sphereGeometry","SphereGeometry","material","MeshBasicMaterial","color","sphere","Mesh","add","animate","requestAnimationFrame","render","runLoop","clearInterval","test","push"],"sources":["/Users/danny/Github/physics_engine_for_the_web/frontend/src/physics_engine/physics_engine.ts"],"sourcesContent":["import { Vector3 } from \"three\";\nimport * as THREE from \"three\";\nimport { Sphere } from \"./Sphere\";\nimport { createRenderer } from \"react-dom/test-utils\";\n\nexport class World {\n    private objects: any[] = [];\n    private currentLoopInterval: any = null;\n\n    constructor(private canvas: HTMLCanvasElement) {\n        this.objects = [];\n    }\n\n    startGameLoop(): void {\n        const s = new Sphere(new Vector3(0, 0, 0), 1);\n\n        this.clearCurrentLoop();\n\n        let i = 0;\n        this.currentLoopInterval = setInterval(() => {i++; console.log(i)}, 1000);\n\n        const scene = new THREE.Scene();\n        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n        \n        const renderer = new THREE.WebGLRenderer({ canvas: this.canvas, alpha: true });\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        document.body.appendChild(renderer.domElement);\n\n        const sphereGeometry = new THREE.SphereGeometry(1);\n        const material = new THREE.MeshBasicMaterial({color: 0xffff00});\n        const sphere = new THREE.Mesh(sphereGeometry, material);\n\n        scene.add(sphere);\n\n        function animate(): void {\n            requestAnimationFrame(animate);\n            renderer.render(scene, camera);\n        }\n    }\n\n    runLoop(): void {\n        let i = 0;\n        console.log(\"clearing: \", this.currentLoopInterval);\n        clearInterval(this.currentLoopInterval);\n        this.currentLoopInterval = setInterval(() => {i++; console.log(i)}, 1000);\n    }\n\n    clearCurrentLoop(): void {\n        clearInterval(this.currentLoopInterval);\n    }\n\n    test(): void {\n        const s = new Sphere(new Vector3(0, 0, 0), 1);\n        this.objects.push(s);\n        console.log(\"hi\");\n        console.log(this.objects);\n    }\n}"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,UAAvB;AAGA,OAAO,MAAMC,KAAN,CAAY;EAIfC,WAAW,CAASC,MAAT,EAAoC;IAAA,KAA3BA,MAA2B,GAA3BA,MAA2B;IAAA,KAHvCC,OAGuC,GAHtB,EAGsB;IAAA,KAFvCC,mBAEuC,GAFZ,IAEY;IAC3C,KAAKD,OAAL,GAAe,EAAf;EACH;;EAEDE,aAAa,GAAS;IAClB,MAAMC,CAAC,GAAG,IAAIP,MAAJ,CAAW,IAAIF,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAX,EAAiC,CAAjC,CAAV;IAEA,KAAKU,gBAAL;IAEA,IAAIC,CAAC,GAAG,CAAR;IACA,KAAKJ,mBAAL,GAA2BK,WAAW,CAAC,MAAM;MAACD,CAAC;MAAIE,OAAO,CAACC,GAAR,CAAYH,CAAZ;IAAe,CAA5B,EAA8B,IAA9B,CAAtC;IAEA,MAAMI,KAAK,GAAG,IAAId,KAAK,CAACe,KAAV,EAAd;IACA,MAAMC,MAAM,GAAG,IAAIhB,KAAK,CAACiB,iBAAV,CAA4B,EAA5B,EAAgCC,MAAM,CAACC,UAAP,GAAoBD,MAAM,CAACE,WAA3D,EAAwE,GAAxE,EAA6E,IAA7E,CAAf;IAEA,MAAMC,QAAQ,GAAG,IAAIrB,KAAK,CAACsB,aAAV,CAAwB;MAAElB,MAAM,EAAE,KAAKA,MAAf;MAAuBmB,KAAK,EAAE;IAA9B,CAAxB,CAAjB;IACAF,QAAQ,CAACG,OAAT,CAAiBN,MAAM,CAACC,UAAxB,EAAoCD,MAAM,CAACE,WAA3C;IACAK,QAAQ,CAACC,IAAT,CAAcC,WAAd,CAA0BN,QAAQ,CAACO,UAAnC;IAEA,MAAMC,cAAc,GAAG,IAAI7B,KAAK,CAAC8B,cAAV,CAAyB,CAAzB,CAAvB;IACA,MAAMC,QAAQ,GAAG,IAAI/B,KAAK,CAACgC,iBAAV,CAA4B;MAACC,KAAK,EAAE;IAAR,CAA5B,CAAjB;IACA,MAAMC,MAAM,GAAG,IAAIlC,KAAK,CAACmC,IAAV,CAAeN,cAAf,EAA+BE,QAA/B,CAAf;IAEAjB,KAAK,CAACsB,GAAN,CAAUF,MAAV;;IAEA,SAASG,OAAT,GAAyB;MACrBC,qBAAqB,CAACD,OAAD,CAArB;MACAhB,QAAQ,CAACkB,MAAT,CAAgBzB,KAAhB,EAAuBE,MAAvB;IACH;EACJ;;EAEDwB,OAAO,GAAS;IACZ,IAAI9B,CAAC,GAAG,CAAR;IACAE,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B,KAAKP,mBAA/B;IACAmC,aAAa,CAAC,KAAKnC,mBAAN,CAAb;IACA,KAAKA,mBAAL,GAA2BK,WAAW,CAAC,MAAM;MAACD,CAAC;MAAIE,OAAO,CAACC,GAAR,CAAYH,CAAZ;IAAe,CAA5B,EAA8B,IAA9B,CAAtC;EACH;;EAEDD,gBAAgB,GAAS;IACrBgC,aAAa,CAAC,KAAKnC,mBAAN,CAAb;EACH;;EAEDoC,IAAI,GAAS;IACT,MAAMlC,CAAC,GAAG,IAAIP,MAAJ,CAAW,IAAIF,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAX,EAAiC,CAAjC,CAAV;IACA,KAAKM,OAAL,CAAasC,IAAb,CAAkBnC,CAAlB;IACAI,OAAO,CAACC,GAAR,CAAY,IAAZ;IACAD,OAAO,CAACC,GAAR,CAAY,KAAKR,OAAjB;EACH;;AAnDc"},"metadata":{},"sourceType":"module"}