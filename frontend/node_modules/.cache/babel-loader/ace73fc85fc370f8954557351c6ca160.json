{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/danny/Github/physics_engine_for_the_web/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import _classCallCheck from\"/Users/danny/Github/physics_engine_for_the_web/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/danny/Github/physics_engine_for_the_web/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _assertThisInitialized from\"/Users/danny/Github/physics_engine_for_the_web/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";import _inherits from\"/Users/danny/Github/physics_engine_for_the_web/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/Users/danny/Github/physics_engine_for_the_web/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import React from\"react\";import{World,Sphere,Box,Plane,checkCollision,getAllContacts,resolveCollision}from\"../physics_engine/physics_engine\";import*as THREE from\"three\";import{Vector3}from\"three\";import{OrbitControls}from\"three-orbitcontrols-ts\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var CANVAS_WIDTH=1000;var CANVAS_HEIGHT=500;// camera\nvar camera=new THREE.PerspectiveCamera(45,CANVAS_WIDTH/CANVAS_HEIGHT,1,1000);camera.position.set(0,-CANVAS_HEIGHT/6,CANVAS_HEIGHT/6);camera.up.set(0,1,0);// add lighting\nvar light_color=0xffffff;var intensity=1;var point_light=new THREE.PointLight(light_color,intensity);point_light.position.set(10,10,50);var ambient_light=new THREE.AmbientLight(light_color,0.2);var Demo2=/*#__PURE__*/function(_React$Component){_inherits(Demo2,_React$Component);var _super=_createSuper(Demo2);function Demo2(props){var _this;_classCallCheck(this,Demo2);_this=_super.call(this,props);_this.canvasRef=void 0;_this.w=void 0;_this.renderer=void 0;_this.animationRequestID=void 0;_this.scene=void 0;_this.canvasRef=/*#__PURE__*/React.createRef();_this.w=new World();// graphics\n_this.renderer=null;_this.animationRequestID=null;// bindings\n_this.onRestart=_this.onRestart.bind(_assertThisInitialized(_this));_this.onResume=_this.onResume.bind(_assertThisInitialized(_this));_this.onPause=_this.onPause.bind(_assertThisInitialized(_this));return _this;}_createClass(Demo2,[{key:\"componentDidMount\",value:function componentDidMount(){// graphics\nthis.renderer=new THREE.WebGLRenderer({canvas:this.canvasRef.current,alpha:false});this.renderer.setSize(CANVAS_WIDTH,CANVAS_HEIGHT);// orbit controls\nvar controls=new OrbitControls(camera,this.renderer.domElement);this.initialize();this.onVisualize();}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){if(this.renderer){this.renderer=null;}if(this.animationRequestID){cancelAnimationFrame(this.animationRequestID);}}},{key:\"initialize\",value:function initialize(){// cancel ongoing animation\nif(this.animationRequestID){cancelAnimationFrame(this.animationRequestID);}this.w=new World();this.scene=new THREE.Scene();// set up objects\nvar sphere=new Sphere(new Vector3(-50,10,10),5);sphere.velocity=new Vector3(15,0,0);var sphere2=new Sphere(new Vector3(-20,10,10),5);var sphere3=new Sphere(new Vector3(10,10,10),5);var box=new Box(new Vector3(30,10,10),10,10,10);this.w.addObject(sphere);this.w.addObject(sphere2);this.w.addObject(sphere3);this.w.addObject(box);var box2=new Box(new Vector3(-50,-20,10),10,10,10);box2.velocity.x=15;var box3=new Box(new Vector3(-20,-20,10),10,10,10);box3.rotation.setFromUnitVectors(new Vector3(1,1,1).normalize(),new Vector3(1,0,0));var box4=new Box(new Vector3(10,-20,10),10,10,10);var sphere4=new Sphere(new Vector3(30,-20,10),5);this.w.addObject(box2);this.w.addObject(box3);this.w.addObject(box4);this.w.addObject(sphere4);// add plane\nvar plane=new Plane(new Vector3(55,0,0),new Vector3(-1,0,0),1000,1000);this.w.addObject(plane);// add object meshes and bounding box meshes to scene\nvar _iterator=_createForOfIteratorHelper(this.w.objects),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var object=_step.value;this.scene.add(object.mesh);if(object instanceof Plane){continue;}this.scene.add(object.boundingBoxMesh);}// add gridHelper\n}catch(err){_iterator.e(err);}finally{_iterator.f();}var gridHelper=new THREE.GridHelper(100,10);gridHelper.rotateOnWorldAxis(new Vector3(1,0,0),Math.PI/2);this.scene.add(gridHelper);// add lighting\nthis.scene.add(point_light,ambient_light);}},{key:\"onVisualize\",value:function onVisualize(){// cancel ongoing animation\nif(this.animationRequestID){cancelAnimationFrame(this.animationRequestID);}var renderer=this.renderer;var scene=this.scene;var world=this.w;var objects=world.objects;var boundingBoxIntersections;var contacts;var currentInstance=this;function animate(){currentInstance.animationRequestID=requestAnimationFrame(animate);// update bounding box intersections and contacts, for visualization\nboundingBoxIntersections=world.getAllBoundingBoxIntersections();contacts=getAllContacts(boundingBoxIntersections);// resolve contacts\nvar _iterator2=_createForOfIteratorHelper(contacts),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var contact=_step2.value;resolveCollision(contact);}// physics step\n}catch(err){_iterator2.e(err);}finally{_iterator2.f();}world.integrateObjects(1/60);// graphics step\nworld.updateMeshes();// reset mesh colors\nvar _iterator3=_createForOfIteratorHelper(objects),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var _object=_step3.value;_object.mesh.material=new THREE.MeshPhongMaterial({color:0x00bcd6});_object.mesh.material.opacity=0.6;_object.mesh.material.transparent=true;if(_object instanceof Plane){_object.mesh.material=new THREE.MeshPhongMaterial({color:0xffcb3e});continue;}_object.boundingBoxMesh.material=new THREE.LineBasicMaterial({color:0xffffff});}// color the bound boxes of intersecting boxes\n}catch(err){_iterator3.e(err);}finally{_iterator3.f();}var _iterator4=_createForOfIteratorHelper(boundingBoxIntersections),_step4;try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var intersection=_step4.value;var a=intersection.a,b=intersection.b;if(!(a instanceof Plane)&&!(b instanceof Plane)){a.boundingBoxMesh.material=new THREE.LineBasicMaterial({color:0xff0000});b.boundingBoxMesh.material=new THREE.LineBasicMaterial({color:0xff0000});}// check for collisions and color them\nif(checkCollision(a,b)){var red_material=new THREE.MeshPhongMaterial({color:0xff0000});red_material.opacity=0.6;red_material.transparent=true;a.mesh.material=red_material;b.mesh.material=red_material;}}}catch(err){_iterator4.e(err);}finally{_iterator4.f();}var toBeRemoved=[];var _iterator5=_createForOfIteratorHelper(contacts),_step5;try{for(_iterator5.s();!(_step5=_iterator5.n()).done;){var _contact=_step5.value;var sphere_geometry=new THREE.SphereGeometry(1);var material=new THREE.MeshBasicMaterial({color:0xffff00});var sphere=new THREE.Mesh(sphere_geometry,material);sphere.position.set(_contact.contactPoint.x,_contact.contactPoint.y,_contact.contactPoint.z);scene.add(sphere);toBeRemoved.push(sphere);var dir=_contact.contactNormal.clone().normalize();var origin=_contact.contactPoint;var length=20;var hex=0xffff00;var arrowHelper=new THREE.ArrowHelper(dir,origin,length,hex);scene.add(arrowHelper);toBeRemoved.push(arrowHelper);if(_contact.type===\"vertex-face\"){}else if(_contact.type===\"edge-edge\"){var a_points=[_contact.edge_a.a,_contact.edge_a.b];var b_points=[_contact.edge_b.a,_contact.edge_b.b];var _material=new THREE.LineBasicMaterial({color:0xffff00});var geometry_a=new THREE.BufferGeometry().setFromPoints(a_points);var geometry_b=new THREE.BufferGeometry().setFromPoints(b_points);var line_a=new THREE.Line(geometry_a,_material);var line_b=new THREE.Line(geometry_b,_material);scene.add(line_a);scene.add(line_b);toBeRemoved.push(line_a);toBeRemoved.push(line_b);}else{console.error(\"contact type not recognized\");}}}catch(err){_iterator5.e(err);}finally{_iterator5.f();}currentInstance.renderer.render(scene,camera);for(var _i=0,_toBeRemoved=toBeRemoved;_i<_toBeRemoved.length;_i++){var object=_toBeRemoved[_i];scene.remove(object);}}animate();}},{key:\"onRestart\",value:function onRestart(){this.initialize();this.onVisualize();}},{key:\"onResume\",value:function onResume(){this.onVisualize();}},{key:\"onPause\",value:function onPause(){// cancel ongoing animation\nif(this.animationRequestID){cancelAnimationFrame(this.animationRequestID);}}},{key:\"render\",value:function render(){return/*#__PURE__*/_jsxs(\"div\",{className:\"playground\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Demo 2\"}),/*#__PURE__*/_jsx(\"p\",{children:\"This scene shows how the physics engine detects and resolves collisions between spheres, boxes, and planes. At each time step, the engine first checks for all bounding box intersections using a sort and sweep algorithm. Then, the engine checks each bounding box intersection for collisions using the separating axis technique. If a collision is detected, contact data is generated that includes the information needed to resolve the collision. Finally, all colliding collisions are resolved by calculating and applying an impulse.\"}),/*#__PURE__*/_jsx(\"button\",{onClick:this.onRestart,children:\"Restart\"}),/*#__PURE__*/_jsx(\"button\",{onClick:this.onResume,children:\"Resume\"}),/*#__PURE__*/_jsx(\"button\",{onClick:this.onPause,children:\"Pause\"}),/*#__PURE__*/_jsx(\"div\",{id:\"canvas_container\",children:/*#__PURE__*/_jsx(\"canvas\",{ref:this.canvasRef,width:CANVAS_WIDTH,height:CANVAS_HEIGHT})})]});}}]);return Demo2;}(React.Component);export{Demo2 as default};","map":{"version":3,"names":["React","World","Sphere","Box","Plane","checkCollision","getAllContacts","resolveCollision","THREE","Vector3","OrbitControls","CANVAS_WIDTH","CANVAS_HEIGHT","camera","PerspectiveCamera","position","set","up","light_color","intensity","point_light","PointLight","ambient_light","AmbientLight","Demo2","props","canvasRef","w","renderer","animationRequestID","scene","createRef","onRestart","bind","onResume","onPause","WebGLRenderer","canvas","current","alpha","setSize","controls","domElement","initialize","onVisualize","cancelAnimationFrame","Scene","sphere","velocity","sphere2","sphere3","box","addObject","box2","x","box3","rotation","setFromUnitVectors","normalize","box4","sphere4","plane","objects","object","add","mesh","boundingBoxMesh","gridHelper","GridHelper","rotateOnWorldAxis","Math","PI","world","boundingBoxIntersections","contacts","currentInstance","animate","requestAnimationFrame","getAllBoundingBoxIntersections","contact","integrateObjects","updateMeshes","material","MeshPhongMaterial","color","opacity","transparent","LineBasicMaterial","intersection","a","b","red_material","toBeRemoved","sphere_geometry","SphereGeometry","MeshBasicMaterial","Mesh","contactPoint","y","z","push","dir","contactNormal","clone","origin","length","hex","arrowHelper","ArrowHelper","type","a_points","edge_a","b_points","edge_b","geometry_a","BufferGeometry","setFromPoints","geometry_b","line_a","Line","line_b","console","error","render","remove","Component"],"sources":["/Users/danny/Github/physics_engine_for_the_web/frontend/src/Demos/Demo2.tsx"],"sourcesContent":["import React from \"react\";\nimport { World, Sphere, Box, Plane, checkCollision, getAllContacts, resolveCollision } from \"../physics_engine/physics_engine\";\nimport * as THREE from \"three\";\nimport { Matrix3, Scene, Vector3 } from \"three\";\nimport { OrbitControls } from \"three-orbitcontrols-ts\";\nimport { yRotationMatrix3, zRotationMatrix3, convertMatrix3ToMatrix4, xRotationMatrix3, getQuaternionRotatingV1ToV2 } from \"../physics_engine/math_library\";\n\nconst CANVAS_WIDTH = 1000;\nconst CANVAS_HEIGHT = 500;\n\n// camera\nconst camera = new THREE.PerspectiveCamera(45, CANVAS_WIDTH / CANVAS_HEIGHT, 1, 1000);\ncamera.position.set(0, -CANVAS_HEIGHT / 6, CANVAS_HEIGHT / 6);\ncamera.up.set(0, 1, 0);\n\n// add lighting\nconst light_color = 0xffffff;\nconst intensity = 1;\nconst point_light = new THREE.PointLight(light_color, intensity);\npoint_light.position.set(10, 10, 50);\n\nconst ambient_light = new THREE.AmbientLight(light_color, 0.2);\n\nexport default class Demo2 extends React.Component {\n    private canvasRef: any;\n\n    private w: World;\n\n    private renderer: any;\n    private animationRequestID: any;\n    private scene: THREE.Scene;\n\n    constructor(props: any) {\n        super(props);\n        this.canvasRef = React.createRef();\n        this.w = new World();\n\n        // graphics\n        this.renderer = null;\n        this.animationRequestID = null;\n\n        // bindings\n        this.onRestart = this.onRestart.bind(this);\n        this.onResume = this.onResume.bind(this);\n        this.onPause = this.onPause.bind(this);\n    }\n\n    componentDidMount(): void {\n        // graphics\n        this.renderer = new THREE.WebGLRenderer({ canvas: this.canvasRef.current, alpha: false })\n        this.renderer.setSize(CANVAS_WIDTH, CANVAS_HEIGHT);\n\n        // orbit controls\n        const controls = new OrbitControls(camera, this.renderer.domElement);\n\n        this.initialize();\n        this.onVisualize();\n    }\n\n    componentWillUnmount() {\n        if(this.renderer) {\n            this.renderer = null;\n        }\n\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n    }\n\n    initialize(): void {\n        // cancel ongoing animation\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n\n        this.w = new World();\n        this.scene = new THREE.Scene();\n\n        // set up objects\n        const sphere = new Sphere(new Vector3(-50, 10, 10), 5);\n        sphere.velocity = new Vector3(15, 0, 0);\n        const sphere2 = new Sphere(new Vector3(-20, 10, 10), 5);\n        const sphere3 = new Sphere(new Vector3(10, 10, 10), 5);\n        const box = new Box(new Vector3(30, 10, 10), 10, 10, 10);\n        \n        this.w.addObject(sphere);\n        this.w.addObject(sphere2);\n        this.w.addObject(sphere3);\n        this.w.addObject(box);\n\n        const box2 = new Box(new Vector3(-50, -20, 10), 10, 10, 10);\n        box2.velocity.x = 15;\n        const box3 = new Box(new Vector3(-20, -20, 10), 10, 10, 10);\n        box3.rotation.setFromUnitVectors(new Vector3(1, 1, 1).normalize(), new Vector3(1, 0, 0));\n        const box4 = new Box(new Vector3(10, -20, 10), 10, 10, 10);\n        const sphere4 = new Sphere(new Vector3(30, -20, 10), 5);\n\n        this.w.addObject(box2);\n        this.w.addObject(box3);\n        this.w.addObject(box4);\n        this.w.addObject(sphere4);\n\n        // add plane\n        const plane = new Plane(new Vector3(55, 0, 0), new Vector3(-1, 0, 0), 1000, 1000);\n        this.w.addObject(plane);\n\n        // add object meshes and bounding box meshes to scene\n        for (let object of this.w.objects) {\n            this.scene.add(object.mesh);\n\n            if (object instanceof Plane) {\n                continue;\n            }\n            this.scene.add(object.boundingBoxMesh);\n        }\n\n        // add gridHelper\n        const gridHelper = new THREE.GridHelper( 100, 10 );\n        gridHelper.rotateOnWorldAxis(new Vector3(1, 0, 0), Math.PI/2);\n        this.scene.add(gridHelper);\n\n        // add lighting\n        this.scene.add(point_light, ambient_light);\n    }\n\n    onVisualize() {\n        // cancel ongoing animation\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n\n        const renderer = this.renderer;\n        const scene = this.scene;\n        const world = this.w;\n        const objects = world.objects;\n\n        let boundingBoxIntersections;\n        let contacts;\n\n        const currentInstance = this;\n        function animate() {\n            currentInstance.animationRequestID = requestAnimationFrame(animate);\n\n            // update bounding box intersections and contacts, for visualization\n            boundingBoxIntersections = world.getAllBoundingBoxIntersections();\n            contacts = getAllContacts(boundingBoxIntersections);\n\n            // resolve contacts\n            for (let contact of contacts) {\n                resolveCollision(contact);\n            }\n\n            // physics step\n            world.integrateObjects(1/60);\n\n            // graphics step\n            world.updateMeshes();\n\n            // reset mesh colors\n            for (let object of objects) {\n                object.mesh.material = new THREE.MeshPhongMaterial({ color: 0x00bcd6 })\n                object.mesh.material.opacity = 0.6;\n                object.mesh.material.transparent = true;\n\n                if (object instanceof Plane) {\n                    object.mesh.material = new THREE.MeshPhongMaterial({ color: 0xffcb3e });\n                    continue;\n                }\n                object.boundingBoxMesh.material = new THREE.LineBasicMaterial({ color: 0xffffff });\n            }\n\n            // color the bound boxes of intersecting boxes\n            for (let intersection of boundingBoxIntersections) {\n                const a = intersection.a, b = intersection.b;\n                if (!(a instanceof Plane) && ! (b instanceof Plane)) {\n                    a.boundingBoxMesh.material = new THREE.LineBasicMaterial({ color: 0xff0000 });\n                    b.boundingBoxMesh.material = new THREE.LineBasicMaterial({ color: 0xff0000 });\n                }\n\n                // check for collisions and color them\n                if (checkCollision(a, b)) {\n                    const red_material = new THREE.MeshPhongMaterial({ color: 0xff0000 });\n                    red_material.opacity = 0.6;\n                    red_material.transparent = true;\n                    a.mesh.material = red_material;\n                    b.mesh.material = red_material;\n                }\n            }\n\n            const toBeRemoved: any[] = [];\n\n            for (let contact of contacts) {\n                const sphere_geometry = new THREE.SphereGeometry(1);\n                const material = new THREE.MeshBasicMaterial({ color: 0xffff00 });\n                const sphere = new THREE.Mesh(sphere_geometry, material);\n                sphere.position.set(contact.contactPoint.x, contact.contactPoint.y, contact.contactPoint.z);\n                scene.add(sphere);\n                toBeRemoved.push(sphere);\n                const dir = contact.contactNormal.clone().normalize();\n                const origin = contact.contactPoint;\n                const length = 20;\n                const hex = 0xffff00;\n                const arrowHelper = new THREE.ArrowHelper(dir, origin, length, hex);\n                scene.add(arrowHelper);\n                toBeRemoved.push(arrowHelper);\n\n                if (contact.type === \"vertex-face\") {\n\n                } else if (contact.type === \"edge-edge\") {\n                    const a_points = [contact.edge_a.a, contact.edge_a.b];\n                    const b_points = [contact.edge_b.a, contact.edge_b.b];\n                    const material = new THREE.LineBasicMaterial({color: 0xffff00});\n                    const geometry_a = new THREE.BufferGeometry().setFromPoints(a_points);\n                    const geometry_b = new THREE.BufferGeometry().setFromPoints(b_points);\n                    const line_a = new THREE.Line(geometry_a, material);\n                    const line_b = new THREE.Line(geometry_b, material);\n                    scene.add(line_a);\n                    scene.add(line_b);\n                    toBeRemoved.push(line_a);\n                    toBeRemoved.push(line_b);\n                } else {\n                    console.error(\"contact type not recognized\");\n                }\n            }\n\n            currentInstance.renderer.render(scene, camera);\n            for (let object of toBeRemoved) {\n                scene.remove(object);\n            }\n        }\n\n        animate();\n    }\n\n    onRestart(): void {\n        this.initialize();\n        this.onVisualize();\n    }\n\n    onResume(): void {\n        this.onVisualize();\n    }\n\n    onPause(): void {\n        // cancel ongoing animation\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"playground\">\n                <h2>Demo 2</h2>\n                <p>This scene shows how the physics engine detects and resolves collisions between spheres, boxes, and planes. At each time step, the engine first checks for all bounding box intersections using a sort and sweep algorithm. Then, the engine checks each bounding box intersection for collisions using the separating axis technique. If a collision is detected, contact data is generated that includes the information needed to resolve the collision. Finally, all colliding collisions are resolved by calculating and applying an impulse.</p>\n                <button onClick={this.onRestart}>Restart</button>\n                <button onClick={this.onResume}>Resume</button>\n                <button onClick={this.onPause}>Pause</button>\n                <div id=\"canvas_container\">\n                    <canvas ref={this.canvasRef} width={CANVAS_WIDTH} height={CANVAS_HEIGHT} />\n                </div>\n            </div>\n        )\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}