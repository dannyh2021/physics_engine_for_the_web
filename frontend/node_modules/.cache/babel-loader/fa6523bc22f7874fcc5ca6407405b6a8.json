{"ast":null,"code":"var _jsxFileName = \"/Users/danny/Github/physics_engine_for_the_web/frontend/src/Playgrounds/Playground.tsx\";\nimport React from \"react\";\nimport { getAllBoundingBoxIntersections, World } from \"../physics_engine/physics_engine\";\nimport * as THREE from \"three\";\nimport { Vector3 } from \"three\";\nimport { Sphere } from \"../physics_engine/Sphere\";\nimport { Box } from \"../physics_engine/Box\";\nimport { OrbitControls } from \"three-orbitcontrols-ts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CANVAS_WIDTH = 1000;\nconst CANVAS_HEIGHT = 500; // camera\n\nconst camera = new THREE.PerspectiveCamera(45, CANVAS_WIDTH / CANVAS_HEIGHT, 1, 1000);\ncamera.position.set(0, -CANVAS_HEIGHT / 6, CANVAS_HEIGHT / 6);\ncamera.up.set(0, 1, 0); // add lighting\n\nconst light_color = 0xffffff;\nconst intensity = 1;\nconst point_light = new THREE.PointLight(light_color, intensity);\npoint_light.position.set(50, 50, 50);\nconst ambient_light = new THREE.AmbientLight(light_color, 0.2);\nexport default class Playground extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = void 0;\n    this.w = void 0;\n    this.renderer = void 0;\n    this.animationRequestID = void 0;\n    this.scene = void 0;\n    this.canvasRef = /*#__PURE__*/React.createRef();\n    this.w = new World(); // graphics\n\n    this.renderer = null;\n    this.animationRequestID = null; // bindings\n\n    this.onRestart = this.onRestart.bind(this);\n    this.onResume = this.onResume.bind(this);\n    this.onPause = this.onPause.bind(this);\n  }\n\n  componentDidMount() {\n    this.w = new World(); // graphics\n\n    this.renderer = new THREE.WebGLRenderer({\n      canvas: this.canvasRef.current,\n      alpha: false\n    });\n    this.renderer.setSize(CANVAS_WIDTH, CANVAS_HEIGHT); // orbit controls\n\n    const controls = new OrbitControls(camera, this.renderer.domElement);\n    this.initialize();\n    this.onVisualize();\n  }\n\n  initialize() {\n    // cancel ongoing animation\n    if (this.animationRequestID) {\n      cancelAnimationFrame(this.animationRequestID);\n    }\n\n    this.scene = new THREE.Scene(); // set up objects\n\n    const sphere = new Sphere(new Vector3(0, 0, 0), 5);\n    const box = new Box(new Vector3(20, 20, 20), 10, 10, 10);\n    this.scene.add(box.mesh); //this.w.addObject(sphere);\n\n    this.w.addObject(box);\n    const boxGeometry = new THREE.BoxGeometry(5, 5, 5);\n    const material = new THREE.MeshPhongMaterial({\n      color: 0x00bcd6\n    });\n    const box1 = new THREE.Mesh(boxGeometry, material); // box1.position.set(-20, 20, 20);\n    // add object meshes and bounding box meshes to scene\n\n    for (let object of this.w.getObjects()) {\n      this.scene.add(object.mesh); // add bounding box mesh\n\n      this.scene.add(object.boundingBoxMesh);\n    } // add gridHelper\n\n\n    const gridHelper = new THREE.GridHelper(100, 10);\n    gridHelper.rotateOnWorldAxis(new Vector3(1, 0, 0), Math.PI / 2);\n    this.scene.add(gridHelper); // add lighting\n\n    this.scene.add(point_light, ambient_light);\n  }\n\n  onVisualize() {\n    // cancel ongoing animation\n    if (this.animationRequestID) {\n      cancelAnimationFrame(this.animationRequestID);\n    }\n\n    const renderer = this.renderer;\n    const scene = this.scene;\n    const world = this.w;\n    const objects = world.getObjects();\n    console.log(\"objects length: \", objects.length);\n    const currentInstance = this;\n\n    function animate() {\n      currentInstance.animationRequestID = requestAnimationFrame(animate); // physics step\n\n      world.integrateObjects(1 / 60); // graphics step\n\n      world.updateMeshes(); // reset mesh colors\n\n      for (let object of objects) {\n        object.mesh.material = new THREE.MeshPhongMaterial({\n          color: 0x00bcd6\n        });\n        object.boundingBoxMesh.material = new THREE.LineBasicMaterial({\n          color: 0xffffff\n        });\n      } // color intersecting bounding boxes and objects\n\n\n      const boundingBoxIntersections = getAllBoundingBoxIntersections(objects);\n\n      for (let boundingBoxIntersection of boundingBoxIntersections) {\n        boundingBoxIntersection.a.boundingBoxMesh.material = new THREE.LineBasicMaterial({\n          color: 0xff0000\n        });\n        boundingBoxIntersection.b.boundingBoxMesh.material = new THREE.LineBasicMaterial({\n          color: 0xff0000\n        }); // todo: color collisions\n      } // camera.lookAt(0, 0, 0);\n\n\n      renderer.render(scene, camera);\n    }\n\n    animate();\n  }\n\n  onRestart() {\n    this.initialize();\n    this.onVisualize();\n  }\n\n  onResume() {\n    this.onVisualize();\n  }\n\n  onPause() {\n    // cancel ongoing animation\n    if (this.animationRequestID) {\n      cancelAnimationFrame(this.animationRequestID);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playground\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Playground page desu...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"canvas_container\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: this.canvasRef,\n          width: CANVAS_WIDTH,\n          height: CANVAS_HEIGHT\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"names":["React","getAllBoundingBoxIntersections","World","THREE","Vector3","Sphere","Box","OrbitControls","CANVAS_WIDTH","CANVAS_HEIGHT","camera","PerspectiveCamera","position","set","up","light_color","intensity","point_light","PointLight","ambient_light","AmbientLight","Playground","Component","constructor","props","canvasRef","w","renderer","animationRequestID","scene","createRef","onRestart","bind","onResume","onPause","componentDidMount","WebGLRenderer","canvas","current","alpha","setSize","controls","domElement","initialize","onVisualize","cancelAnimationFrame","Scene","sphere","box","add","mesh","addObject","boxGeometry","BoxGeometry","material","MeshPhongMaterial","color","box1","Mesh","object","getObjects","boundingBoxMesh","gridHelper","GridHelper","rotateOnWorldAxis","Math","PI","world","objects","console","log","length","currentInstance","animate","requestAnimationFrame","integrateObjects","updateMeshes","LineBasicMaterial","boundingBoxIntersections","boundingBoxIntersection","a","b","render"],"sources":["/Users/danny/Github/physics_engine_for_the_web/frontend/src/Playgrounds/Playground.tsx"],"sourcesContent":["import React from \"react\";\nimport { getAllBoundingBoxIntersections, World } from \"../physics_engine/physics_engine\";\nimport * as THREE from \"three\";\nimport { Vector3 } from \"three\";\nimport { Sphere } from \"../physics_engine/Sphere\";\nimport { Box } from \"../physics_engine/Box\";\nimport { OrbitControls } from \"three-orbitcontrols-ts\";\n\nconst CANVAS_WIDTH = 1000;\nconst CANVAS_HEIGHT = 500;\n\n// camera\nconst camera = new THREE.PerspectiveCamera(45, CANVAS_WIDTH / CANVAS_HEIGHT, 1, 1000);\ncamera.position.set(0, -CANVAS_HEIGHT / 6, CANVAS_HEIGHT / 6);\ncamera.up.set(0, 1, 0);\n\n// add lighting\nconst light_color = 0xffffff;\nconst intensity = 1;\nconst point_light = new THREE.PointLight(light_color, intensity);\npoint_light.position.set(50, 50, 50);\n\nconst ambient_light = new THREE.AmbientLight(light_color, 0.2);\n\nexport default class Playground extends React.Component {\n    private canvasRef: any;\n\n    private w: World;\n\n    private renderer: any;\n    private animationRequestID: any;\n    private scene: THREE.Scene;\n\n    constructor(props: any) {\n        super(props);\n        this.canvasRef = React.createRef();\n        this.w = new World();\n\n        // graphics\n        this.renderer = null;\n        this.animationRequestID = null;\n\n        // bindings\n        this.onRestart = this.onRestart.bind(this);\n        this.onResume = this.onResume.bind(this);\n        this.onPause = this.onPause.bind(this);\n    }\n\n    componentDidMount(): void {\n        this.w = new World();\n\n        // graphics\n        this.renderer = new THREE.WebGLRenderer({ canvas: this.canvasRef.current, alpha: false })\n        this.renderer.setSize(CANVAS_WIDTH, CANVAS_HEIGHT);\n\n        // orbit controls\n        const controls = new OrbitControls(camera, this.renderer.domElement);\n\n        this.initialize();\n        this.onVisualize();\n    }\n\n    initialize(): void {\n        // cancel ongoing animation\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n\n        this.scene = new THREE.Scene();\n\n        // set up objects\n        const sphere = new Sphere(new Vector3(0, 0, 0), 5);\n        const box = new Box(new Vector3(20, 20, 20), 10, 10, 10);\n\n        this.scene.add(box.mesh);\n\n        //this.w.addObject(sphere);\n        this.w.addObject(box);\n\n        const boxGeometry = new THREE.BoxGeometry(5, 5, 5);\n        const material = new THREE.MeshPhongMaterial({ color: 0x00bcd6 });\n        const box1 = new THREE.Mesh(boxGeometry, material);\n        // box1.position.set(-20, 20, 20);\n\n        // add object meshes and bounding box meshes to scene\n        for (let object of this.w.getObjects()) {\n            this.scene.add(object.mesh);\n            \n            // add bounding box mesh\n            this.scene.add(object.boundingBoxMesh);\n        }\n\n        // add gridHelper\n        const gridHelper = new THREE.GridHelper( 100, 10 );\n        gridHelper.rotateOnWorldAxis(new Vector3(1, 0, 0), Math.PI/2);\n        this.scene.add(gridHelper);\n\n        // add lighting\n        this.scene.add(point_light, ambient_light);\n    }\n\n    onVisualize(): void {\n        // cancel ongoing animation\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n\n        const renderer = this.renderer;\n        const scene = this.scene;\n        const world = this.w;\n        const objects = world.getObjects();\n\n        console.log(\"objects length: \", objects.length);\n\n        const currentInstance = this;\n        function animate() {\n            currentInstance.animationRequestID = requestAnimationFrame(animate);\n\n            // physics step\n            world.integrateObjects(1/60);\n            \n            // graphics step\n            world.updateMeshes();\n\n            // reset mesh colors\n            for (let object of objects) {\n                object.mesh.material = new THREE.MeshPhongMaterial({ color: 0x00bcd6 });\n                object.boundingBoxMesh.material = new THREE.LineBasicMaterial({ color: 0xffffff });\n            }\n\n            // color intersecting bounding boxes and objects\n            const boundingBoxIntersections = getAllBoundingBoxIntersections(objects);\n            for(let boundingBoxIntersection of boundingBoxIntersections) {\n                boundingBoxIntersection.a.boundingBoxMesh.material = new THREE.LineBasicMaterial({ color: 0xff0000 });\n                boundingBoxIntersection.b.boundingBoxMesh.material = new THREE.LineBasicMaterial({ color: 0xff0000 });\n\n                // todo: color collisions\n            }\n\n            // camera.lookAt(0, 0, 0);\n\n            renderer.render(scene, camera);\n        }\n        animate();\n    }\n\n    onRestart(): void {\n        this.initialize();\n        this.onVisualize();\n    }\n\n    onResume(): void {\n        this.onVisualize();\n    }\n\n    onPause(): void {\n        // cancel ongoing animation\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"playground\">\n                <h2>Playground page desu...</h2>\n                <div id=\"canvas_container\">\n                    <canvas ref={this.canvasRef} width={CANVAS_WIDTH} height={CANVAS_HEIGHT} />\n                </div>\n            </div>\n        )\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}