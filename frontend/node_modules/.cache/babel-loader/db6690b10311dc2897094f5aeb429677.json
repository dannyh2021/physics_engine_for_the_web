{"ast":null,"code":"var _jsxFileName = \"/Users/danny/Github/physics_engine_for_the_web/frontend/src/Playgrounds/Playground5.tsx\";\nimport React from \"react\";\nimport { getAllBoundingBoxIntersections } from \"../physics_engine/physics_engine\";\nimport * as THREE from \"three\";\nimport { Vector3 } from \"three\";\nimport { Box } from \"../physics_engine/Box\";\nimport { OrbitControls } from \"three-orbitcontrols-ts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CANVAS_WIDTH = 1000;\nconst CANVAS_HEIGHT = 500; // camera\n\nconst camera = new THREE.PerspectiveCamera(45, CANVAS_WIDTH / CANVAS_HEIGHT, 1, 1000);\ncamera.position.set(0, 0, CANVAS_HEIGHT / 4);\ncamera.up.set(0, 1, 0); // add lighting\n\nconst light_color = 0xffffff;\nconst intensity = 1;\nconst point_light = new THREE.PointLight(light_color, intensity);\npoint_light.position.set(50, 50, 50);\nconst ambient_light = new THREE.AmbientLight(light_color, 0.2);\nexport default class Playground5 extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = void 0;\n    this.renderer = void 0;\n    this.animationRequestID = void 0;\n    this.scene = void 0;\n    this.boxes = void 0;\n    this.canvasRef = /*#__PURE__*/React.createRef();\n    this.scene = new THREE.Scene();\n    this.boxes = []; // graphics\n\n    this.renderer = null;\n    this.animationRequestID = null;\n  }\n\n  componentDidMount() {\n    // graphics\n    this.renderer = new THREE.WebGLRenderer({\n      canvas: this.canvasRef.current,\n      alpha: false\n    });\n    this.renderer.setSize(CANVAS_WIDTH, CANVAS_HEIGHT); // orbit controls\n\n    const controls = new OrbitControls(camera, this.renderer.domElement);\n    this.initialize();\n    this.onVisualize();\n  }\n\n  initialize() {\n    // cancel ongoing animation\n    if (this.animationRequestID) {\n      cancelAnimationFrame(this.animationRequestID);\n    }\n\n    this.scene = new THREE.Scene(); // set up objects\n\n    const b = new Box(new Vector3(0, 0, 20), 30, 5, 5);\n    const b2 = new Box(new Vector3(40, 20, 20), 5, 5, 20);\n    const b3 = new Box(new Vector3(-40, 20, 20), 30, 5, 5);\n    const b4 = new Box(new Vector3(-70, 10, 20), 5, 5, 5);\n    b4.momentum = new Vector3(20, 0, 0).multiplyScalar(1 / b4.inverseMass);\n    this.boxes = [b, b2, b3, b4]; // graphics\n\n    for (let box of this.boxes) {\n      this.scene.add(box.mesh); // add bounding box mesh\n\n      this.scene.add(box.boundingBoxMesh);\n    } // add lighting\n\n\n    this.scene.add(point_light, ambient_light); // add gridHelper\n\n    const gridHelper = new THREE.GridHelper(100, 10);\n    gridHelper.rotateOnWorldAxis(new Vector3(1, 0, 0), Math.PI / 2);\n    this.scene.add(gridHelper);\n  }\n\n  onVisualize() {\n    // cancel ongoing animation\n    if (this.animationRequestID) {\n      cancelAnimationFrame(this.animationRequestID);\n    }\n\n    const scene = this.scene;\n    const boxes = this.boxes;\n    let boundingBoxIntersections = getAllBoundingBoxIntersections(boxes);\n    const currentInstance = this;\n\n    function animate() {\n      currentInstance.animationRequestID = requestAnimationFrame(animate); // physics step\n\n      for (let box of boxes) {\n        box.integrate(1 / 60);\n      } // get bounding box intersections\n\n\n      boundingBoxIntersections = getAllBoundingBoxIntersections(boxes); // graphics step\n\n      for (let box of boxes) {\n        // update position and rotation of the box mesh\n        box.updateMesh();\n        box.updateBoundingBoxMesh(); // clear bounding box color\n\n        box.boundingBoxMesh.material = new THREE.LineBasicMaterial({\n          color: 0xffffff\n        });\n      } // color the bound boxes of intersecting boxes\n\n\n      for (let i = 0; i < boundingBoxIntersections.length; i++) {\n        const a = boundingBoxIntersections[i].a;\n        const b = boundingBoxIntersections[i].b;\n        a.boundingBoxMesh.material = new THREE.LineBasicMaterial({\n          color: 0xff0000\n        });\n        b.boundingBoxMesh.material = new THREE.LineBasicMaterial({\n          color: 0xff0000\n        });\n      }\n\n      currentInstance.renderer.render(scene, camera);\n    }\n\n    animate();\n  }\n\n  resume() {\n    this.onVisualize();\n  }\n\n  pause() {\n    // cancel ongoing animation\n    if (this.animationRequestID) {\n      cancelAnimationFrame(this.animationRequestID);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playground\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Playground 5 page desu...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"canvas_container\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: this.canvasRef,\n          width: CANVAS_WIDTH,\n          height: CANVAS_HEIGHT\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"names":["React","getAllBoundingBoxIntersections","THREE","Vector3","Box","OrbitControls","CANVAS_WIDTH","CANVAS_HEIGHT","camera","PerspectiveCamera","position","set","up","light_color","intensity","point_light","PointLight","ambient_light","AmbientLight","Playground5","Component","constructor","props","canvasRef","renderer","animationRequestID","scene","boxes","createRef","Scene","componentDidMount","WebGLRenderer","canvas","current","alpha","setSize","controls","domElement","initialize","onVisualize","cancelAnimationFrame","b","b2","b3","b4","momentum","multiplyScalar","inverseMass","box","add","mesh","boundingBoxMesh","gridHelper","GridHelper","rotateOnWorldAxis","Math","PI","boundingBoxIntersections","currentInstance","animate","requestAnimationFrame","integrate","updateMesh","updateBoundingBoxMesh","material","LineBasicMaterial","color","i","length","a","render","resume","pause"],"sources":["/Users/danny/Github/physics_engine_for_the_web/frontend/src/Playgrounds/Playground5.tsx"],"sourcesContent":["import React from \"react\";\nimport { checkBoundingBoxIntersection, getAllBoundingBoxIntersections, World } from \"../physics_engine/physics_engine\";\nimport * as THREE from \"three\";\nimport { Matrix3, Vector3 } from \"three\";\nimport { Sphere } from \"../physics_engine/Sphere\";\nimport { Box } from \"../physics_engine/Box\";\nimport { OrbitControls } from \"three-orbitcontrols-ts\";\n\nconst CANVAS_WIDTH = 1000;\nconst CANVAS_HEIGHT = 500;\n\n// camera\nconst camera = new THREE.PerspectiveCamera(45, CANVAS_WIDTH / CANVAS_HEIGHT, 1, 1000);\ncamera.position.set(0, 0, CANVAS_HEIGHT / 4);\ncamera.up.set(0, 1, 0);\n\n// add lighting\nconst light_color = 0xffffff;\nconst intensity = 1;\nconst point_light = new THREE.PointLight(light_color, intensity);\npoint_light.position.set(50, 50, 50);\n\nconst ambient_light = new THREE.AmbientLight(light_color, 0.2);\n\nexport default class Playground5 extends React.Component {\n    private canvasRef: any;\n    private renderer: any;\n    private animationRequestID: any;\n    private scene: THREE.Scene;\n    private boxes: any[];\n\n    constructor(props: any) {\n        super(props);\n        this.canvasRef = React.createRef();\n        this.scene = new THREE.Scene();\n        this.boxes = [];\n\n        // graphics\n        this.renderer = null;\n        this.animationRequestID = null;\n    }\n\n    componentDidMount(): void {\n        // graphics\n        this.renderer = new THREE.WebGLRenderer({ canvas: this.canvasRef.current, alpha: false })\n        this.renderer.setSize(CANVAS_WIDTH, CANVAS_HEIGHT);\n\n        // orbit controls\n        const controls = new OrbitControls(camera, this.renderer.domElement);\n\n        this.initialize();\n        this.onVisualize();\n    }\n\n    initialize() {\n        // cancel ongoing animation\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n\n        this.scene = new THREE.Scene();\n\n        // set up objects\n        const b = new Box(new Vector3(0, 0, 20), 30, 5, 5);\n        const b2 = new Box(new Vector3(40, 20, 20), 5, 5, 20);\n        const b3 = new Box(new Vector3(-40, 20, 20), 30, 5, 5);\n\n        const b4 = new Box(new Vector3(-70, 10, 20), 5, 5, 5);\n        b4.momentum = (new Vector3(20, 0, 0)).multiplyScalar(1/b4.inverseMass);\n\n        this.boxes = [b, b2, b3, b4];\n\n        // graphics\n        for (let box of this.boxes) {\n            this.scene.add(box.mesh);\n            \n            // add bounding box mesh\n            this.scene.add(box.boundingBoxMesh);\n        }\n\n        // add lighting\n        this.scene.add(point_light, ambient_light);\n\n        // add gridHelper\n        const gridHelper = new THREE.GridHelper( 100, 10 );\n        gridHelper.rotateOnWorldAxis(new Vector3(1, 0, 0), Math.PI/2);\n        this.scene.add(gridHelper);\n    }\n\n    onVisualize() {\n        // cancel ongoing animation\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n\n        const scene = this.scene;\n        const boxes = this.boxes;\n\n        let boundingBoxIntersections = getAllBoundingBoxIntersections(boxes);\n\n        const currentInstance = this;\n        function animate() {\n            currentInstance.animationRequestID = requestAnimationFrame(animate);\n\n            // physics step\n            for (let box of boxes) {\n                box.integrate(1/60);\n            }\n\n            // get bounding box intersections\n            boundingBoxIntersections = getAllBoundingBoxIntersections(boxes);\n\n            // graphics step\n            for (let box of boxes) {\n                // update position and rotation of the box mesh\n                box.updateMesh();\n                box.updateBoundingBoxMesh();\n\n                // clear bounding box color\n                box.boundingBoxMesh.material = new THREE.LineBasicMaterial({ color: 0xffffff });\n            }\n\n            // color the bound boxes of intersecting boxes\n            for(let i = 0; i < boundingBoxIntersections.length; i++) {\n                const a = boundingBoxIntersections[i].a;\n                const b = boundingBoxIntersections[i].b;\n                a.boundingBoxMesh.material = new THREE.LineBasicMaterial({ color: 0xff0000 });\n                b.boundingBoxMesh.material = new THREE.LineBasicMaterial({ color: 0xff0000 });\n            }\n            currentInstance.renderer.render(scene, camera);\n        }\n        animate();\n    }\n\n    resume(): void {\n        this.onVisualize();\n    }\n\n    pause(): void {\n        // cancel ongoing animation\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"playground\">\n                <h2>Playground 5 page desu...</h2>\n                <div id=\"canvas_container\">\n                    <canvas ref={this.canvasRef} width={CANVAS_WIDTH} height={CANVAS_HEIGHT} />\n                </div>\n            </div>\n        )\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}