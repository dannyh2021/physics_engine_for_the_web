{"ast":null,"code":"import { Vector3, Matrix3 } from \"three\";\nexport class Box {\n  // I_b\n  // the orientation\n  constructor(position, width, length, height) {\n    this.inverseMass = void 0;\n    this.width = void 0;\n    this.length = void 0;\n    this.height = void 0;\n    this.inertia = void 0;\n    this.position = void 0;\n    this.momentum = void 0;\n    this.rotation = void 0;\n    this.angularMomentum = void 0;\n    this.inverseMass = 1 / (width * length * height);\n    this.width = width;\n    this.length = length;\n    this.height = height;\n    this.inertia = new Matrix3();\n    this.inertia.set(I_xx, I_xy, I_xz, I_xy, I_yy, I_yz, I_zx, I_zy, I_zz);\n    this.position = position;\n    this.momentum = new Vector3(1, 0, 0).multiplyScalar(1 / this.inverseMass);\n    this.rotation = new Matrix3();\n  }\n\n  integrate(duration) {\n    // Don't integrate if mass is infinite or duration <= 0.\n    if (this.inverseMass <= 0 || duration <= 0) {\n      return;\n    }\n\n    this.position.addScaledVector(this.momentum, this.inverseMass * duration);\n  }\n\n}","map":{"version":3,"names":["Vector3","Matrix3","Box","constructor","position","width","length","height","inverseMass","inertia","momentum","rotation","angularMomentum","set","I_xx","I_xy","I_xz","I_yy","I_yz","I_zx","I_zy","I_zz","multiplyScalar","integrate","duration","addScaledVector"],"sources":["/Users/danny/Github/physics_engine_for_the_web/frontend/src/physics_engine/Box.ts"],"sourcesContent":["import * as THREE from \"three\";\nimport { Vector3, Matrix3 } from \"three\";\n\nexport class Box {\n    public inverseMass: number;\n\n    public width: number;\n    public length: number;\n    public height: number;\n\n    public inertia: Matrix3; // I_b\n\n    public position: Vector3;\n    public momentum: Vector3;\n\n    public rotation: Matrix3; // the orientation\n    public angularMomentum: Vector3;\n\n    constructor(position: Vector3, width: number, length: number, height: number) {\n        this.inverseMass = 1 / (width * length * height);\n\n        this.width = width;\n        this.length = length;\n        this.height = height;\n\n        this.inertia = new Matrix3();\n        this.inertia.set(I_xx, I_xy, I_xz,\n                         I_xy, I_yy, I_yz,\n                         I_zx, I_zy, I_zz);\n        \n        this.position = position;\n        this.momentum = (new Vector3(1, 0, 0)).multiplyScalar(1/this.inverseMass);\n\n        this.rotation = new Matrix3();\n    }\n\n    integrate(duration: number): void {\n        // Don't integrate if mass is infinite or duration <= 0.\n        if (this.inverseMass <= 0 || duration <= 0) {\n            return;\n        }\n\n        this.position.addScaledVector(this.momentum, this.inverseMass * duration);\n    }\n}"],"mappings":"AACA,SAASA,OAAT,EAAkBC,OAAlB,QAAiC,OAAjC;AAEA,OAAO,MAAMC,GAAN,CAAU;EAOY;EAKC;EAG1BC,WAAW,CAACC,QAAD,EAAoBC,KAApB,EAAmCC,MAAnC,EAAmDC,MAAnD,EAAmE;IAAA,KAdvEC,WAcuE;IAAA,KAZvEH,KAYuE;IAAA,KAXvEC,MAWuE;IAAA,KAVvEC,MAUuE;IAAA,KARvEE,OAQuE;IAAA,KANvEL,QAMuE;IAAA,KALvEM,QAKuE;IAAA,KAHvEC,QAGuE;IAAA,KAFvEC,eAEuE;IAC1E,KAAKJ,WAAL,GAAmB,KAAKH,KAAK,GAAGC,MAAR,GAAiBC,MAAtB,CAAnB;IAEA,KAAKF,KAAL,GAAaA,KAAb;IACA,KAAKC,MAAL,GAAcA,MAAd;IACA,KAAKC,MAAL,GAAcA,MAAd;IAEA,KAAKE,OAAL,GAAe,IAAIR,OAAJ,EAAf;IACA,KAAKQ,OAAL,CAAaI,GAAb,CAAiBC,IAAjB,EAAuBC,IAAvB,EAA6BC,IAA7B,EACiBD,IADjB,EACuBE,IADvB,EAC6BC,IAD7B,EAEiBC,IAFjB,EAEuBC,IAFvB,EAE6BC,IAF7B;IAIA,KAAKjB,QAAL,GAAgBA,QAAhB;IACA,KAAKM,QAAL,GAAiB,IAAIV,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAD,CAAuBsB,cAAvB,CAAsC,IAAE,KAAKd,WAA7C,CAAhB;IAEA,KAAKG,QAAL,GAAgB,IAAIV,OAAJ,EAAhB;EACH;;EAEDsB,SAAS,CAACC,QAAD,EAAyB;IAC9B;IACA,IAAI,KAAKhB,WAAL,IAAoB,CAApB,IAAyBgB,QAAQ,IAAI,CAAzC,EAA4C;MACxC;IACH;;IAED,KAAKpB,QAAL,CAAcqB,eAAd,CAA8B,KAAKf,QAAnC,EAA6C,KAAKF,WAAL,GAAmBgB,QAAhE;EACH;;AAxCY"},"metadata":{},"sourceType":"module"}