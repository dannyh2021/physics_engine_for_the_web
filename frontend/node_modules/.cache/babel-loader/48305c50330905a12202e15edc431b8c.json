{"ast":null,"code":"import { Matrix3, Vector3 } from \"three\";\nimport { Box } from \"./Box\";\nimport { Plane } from \"./Plane\";\nexport class World {\n  // 0 is fully inelastic, 1 is fully elastic\n  // time step in seconds\n  constructor() {\n    this.objects = void 0;\n    this.coefficient_of_restitution = 1;\n    this.dt = 1 / 60;\n    this.objects = [];\n  }\n\n  addObject(obj) {\n    this.objects.push(obj);\n  }\n\n  detectAndResolveCollisions() {\n    const boundingBoxIntersections = getAllBoundingBoxIntersections(this.objects);\n  }\n\n  integrateObjects(duration) {\n    for (let object of this.objects) {\n      if (object instanceof Plane) {\n        continue;\n      }\n\n      object.integrate(duration);\n    }\n  }\n\n  updateMeshes() {\n    for (let object of this.objects) {\n      if (object instanceof Plane) {\n        continue;\n      }\n\n      object.updateMesh();\n      object.updateBoundingBoxMesh();\n    }\n  }\n\n}\n/**\n * checks if the bounding box of two objects intersect\n * @param a the first object\n * @param b the other object\n */\n\nexport function checkBoundingBoxIntersection(a, b) {\n  // create intervals\n  const a_x_min = a.position.x - a.boundingBox.x / 2;\n  const a_x_max = a.position.x + a.boundingBox.x / 2;\n  const a_y_min = a.position.y - a.boundingBox.y / 2;\n  const a_y_max = a.position.y + a.boundingBox.y / 2;\n  const a_z_min = a.position.z - a.boundingBox.z / 2;\n  const a_z_max = a.position.z + a.boundingBox.z / 2;\n  const b_x_min = b.position.x - b.boundingBox.x / 2;\n  const b_x_max = b.position.x + b.boundingBox.x / 2;\n  const b_y_min = b.position.y - b.boundingBox.y / 2;\n  const b_y_max = b.position.y + b.boundingBox.y / 2;\n  const b_z_min = b.position.z - b.boundingBox.z / 2;\n  const b_z_max = b.position.z + b.boundingBox.z / 2; // intersecting if all intervals are intersecting\n\n  if (a_x_min < b_x_max && b_x_min < a_x_max && a_y_min < b_y_max && b_y_min < a_y_max && a_z_min < b_z_max && b_z_min < a_z_max) {\n    return true;\n  }\n\n  return false;\n}\nexport function getAllBoundingBoxIntersections(objects) {\n  // for now just sort against x-axis. Slightly better is to update axis based on one with highest variance\n  // worst case is still O(n^2)\n  function compareBoundingBoxes(a, b) {\n    const a_min = a.position.x - a.boundingBox.x / 2;\n    const b_min = b.position.x - b.boundingBox.x / 2;\n    return a_min - b_min;\n  } // sort objects along x-axis\n\n\n  const objectsCopy = [...objects];\n  objectsCopy.sort(compareBoundingBoxes); // sweep the array for collisions\n\n  const intersections = [];\n\n  for (let i = 0; i < objectsCopy.length - 1; i++) {\n    // test against all possible overlapping boxes following the current one.\n    for (let j = i + 1; j < objectsCopy.length; j++) {\n      // stop testing when AABBs are beyond the current AABB\n      const i_max = objectsCopy[i].position.x + objectsCopy[i].boundingBox.x / 2;\n      const j_min = objectsCopy[j].position.x - objectsCopy[j].boundingBox.x / 2;\n\n      if (j_min > i_max) {\n        break;\n      }\n\n      if (checkBoundingBoxIntersection(objectsCopy[i], objectsCopy[j])) {\n        intersections.push({\n          a: objectsCopy[i],\n          b: objectsCopy[j]\n        });\n      }\n    }\n  }\n\n  return intersections;\n}\nexport function checkCollision(a, b) {\n  if (a instanceof Box && b instanceof Box) {\n    return checkCollisionBoxes(a, b);\n  } else {\n    console.error(\"checking collision between these types not implemented.\");\n  }\n}\nexport function checkCollisionBoxes(a, b) {\n  // two convex objects don't collide iff there exists a separating plane between them\n  // search for separating plane.\n  // either its contain a face of one polyhedra or it contains an edge of one polyhedra and is parallel to the edge of the other polyhedra.\n  const a_coordinateAxes = getCoordinateAxes(a);\n  const b_coordinateAxes = getCoordinateAxes(b); // check the 6 face axes\n\n  for (let faceAxis of a_coordinateAxes) {\n    if (separatingAxisPenetration(a, b, faceAxis) < 0) {\n      return false;\n    }\n  }\n\n  for (let faceAxis of b_coordinateAxes) {\n    if (separatingAxisPenetration(a, b, faceAxis) < 0) {\n      return false;\n    }\n  } // check the 9 edge-edge axes\n\n\n  for (let a_axis of a_coordinateAxes) {\n    for (let b_axis of b_coordinateAxes) {\n      let m = a_axis.clone().cross(b_axis);\n\n      if (m.length() > 0) {\n        // note to self: should use epsilon when checking for zero vector to  improve stability\n        if (separatingAxisPenetration(a, b, m) < 0) {\n          return false;\n        }\n      } else {\n        // for now, ignore case where the corresponding edges are parallel.\n        continue;\n      }\n    }\n  }\n\n  return true;\n}\nexport function checkCollisionSphereAndPlane(sphere, plane) {\n  const relativePosition = sphere.position.clone().sub(plane.point);\n  const d = relativePosition.dot(plane.normal); // distance to center of sphere, negative if center is below plane.\n\n  return d <= sphere.radius;\n}\nexport function checkCollisionBoxAndSphere(box, sphere) {\n  // convert sphere center to box coordinate space\n  const coordinateAxes = getCoordinateAxes(box);\n  const inverseRotation = box.rotation.clone().invert();\n  let sphereCenter = sphere.position.clone().sub(box.position).applyQuaternion(inverseRotation); // Clamp each coordinate to the box.\n\n  const closestPoint = sphereCenter.clone();\n  closestPoint.x = Math.min(Math.max(closestPoint.x, box.width / 2), -box.width / 2);\n  closestPoint.y = Math.min(Math.max(closestPoint.y, box.length / 2), -box.length / 2);\n  closestPoint.z = Math.min(Math.max(closestPoint.z, box.height / 2), -box.height / 2); // check if they're in contact\n\n  const distance = sphereCenter.clone().sub(closestPoint).length();\n  return distance < sphere.radius;\n} // todo: refactor functions below\n\nexport function getContacts(boundingBoxIntersections) {\n  const contacts = [];\n\n  for (let i = 0; i < boundingBoxIntersections.length; i++) {\n    const a = boundingBoxIntersections[i].a;\n    const b = boundingBoxIntersections[i].b; // check for collisions and color them\n\n    if (checkCollision(a, b)) {\n      const contact = getContactData(a, b);\n      contacts.push(contact);\n    }\n  }\n\n  return contacts;\n}\nexport function getContactData(a, b) {\n  if (a instanceof Box || b instanceof Box) {\n    return getContactDataBoxes(a, b);\n  } else {\n    console.error(\"getting contact data between these types not implemented.\");\n  }\n} // convention: contact data is of format {a, b, type, contactNormal, penetration, contactPoint, ...} where contactNormal points from b to a\n// get contact data for two colliding boxes, assuming collision\n\nexport function getContactDataBoxes(a, b) {\n  const vector_ab = a.position.clone().sub(b.position);\n  const a_coordinateAxes = getCoordinateAxes(a);\n  const b_coordinateAxes = getCoordinateAxes(b);\n  let smallestOverlap = Infinity;\n  let contact;\n\n  for (let a_axis of a_coordinateAxes) {\n    const overlap = separatingAxisPenetration(a, b, a_axis);\n\n    if (overlap < smallestOverlap) {\n      smallestOverlap = overlap; // set contact\n\n      const axis = a_axis.clone();\n\n      if (vector_ab.clone().dot(axis) > 0) {\n        // orient axis to normal of the correct face.\n        axis.multiplyScalar(-1);\n      }\n\n      const vertex = getClosestVertex(a, b, axis);\n      contact = {\n        a: b,\n        b: a,\n        type: \"vertex-face\",\n        contactNormal: axis,\n        penetration: smallestOverlap,\n        contactPoint: vertex\n      };\n    }\n  }\n\n  for (let b_axis of b_coordinateAxes) {\n    const overlap = separatingAxisPenetration(a, b, b_axis);\n\n    if (overlap < smallestOverlap) {\n      smallestOverlap = overlap; // set contact\n\n      const axis = b_axis.clone();\n\n      if (vector_ab.clone().dot(axis) > 0) {\n        // orient axis to normal of the correct face.\n        axis.multiplyScalar(-1);\n      }\n\n      const vertex = getClosestVertex(b, a, axis);\n      contact = {\n        a: a,\n        b: b,\n        type: \"vertex-face\",\n        contactNormal: axis,\n        penetration: smallestOverlap,\n        contactPoint: vertex\n      };\n    }\n  }\n\n  for (let a_axis of a_coordinateAxes) {\n    for (let b_axis of b_coordinateAxes) {\n      let m = a_axis.clone().cross(b_axis);\n\n      if (m.length() > 0) {\n        // note to self: should use epsilon when checking for zero vector to  improve stability\n        const overlap = separatingAxisPenetration(a, b, m);\n\n        if (overlap < smallestOverlap) {\n          smallestOverlap = overlap; // set contact\n\n          const axis = m.clone();\n\n          if (vector_ab.clone().dot(axis) > 0) {\n            axis.multiplyScalar(-1);\n          }\n\n          const edge_a = getClosestEdge(b, a, a_axis, m);\n          const edge_b = getClosestEdge(a, b, b_axis, m);\n          contact = {\n            a: a,\n            b: b,\n            type: \"edge-edge\",\n            contactNormal: axis,\n            penetration: smallestOverlap,\n            edge_a: edge_a,\n            edge_b: edge_b\n          };\n        }\n      } else {\n        // for now, ignore case where the corresponding edges are parallel.\n        continue;\n      }\n    }\n  }\n\n  return contact;\n}\nconst coefficient_of_restitution = 1;\nexport function resolveCollision(contactData) {\n  const a = contactData.a;\n  const b = contactData.b;\n  const normal = contactData.contactNormal;\n\n  if (contactData.type === \"vertex-face\") {\n    const vertex = contactData.contactPoint;\n    const r_a = vertex.clone().sub(a.position);\n    const r_b = vertex.clone().sub(b.position);\n    const vertexVelocity_a = a.velocity.clone().add(a.getAngularVelocity().cross(r_a));\n    const vertexVelocity_b = b.velocity.clone().add(b.getAngularVelocity().cross(r_b));\n    const relativeVelocity = normal.dot(vertexVelocity_a.clone().sub(vertexVelocity_b));\n\n    if (relativeVelocity < 0) {\n      console.log(\"colliding contact\");\n      const I_inverse_a = a.getInertia().invert();\n      const I_inverse_b = b.getInertia().invert();\n      const term1 = normal.dot(r_a.clone().cross(normal).applyMatrix3(I_inverse_a).cross(r_a));\n      const term2 = normal.dot(r_b.clone().cross(normal).applyMatrix3(I_inverse_b).cross(r_b));\n      const j = -(1 + coefficient_of_restitution) * relativeVelocity / (a.inverseMass + b.inverseMass + term1 + term2);\n      const impulse = normal.clone().multiplyScalar(j);\n      const impulse2 = normal.clone().multiplyScalar(-j);\n      a.applyImpulse(vertex, impulse);\n      b.applyImpulse(vertex, impulse2);\n    } else if (relativeVelocity === 0) {\n      console.log(\"resting contact\");\n    } else {\n      // ignore\n      console.log(\"leaving\");\n    }\n  } else if (contactData.type === \"edge-edge\") {\n    console.log(\"resolving edge-edge contact\");\n    const vertex = getClosestPointBetweenTwoEdges(contactData.edge_a, contactData.edge_b);\n    const r_a = vertex.clone().sub(a.position);\n    const r_b = vertex.clone().sub(b.position);\n    const vertexVelocity_a = a.velocity.clone().add(a.getAngularVelocity().cross(r_a));\n    const vertexVelocity_b = b.velocity.clone().add(b.getAngularVelocity().cross(r_b));\n    const relativeVelocity = normal.dot(vertexVelocity_a.clone().sub(vertexVelocity_b));\n\n    if (relativeVelocity < 0) {\n      console.log(\"colliding contact\");\n      const I_inverse_a = a.getInertia().invert();\n      const I_inverse_b = b.getInertia().invert();\n      const term1 = normal.dot(r_a.clone().cross(normal).applyMatrix3(I_inverse_a).cross(r_a));\n      const term2 = normal.dot(r_b.clone().cross(normal).applyMatrix3(I_inverse_b).cross(r_b));\n      const j = -(1 + coefficient_of_restitution) * relativeVelocity / (a.inverseMass + b.inverseMass + term1 + term2);\n      const impulse = normal.clone().multiplyScalar(j);\n      const impulse2 = normal.clone().multiplyScalar(-j);\n      a.applyImpulse(vertex, impulse);\n      b.applyImpulse(vertex, impulse2);\n    } else if (relativeVelocity === 0) {\n      console.log(\"resting contact\");\n    } else {\n      // ignore\n      console.log(\"leaving\");\n    }\n  } else {\n    console.error(\"contactData type not recognized.\");\n  }\n} // returns closest edge of box b\n// edge should be parallel to input edgeVector\n\nfunction getClosestEdge(a, b, edgeVector, separatingAxis) {\n  const x = separatingAxis.x;\n  const y = separatingAxis.y;\n  const z = separatingAxis.z;\n  const projectionMatrix = new Matrix3();\n  projectionMatrix.set(x * x, x * y, x * z, x * y, y * y, y * z, x * z, y * z, z * z);\n  const a_center = a.position.clone().applyMatrix3(projectionMatrix);\n  const b_edges = getEdges(b);\n  const parallel_b_edges = [];\n\n  for (let b_edge of b_edges) {\n    const b_edgeVector = b_edge.b.clone().sub(b_edge.a);\n\n    if (b_edgeVector.clone().cross(edgeVector).length() === 0) {\n      parallel_b_edges.push(b_edge);\n    }\n  }\n\n  let closestEdge = parallel_b_edges[0];\n  let closestDistance = closestEdge.a.clone().sub(a_center).length();\n\n  for (let b_edge of parallel_b_edges) {\n    const d = b_edge.a.clone().sub(a_center).length();\n\n    if (d < closestDistance) {\n      closestDistance = d;\n      closestEdge = b_edge;\n    }\n  }\n\n  return closestEdge;\n} // returns closest vertex of box b to face of box a\n\n\nfunction getClosestVertex(a, b, lineVector) {\n  const b_vertices = getVertices(b);\n  let vertex = b_vertices[0];\n  const x = lineVector.x;\n  const y = lineVector.y;\n  const z = lineVector.z;\n  const projectionMatrix = new Matrix3();\n  projectionMatrix.set(x * x, x * y, x * z, x * y, y * y, y * z, x * z, y * z, z * z);\n  const a_center = a.position.clone().applyMatrix3(projectionMatrix);\n  const b_center = b.position.clone().applyMatrix3(projectionMatrix);\n  let smallestDistanceToA = b_center.clone().sub(a_center).length();\n\n  for (let b_v of b_vertices) {\n    const b_v_projection = b_v.applyMatrix3(projectionMatrix);\n    const d = b_v_projection.clone().sub(a_center).length();\n\n    if (d < smallestDistanceToA) {\n      smallestDistanceToA = d;\n      vertex = b_v;\n    }\n  }\n\n  return vertex;\n}\n\nfunction separatingAxisPenetration(a, b, lineVector) {\n  const x = lineVector.x;\n  const y = lineVector.y;\n  const z = lineVector.z;\n  const projectionMatrix = new Matrix3();\n  projectionMatrix.set(x * x, x * y, x * z, x * y, y * y, y * z, x * z, y * z, z * z);\n  const a_center = a.position.clone().applyMatrix3(projectionMatrix);\n  const b_center = b.position.clone().applyMatrix3(projectionMatrix);\n  const d = b_center.clone().sub(a_center).length();\n  const a_vertices = getVertices(a);\n  const b_vertices = getVertices(b);\n  let r_a = 0,\n      r_b = 0;\n\n  for (let a_v of a_vertices) {\n    const a_v_projection = a_v.applyMatrix3(projectionMatrix);\n    const r = a_center.clone().sub(a_v_projection).length();\n\n    if (r > r_a) {\n      r_a = r;\n    }\n  }\n\n  for (let b_v of b_vertices) {\n    const b_v_projection = b_v.applyMatrix3(projectionMatrix);\n    const r = b_center.clone().sub(b_v_projection).length();\n\n    if (r > r_b) {\n      r_b = r;\n    }\n  } // returns the overlap. positive indicates overlap, negative indicates separation.\n\n\n  return r_a + r_b - d;\n}\n\nfunction getClosestPointBetweenTwoEdges(e1, e2) {\n  const x1 = e1.a.x;\n  const x2 = e1.b.x;\n  const x3 = e2.a.x;\n  const x4 = e2.b.x;\n  const y1 = e1.a.y;\n  const y2 = e1.b.y;\n  const y3 = e2.a.y;\n  const y4 = e2.b.y;\n  const z1 = e1.a.z;\n  const z2 = e1.b.z;\n  const z3 = e2.a.z;\n  const z4 = e2.b.z; // temporary variables\n\n  const R_1_squared = Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2) + Math.pow(z2 - z1, 2);\n  const R_2_squared = Math.pow(x4 - x3, 2) + Math.pow(y4 - y3, 2) + Math.pow(z4 - z3, 2);\n  const D_4321 = (x4 - x3) * (x2 - x1) + (y4 - y3) * (y2 - y1) + (z4 - z3) * (z2 - z1);\n  const D_3121 = (x3 - x1) * (x2 - x1) + (y3 - y1) * (y2 - y1) + (z3 - z1) * (z2 - z1);\n  const D_4331 = (x4 - x3) * (x3 - x1) + (y4 - y3) * (y3 - y1) + (z4 - z3) * (z3 - z1);\n  let s = (D_4321 * D_4331 + D_3121 * R_2_squared) / (R_1_squared * R_2_squared + D_4321 * D_4321);\n  let t = (D_4321 * D_3121 + D_4331 * R_1_squared) / (R_1_squared * R_2_squared + D_4321 * D_4321);\n  s = Math.max(Math.min(s, 1), 0);\n  t = Math.max(Math.min(t, 1), 0);\n  const p1 = e1.a.clone().multiplyScalar(1 - s).add(e1.b.clone().multiplyScalar(s));\n  const p2 = e2.a.clone().multiplyScalar(1 - t).add(e2.b.clone().multiplyScalar(t));\n  return p1.clone().add(p2).multiplyScalar(1 / 2);\n}\n\nfunction getCoordinateAxes(box) {\n  const x = new Vector3(1, 0, 0),\n        y = new Vector3(0, 1, 0),\n        z = new Vector3(0, 0, 1);\n  const axes = [x, y, z];\n\n  for (let axis of axes) {\n    axis.applyQuaternion(box.rotation);\n  }\n\n  return axes;\n}\n\nfunction getVertices(box) {\n  const x = box.position.x;\n  const y = box.position.y;\n  const z = box.position.z;\n  const v1 = new Vector3(x - box.width / 2, y - box.length / 2, z - box.height / 2);\n  const v2 = new Vector3(x - box.width / 2, y + box.length / 2, z - box.height / 2);\n  const v3 = new Vector3(x + box.width / 2, y + box.length / 2, z - box.height / 2);\n  const v4 = new Vector3(x + box.width / 2, y - box.length / 2, z - box.height / 2);\n  const v5 = new Vector3(x - box.width / 2, y - box.length / 2, z + box.height / 2);\n  const v6 = new Vector3(x - box.width / 2, y + box.length / 2, z + box.height / 2);\n  const v7 = new Vector3(x + box.width / 2, y + box.length / 2, z + box.height / 2);\n  const v8 = new Vector3(x + box.width / 2, y - box.length / 2, z + box.height / 2);\n  const vertices = [v1, v2, v3, v4, v5, v6, v7, v8]; // rotate vertices\n\n  for (let vertex of vertices) {\n    // convert to body space, apply rotation, convert back to world space\n    vertex.sub(box.position);\n    vertex.applyQuaternion(box.rotation);\n    vertex.add(box.position);\n  }\n\n  return vertices;\n}\n\nfunction getEdges(box) {\n  const x = box.position.x;\n  const y = box.position.y;\n  const z = box.position.z;\n  const v1 = new Vector3(x - box.width / 2, y - box.length / 2, z - box.height / 2);\n  const v2 = new Vector3(x - box.width / 2, y + box.length / 2, z - box.height / 2);\n  const v3 = new Vector3(x + box.width / 2, y + box.length / 2, z - box.height / 2);\n  const v4 = new Vector3(x + box.width / 2, y - box.length / 2, z - box.height / 2);\n  const v5 = new Vector3(x - box.width / 2, y - box.length / 2, z + box.height / 2);\n  const v6 = new Vector3(x - box.width / 2, y + box.length / 2, z + box.height / 2);\n  const v7 = new Vector3(x + box.width / 2, y + box.length / 2, z + box.height / 2);\n  const v8 = new Vector3(x + box.width / 2, y - box.length / 2, z + box.height / 2);\n  const vertices = [v1, v2, v3, v4, v5, v6, v7, v8]; // rotate vertices\n\n  for (let vertex of vertices) {\n    // convert to body space, apply rotation, convert back to world space\n    vertex.sub(box.position);\n    vertex.applyQuaternion(box.rotation);\n    vertex.add(box.position);\n  }\n\n  const edges = [];\n  edges.push({\n    a: v1,\n    b: v2\n  });\n  edges.push({\n    a: v1,\n    b: v4\n  });\n  edges.push({\n    a: v1,\n    b: v5\n  });\n  edges.push({\n    a: v2,\n    b: v3\n  });\n  edges.push({\n    a: v2,\n    b: v6\n  });\n  edges.push({\n    a: v3,\n    b: v4\n  });\n  edges.push({\n    a: v3,\n    b: v7\n  });\n  edges.push({\n    a: v4,\n    b: v8\n  });\n  edges.push({\n    a: v5,\n    b: v6\n  });\n  edges.push({\n    a: v5,\n    b: v8\n  });\n  edges.push({\n    a: v6,\n    b: v7\n  });\n  edges.push({\n    a: v7,\n    b: v8\n  });\n  return edges;\n}\n\nfunction getFacePlanes(box) {\n  const x = box.position.x;\n  const y = box.position.y;\n  const z = box.position.z;\n  const v1 = new Vector3(x - box.width / 2, y - box.length / 2, z - box.height / 2);\n  const v2 = new Vector3(x - box.width / 2, y + box.length / 2, z - box.height / 2);\n  const v3 = new Vector3(x + box.width / 2, y + box.length / 2, z - box.height / 2);\n  const v4 = new Vector3(x + box.width / 2, y - box.length / 2, z - box.height / 2);\n  const v5 = new Vector3(x - box.width / 2, y - box.length / 2, z + box.height / 2);\n  const v6 = new Vector3(x - box.width / 2, y + box.length / 2, z + box.height / 2);\n  const v7 = new Vector3(x + box.width / 2, y + box.length / 2, z + box.height / 2);\n  const v8 = new Vector3(x + box.width / 2, y - box.length / 2, z + box.height / 2);\n  const vertices = [v1, v2, v3, v4, v5, v6, v7, v8]; // rotate vertices\n\n  for (let vertex of vertices) {\n    // convert to body space, apply rotation, convert back to world space\n    vertex.sub(box.position);\n    vertex.applyQuaternion(box.rotation);\n    vertex.add(box.position);\n  }\n\n  const face1 = {\n    normal: v2.clone().sub(v1).cross(v4.clone().sub(v1)).normalize(),\n    point: v1\n  }; // bottom plane\n\n  const face2 = {\n    normal: v8.clone().sub(v5).cross(v6.clone().sub(v5)).normalize(),\n    point: v5\n  }; // top plane\n\n  const face3 = {\n    normal: v5.clone().sub(v1).cross(v2.clone().sub(v1)).normalize(),\n    point: v1\n  }; // left plane\n\n  const face4 = {\n    normal: v3.clone().sub(v4).cross(v8.clone().sub(v4)).normalize(),\n    point: v4\n  }; // top plane\n\n  const face5 = {\n    normal: v4.clone().sub(v1).cross(v5.clone().sub(v1)).normalize(),\n    point: v1\n  }; // front plane\n\n  const face6 = {\n    normal: v2.clone().sub(v3).cross(v7.clone().sub(v3)).normalize(),\n    point: v3\n  }; // back plane\n\n  const facePlanes = [face1, face2, face3, face4, face5, face6];\n  return facePlanes;\n}\n/**\n * for symmetrical objects, valid separating axis iff sum the radii (half_widths) of the projected intervals is less than the distance between the centers\n * @param a \n * @param b \n * @param lineVector a unit vector describing the direction of the line\n * @returns true if the lineVector is a separating axis\n */\n\n/*export function testSeparatingAxis(a: Box, b: Box, lineVector: Vector3): boolean {\n    const x = lineVector.x;\n    const y = lineVector.y;\n    const z = lineVector.z;\n    const projectionMatrix = new Matrix3();\n    projectionMatrix.set(\n        x*x, x*y, x*z,\n        x*y, y*y, y*z,\n        x*z, y*z, z*z\n    );\n\n    const a_center = a.position.clone().applyMatrix3(projectionMatrix);\n    const b_center = b.position.clone().applyMatrix3(projectionMatrix);\n    const d = b_center.clone().sub(a_center).length();\n\n    const a_vertices = getVertices(a);\n    const b_vertices = getVertices(b);\n    \n    let r_a = 0, r_b = 0;\n    for (let a_v of a_vertices) {\n        const a_v_projection = a_v.applyMatrix3(projectionMatrix);\n        const r = a_center.clone().sub(a_v_projection).length()\n        if (r > r_a) {\n            r_a = r;\n        }\n    }\n    for (let b_v of b_vertices) {\n        const b_v_projection = b_v.applyMatrix3(projectionMatrix);\n        const r = b_center.clone().sub(b_v_projection).length()\n        if (r > r_b) {\n            r_b = r;\n        }\n    }\n    if (r_a + r_b < d) {\n        return true;\n    }\n\n    return false;\n}*/\n\n/*\nexport function checkCollisionBoxes(a: Box, b: Box): boolean {\n    // two convex objects don't collide iff there exists a separating plane between them\n\n    // search for separating plane.\n    // either its contain a face of one polyhedra or it contains an edge of one polyhedra and is parallel to the edge of the other polyhedra.\n    \n    const a_facePlanes = getFacePlanes(a);\n    for (let facePlane of a_facePlanes) {\n        if (testSeparatingAxis(a, b, facePlane.normal)) {\n            return false;\n        };\n    }\n    const b_facePlanes = getFacePlanes(b);\n    for (let facePlane of b_facePlanes) {\n        if (testSeparatingAxis(a, b, facePlane.normal)) {\n            return false;\n        }\n    }\n\n    const a_edges = getEdges(a);\n    const b_edges = getEdges(b);\n\n    for (let i = 0; i < a_edges.length; i++) {\n        for (let j = 0; j < b_edges.length; j++) {\n            const edge_i = a_edges[i].b.clone().sub(a_edges[i].a);\n            const edge_j = b_edges[j].b.clone().sub(b_edges[j].a);\n            let m = edge_i.clone().cross(edge_j);\n            if (m.length() !== 0) { // note to self: should use epsilon when checking for zero vector to improve stability\n                if (testSeparatingAxis(a, b, m)) {\n                    return false;\n                }\n            } else {\n                const edge_n = b_edges[j].b.clone().sub(a_edges[i].a);\n                m = edge_i.clone().cross(edge_n);\n                if (m.length() !== 0) {\n                    testSeparatingAxis(a, b, m);\n                } else {\n                    return true; // since edge_i and edge_2 are colinear\n                }\n            }\n        }\n    }\n\n    return true;\n}*/\n\n/*\nfunction getFaces(box: Box) {\n    const x = box.position.x;\n    const y = box.position.y;\n    const z = box.position.z;\n    const v1 = new Vector3(x - box.width/2, y - box.length/2, z - box.height/2);\n    const v2 = new Vector3(x - box.width/2, y + box.length/2, z - box.height/2);\n    const v3 = new Vector3(x + box.width/2, y + box.length/2, z - box.height/2);\n    const v4 = new Vector3(x + box.width/2, y - box.length/2, z - box.height/2);\n    const v5 = new Vector3(x - box.width/2, y - box.length/2, z + box.height/2);\n    const v6 = new Vector3(x - box.width/2, y + box.length/2, z + box.height/2);\n    const v7 = new Vector3(x + box.width/2, y + box.length/2, z + box.height/2);\n    const v8 = new Vector3(x + box.width/2, y - box.length/2, z + box.height/2);\n    const vertices = [v1, v2, v3, v4, v5, v6, v7, v8];\n\n    // rotate vertices\n    for (let vertex of vertices) {\n        // convert to body space, apply rotation, convert back to world space\n        vertex.sub(box.position);\n        vertex.applyQuaternion(box.rotation);\n        vertex.add(box.position);\n    }\n    \n    const f1 = { edges: [{a: v1, b: v2}, {a: v1, b: v4}, {a: v2, b: v3}, {a: v3, b: v4}] }; // bottom\n    const f2 = { edges: [{a: v5, b: v6}, {a: v5, b: v8}, {a: v6, b: v7}, {a: v7, b: v8}] }; // top\n    const f3 = { edges: [{a: v1, b: v2}, {a: v1, b: v5}, {a: v5, b: v6}, {a: v6, b: v2}] }; // left\n    const f4 = { edges: [{a: v4, b: v8}, {a: v4, b: v3}, {a: v8, b: v7}, {a: v7, b: v3}] }; // right\n    const f5 = { edges: [{a: v1, b: v4}, {a: v1, b: v5}, {a: v5, b: v8}, {a: v8, b: v4}] }; // front\n    const f6 = { edges: [{a: v2, b: v3}, {a: v2, b: v6}, {a: v6, b: v7}, {a: v7, b: v3}] }; // back\n    const faces = [f1, f2, f3, f4, f5, f6];\n    return faces;\n}*/\n\n/*\nexport function getAllBoundingBoxIntersections(boxes: Box[]) {\n    // create and sort intervals along x, y, and z\n    const x_intervals = [];\n    const y_intervals = [];\n    const z_intervals = [];\n    for(let box of boxes) {\n        const x_min = box.position.x - box.boundingBox.x/2;\n        const x_max = box.position.x + box.boundingBox.x/2;\n        x_intervals.push({ type: \"min\", value: x_min, object: box});\n        x_intervals.push({ type: \"max\", value: x_max, object: box});\n\n        \n        const y_min = box.position.y - box.boundingBox.y/2;\n        const y_max = box.position.y + box.boundingBox.y/2;\n        y_intervals.push({ type: \"min\", value: y_min, object: box});\n        y_intervals.push({ type: \"max\", value: y_max, object: box});\n\n        const z_min = box.position.z - box.boundingBox.z/2;\n        const z_max = box.position.z + box.boundingBox.z/2;\n        z_intervals.push({ type: \"min\", value: z_min, object: box});\n        z_intervals.push({ type: \"max\", value: z_max, object: box});\n    }\n    // note to self: switch to insertion sort and use normal merge sort only during the initialization frame\n    x_intervals.sort((a, b) => a.value - b.value);\n    //y_intervals.sort((a, b) => a.value - b.value);\n    //z_intervals.sort((a, b) => a.value - b.value);\n\n    // create a list of active intervals\n    const activeIntervals = [];\n}*/\n\n/*\nexport class World2 {\n    private objects: any[] = [];\n    private currentLoopInterval: any = null;\n\n    private characterForce: Vector3;\n\n    constructor() {\n        this.objects = [];\n\n        this.characterForce = new Vector3(0, 0, 0);\n    }\n\n    startLoop(): void {\n        const currentInstance = this;\n\n        // stop current loop if it exits\n        this.stopCurrentLoop();\n\n        let lastTimeCalled = performance.now();\n        let fps = 0;\n        let times: any[] = [];\n\n        function step() {\n            // calculate fps\n            const now = performance.now();\n            while (times.length > 0 && times[0] <= now - 1000) {\n                times.shift();\n            }\n            times.push(now);\n            fps = times.length;\n            // console.log(\"fps: \", fps);\n\n            for (let i = 0; i < currentInstance.objects.length; i++) {\n                currentInstance.objects[i].integrate(dt);\n            }\n        }\n\n        this.currentLoopInterval = setInterval(step, dt * 1000);\n    }\n\n    // Stops current loop if it exists.\n    stopCurrentLoop(): void {\n        if (this.currentLoopInterval) {\n            clearInterval(this.currentLoopInterval);\n        }\n    }\n\n    addObject(obj: any): void {\n        this.objects.push(obj);\n    }\n\n    getObjects(): any[] {\n        return this.objects;\n    }\n\n    updateCharacterForce(f: Vector3) {\n        this.characterForce = f;\n    }\n\n    detectCollisions(): void {\n\n    }\n\n    checkCollisionSpheres(s1: Sphere, s2: Sphere) {\n        const d = (s1.position.clone().sub(s2.position)).length(); // distance between centers\n\n        // collision if distance between spheres is smaller than sub of radiuses\n        if (d < (s1.radius + s2.radius)) {\n            return true;\n        }\n        return false;\n    }\n\n    resolveCollisionSpheres(s1: Sphere, s2: Sphere) {\n        // find unit vectors from s1 to s2 and s2 to s1\n        const u12 = (s2.position.clone().sub(s1.position)).normalize();\n        const u21 = u12.clone().multiplyScalar(-1);\n\n        // find components of v1 and v2 along and perpendicular to u\n        const v1_along_u12 = u12.clone().multiplyScalar(u12.dot(s1.velocity));\n        const v2_along_u21 = u21.clone().multiplyScalar(u21.dot(s2.velocity));\n\n        const v1_perp_u12 = s1.velocity.clone().sub(v1_along_u12);\n        const v2_perp_u21 = s2.velocity.clone().sub(v2_along_u21);\n\n        // calculate new velocities along u, assuming elastic collision\n        const m1 = 1/s1.inverseMass;\n        const m2 = 1/s2.inverseMass;\n        const v1_along_u_new = (v1_along_u12.clone().multiplyScalar((m1-m2)/(m1+m2))).addScaledVector(v2_along_u21, (2*m2)/(m1+m2));\n        const v2_along_u_new = (v1_along_u12.clone().multiplyScalar((2*m1)/(m1+m2))).addScaledVector(v2_along_u21, -(m1-m2)/(m1+m2));\n\n        // calculate and set new velocities\n        const v1_new = v1_along_u_new.clone().add(v1_perp_u12);\n        const v2_new = v2_along_u_new.clone().add(v2_perp_u21);\n\n        console.log(\"u: \", u12);\n        console.log(\"v1_new: \", v1_new);\n        console.log(\"v2_new\", v2_new);\n    }\n\n    clearCurrentLoop(): void {\n        clearInterval(this.currentLoopInterval);\n    }\n}*/","map":{"version":3,"names":["Matrix3","Vector3","Box","Plane","World","constructor","objects","coefficient_of_restitution","dt","addObject","obj","push","detectAndResolveCollisions","boundingBoxIntersections","getAllBoundingBoxIntersections","integrateObjects","duration","object","integrate","updateMeshes","updateMesh","updateBoundingBoxMesh","checkBoundingBoxIntersection","a","b","a_x_min","position","x","boundingBox","a_x_max","a_y_min","y","a_y_max","a_z_min","z","a_z_max","b_x_min","b_x_max","b_y_min","b_y_max","b_z_min","b_z_max","compareBoundingBoxes","a_min","b_min","objectsCopy","sort","intersections","i","length","j","i_max","j_min","checkCollision","checkCollisionBoxes","console","error","a_coordinateAxes","getCoordinateAxes","b_coordinateAxes","faceAxis","separatingAxisPenetration","a_axis","b_axis","m","clone","cross","checkCollisionSphereAndPlane","sphere","plane","relativePosition","sub","point","d","dot","normal","radius","checkCollisionBoxAndSphere","box","coordinateAxes","inverseRotation","rotation","invert","sphereCenter","applyQuaternion","closestPoint","Math","min","max","width","height","distance","getContacts","contacts","contact","getContactData","getContactDataBoxes","vector_ab","smallestOverlap","Infinity","overlap","axis","multiplyScalar","vertex","getClosestVertex","type","contactNormal","penetration","contactPoint","edge_a","getClosestEdge","edge_b","resolveCollision","contactData","r_a","r_b","vertexVelocity_a","velocity","add","getAngularVelocity","vertexVelocity_b","relativeVelocity","log","I_inverse_a","getInertia","I_inverse_b","term1","applyMatrix3","term2","inverseMass","impulse","impulse2","applyImpulse","getClosestPointBetweenTwoEdges","edgeVector","separatingAxis","projectionMatrix","set","a_center","b_edges","getEdges","parallel_b_edges","b_edge","b_edgeVector","closestEdge","closestDistance","lineVector","b_vertices","getVertices","b_center","smallestDistanceToA","b_v","b_v_projection","a_vertices","a_v","a_v_projection","r","e1","e2","x1","x2","x3","x4","y1","y2","y3","y4","z1","z2","z3","z4","R_1_squared","pow","R_2_squared","D_4321","D_3121","D_4331","s","t","p1","p2","axes","v1","v2","v3","v4","v5","v6","v7","v8","vertices","edges","getFacePlanes","face1","normalize","face2","face3","face4","face5","face6","facePlanes"],"sources":["/Users/danny/Github/physics_engine_for_the_web/frontend/src/physics_engine/physics_engine.ts"],"sourcesContent":["import { Matrix3, Vector3 } from \"three\";\nimport * as THREE from \"three\";\nimport { Sphere } from \"./Sphere\";\nimport { Box } from \"./Box\";\nimport { Plane } from \"./Plane\";\n\nexport class World {\n    public objects: any[];\n    public coefficient_of_restitution: number = 1; // 0 is fully inelastic, 1 is fully elastic\n    public dt: number = 1/60; // time step in seconds\n\n    constructor() {\n        this.objects = [];\n    }\n\n    addObject(obj: any): void {\n        this.objects.push(obj);\n    }\n\n    detectAndResolveCollisions(): void {\n        const boundingBoxIntersections = getAllBoundingBoxIntersections(this.objects);\n    }\n\n    integrateObjects(duration: number): void {\n        for (let object of this.objects) {\n            if (object instanceof Plane) {\n                continue;\n            }\n\n            object.integrate(duration);\n        }\n    }\n\n    updateMeshes(): void {\n        for (let object of this.objects) {\n            if (object instanceof Plane) {\n                continue;\n            }\n\n            object.updateMesh();\n            object.updateBoundingBoxMesh();\n        }\n    }\n}\n\n/**\n * checks if the bounding box of two objects intersect\n * @param a the first object\n * @param b the other object\n */\nexport function checkBoundingBoxIntersection(a: any, b: any): boolean {\n    // create intervals\n    const a_x_min = a.position.x - a.boundingBox.x/2;\n    const a_x_max = a.position.x + a.boundingBox.x/2;\n    const a_y_min = a.position.y - a.boundingBox.y/2;\n    const a_y_max = a.position.y + a.boundingBox.y/2;\n    const a_z_min = a.position.z - a.boundingBox.z/2;\n    const a_z_max = a.position.z + a.boundingBox.z/2;\n    const b_x_min = b.position.x - b.boundingBox.x/2;\n    const b_x_max = b.position.x + b.boundingBox.x/2;\n    const b_y_min = b.position.y - b.boundingBox.y/2;\n    const b_y_max = b.position.y + b.boundingBox.y/2;\n    const b_z_min = b.position.z - b.boundingBox.z/2;\n    const b_z_max = b.position.z + b.boundingBox.z/2;\n\n    // intersecting if all intervals are intersecting\n    if ((a_x_min < b_x_max && b_x_min < a_x_max) &&\n        (a_y_min < b_y_max && b_y_min < a_y_max) &&\n        (a_z_min < b_z_max && b_z_min < a_z_max)) {\n        return true\n    }\n    return false;\n}\n\nexport function getAllBoundingBoxIntersections(objects: any[]) {\n    // for now just sort against x-axis. Slightly better is to update axis based on one with highest variance\n    // worst case is still O(n^2)\n\n    function compareBoundingBoxes(a: any, b: any) {\n        const a_min = a.position.x - a.boundingBox.x/2;\n        const b_min = b.position.x - b.boundingBox.x/2;\n        return a_min - b_min;\n    }\n\n    // sort objects along x-axis\n    const objectsCopy = [...objects];\n    objectsCopy.sort(compareBoundingBoxes);\n\n    // sweep the array for collisions\n    const intersections = [];\n    for(let i = 0; i < objectsCopy.length - 1; i++) {\n        // test against all possible overlapping boxes following the current one.\n        for(let j = i + 1; j < objectsCopy.length; j++) {\n            // stop testing when AABBs are beyond the current AABB\n            const i_max = objectsCopy[i].position.x + objectsCopy[i].boundingBox.x/2;\n            const j_min = objectsCopy[j].position.x - objectsCopy[j].boundingBox.x/2;\n            if (j_min > i_max) {\n                break;\n            }\n\n            if (checkBoundingBoxIntersection(objectsCopy[i], objectsCopy[j])) {\n                intersections.push({\n                    a: objectsCopy[i],\n                    b: objectsCopy[j]\n                });\n            }\n        }\n    }\n    return intersections;\n}\n\nexport function checkCollision(a: any, b: any): boolean {\n    if (a instanceof Box && b instanceof Box) {\n        return checkCollisionBoxes(a, b);\n    } else {\n        console.error(\"checking collision between these types not implemented.\");\n    }\n}\n\nexport function checkCollisionBoxes(a: Box, b: Box): boolean {\n    // two convex objects don't collide iff there exists a separating plane between them\n\n    // search for separating plane.\n    // either its contain a face of one polyhedra or it contains an edge of one polyhedra and is parallel to the edge of the other polyhedra.\n\n    const a_coordinateAxes = getCoordinateAxes(a);\n    const b_coordinateAxes = getCoordinateAxes(b);\n\n    // check the 6 face axes\n    for (let faceAxis of a_coordinateAxes) {\n        if (separatingAxisPenetration(a, b, faceAxis) < 0) {\n            return false;\n        }\n    }\n    for (let faceAxis of b_coordinateAxes) {\n        if (separatingAxisPenetration(a, b, faceAxis) < 0) {\n            return false;\n        }\n    }\n\n    // check the 9 edge-edge axes\n    for (let a_axis of a_coordinateAxes) {\n        for (let b_axis of b_coordinateAxes) {\n            let m = a_axis.clone().cross(b_axis);\n            if (m.length() > 0) { // note to self: should use epsilon when checking for zero vector to  improve stability\n                if (separatingAxisPenetration(a, b, m) < 0) {\n                    return false;\n                }\n            } else {\n                // for now, ignore case where the corresponding edges are parallel.\n                continue;\n            }\n        }\n    }\n\n    return true;\n}\n\nexport function checkCollisionSphereAndPlane(sphere: Sphere, plane: Plane) {\n    const relativePosition = sphere.position.clone().sub(plane.point);\n    const d = relativePosition.dot(plane.normal); // distance to center of sphere, negative if center is below plane.\n    return d <= sphere.radius;\n}\n\nexport function checkCollisionBoxAndSphere(box: Box, sphere: Sphere): boolean {\n    // convert sphere center to box coordinate space\n    const coordinateAxes = getCoordinateAxes(box);\n    const inverseRotation = box.rotation.clone().invert();\n    let sphereCenter = sphere.position.clone().sub(box.position).applyQuaternion(inverseRotation);\n\n    // Clamp each coordinate to the box.\n    const closestPoint = sphereCenter.clone();\n    closestPoint.x = Math.min(Math.max(closestPoint.x, box.width/2), -box.width/2);\n    closestPoint.y = Math.min(Math.max(closestPoint.y, box.length/2), -box.length/2);\n    closestPoint.z = Math.min(Math.max(closestPoint.z, box.height/2), -box.height/2);\n\n    // check if they're in contact\n    const distance = sphereCenter.clone().sub(closestPoint).length();\n    return distance < sphere.radius;\n}\n\n// todo: refactor functions below\n\nexport function getContacts(boundingBoxIntersections: any[]) {\n    const contacts = [];\n    for(let i = 0; i < boundingBoxIntersections.length; i++) {\n        const a = boundingBoxIntersections[i].a;\n        const b = boundingBoxIntersections[i].b;\n\n        // check for collisions and color them\n        if (checkCollision(a, b)) {\n            const contact = getContactData(a, b);\n            contacts.push(contact);\n        }\n    }\n\n    return contacts;\n}\n\nexport function getContactData(a: any, b: any) {\n    if (a instanceof Box || b instanceof Box) {\n        return getContactDataBoxes(a, b);\n    } else {\n        console.error(\"getting contact data between these types not implemented.\");\n    }\n}\n\n// convention: contact data is of format {a, b, type, contactNormal, penetration, contactPoint, ...} where contactNormal points from b to a\n// get contact data for two colliding boxes, assuming collision\nexport function getContactDataBoxes(a: Box, b: Box) {\n    const vector_ab = a.position.clone().sub(b.position);\n    const a_coordinateAxes = getCoordinateAxes(a);\n    const b_coordinateAxes = getCoordinateAxes(b);\n    let smallestOverlap = Infinity;\n    let contact;\n\n    for (let a_axis of a_coordinateAxes) {\n        const overlap = separatingAxisPenetration(a, b, a_axis);\n        if (overlap < smallestOverlap) {\n            smallestOverlap = overlap;\n\n            // set contact\n            const axis = a_axis.clone();\n            if (vector_ab.clone().dot(axis) > 0) { // orient axis to normal of the correct face.\n                axis.multiplyScalar(-1);\n            }\n            const vertex = getClosestVertex(a, b, axis);\n            contact = {\n                a: b,\n                b: a,\n                type: \"vertex-face\",\n                contactNormal: axis,\n                penetration: smallestOverlap,\n                contactPoint: vertex\n            };\n        }\n    }\n    for (let b_axis of b_coordinateAxes) {\n        const overlap = separatingAxisPenetration(a, b, b_axis);\n        if (overlap < smallestOverlap) {\n            smallestOverlap = overlap;\n\n            // set contact\n            const axis = b_axis.clone();\n            if (vector_ab.clone().dot(axis) > 0) { // orient axis to normal of the correct face.\n                axis.multiplyScalar(-1);\n            }\n            const vertex = getClosestVertex(b, a, axis);\n            contact = {\n                a: a,\n                b: b, \n                type: \"vertex-face\",\n                contactNormal: axis,\n                penetration: smallestOverlap,\n                contactPoint: vertex\n            };\n        }\n    }\n\n    for (let a_axis of a_coordinateAxes) {\n        for (let b_axis of b_coordinateAxes) {\n            let m = a_axis.clone().cross(b_axis);\n            if (m.length() > 0) { // note to self: should use epsilon when checking for zero vector to  improve stability\n                const overlap = separatingAxisPenetration(a, b, m);\n\n                if (overlap < smallestOverlap) {\n                    smallestOverlap = overlap;\n\n                    // set contact\n                    const axis = m.clone();\n                    if (vector_ab.clone().dot(axis) > 0) {\n                        axis.multiplyScalar(-1);\n                    }\n                    const edge_a = getClosestEdge(b, a, a_axis, m);\n                    const edge_b = getClosestEdge(a, b, b_axis, m);\n                    contact = {\n                        a: a,\n                        b: b,\n                        type: \"edge-edge\",\n                        contactNormal: axis,\n                        penetration: smallestOverlap,\n                        edge_a: edge_a,\n                        edge_b: edge_b\n                    };\n                }\n            } else {\n                // for now, ignore case where the corresponding edges are parallel.\n                continue;\n            }\n        }\n    }\n    \n    return contact;\n}\n\nconst coefficient_of_restitution = 1;\nexport function resolveCollision(contactData: any) {\n    const a = contactData.a;\n    const b = contactData.b;\n    const normal = contactData.contactNormal;\n    if (contactData.type === \"vertex-face\") {\n        const vertex = contactData.contactPoint;\n        const r_a = vertex.clone().sub(a.position);\n        const r_b = vertex.clone().sub(b.position);\n        const vertexVelocity_a = a.velocity.clone().add(a.getAngularVelocity().cross(r_a));\n        const vertexVelocity_b = b.velocity.clone().add(b.getAngularVelocity().cross(r_b));\n        const relativeVelocity = normal.dot(vertexVelocity_a.clone().sub(vertexVelocity_b));\n        if (relativeVelocity < 0) {\n            console.log(\"colliding contact\");\n            \n            const I_inverse_a = a.getInertia().invert();\n            const I_inverse_b = b.getInertia().invert();\n\n            const term1 = normal.dot(r_a.clone().cross(normal).applyMatrix3(I_inverse_a).cross(r_a));\n            const term2 = normal.dot(r_b.clone().cross(normal).applyMatrix3(I_inverse_b).cross(r_b));\n\n            const j = -(1 + coefficient_of_restitution) * relativeVelocity / (a.inverseMass + b.inverseMass + term1 + term2);\n\n            const impulse = normal.clone().multiplyScalar(j);\n            const impulse2 = normal.clone().multiplyScalar(-j);\n            a.applyImpulse(vertex, impulse);\n            b.applyImpulse(vertex, impulse2);\n        } else if (relativeVelocity === 0) {\n            console.log(\"resting contact\");\n        } else {\n            // ignore\n            console.log(\"leaving\");\n        }\n    } else if (contactData.type === \"edge-edge\") {\n        console.log(\"resolving edge-edge contact\");\n        const vertex = getClosestPointBetweenTwoEdges(contactData.edge_a, contactData.edge_b);\n        const r_a = vertex.clone().sub(a.position);\n        const r_b = vertex.clone().sub(b.position);\n        const vertexVelocity_a = a.velocity.clone().add(a.getAngularVelocity().cross(r_a));\n        const vertexVelocity_b = b.velocity.clone().add(b.getAngularVelocity().cross(r_b));\n        const relativeVelocity = normal.dot(vertexVelocity_a.clone().sub(vertexVelocity_b));\n        if (relativeVelocity < 0) {\n            console.log(\"colliding contact\");\n            \n            const I_inverse_a = a.getInertia().invert();\n            const I_inverse_b = b.getInertia().invert();\n\n            const term1 = normal.dot(r_a.clone().cross(normal).applyMatrix3(I_inverse_a).cross(r_a));\n            const term2 = normal.dot(r_b.clone().cross(normal).applyMatrix3(I_inverse_b).cross(r_b));\n\n            const j = -(1 + coefficient_of_restitution) * relativeVelocity / (a.inverseMass + b.inverseMass + term1 + term2);\n\n            const impulse = normal.clone().multiplyScalar(j);\n            const impulse2 = normal.clone().multiplyScalar(-j);\n            a.applyImpulse(vertex, impulse);\n            b.applyImpulse(vertex, impulse2);\n        } else if (relativeVelocity === 0) {\n            console.log(\"resting contact\");\n        } else {\n            // ignore\n            console.log(\"leaving\");\n        }\n    } else {\n        console.error(\"contactData type not recognized.\");\n    }\n}\n\n// returns closest edge of box b\n// edge should be parallel to input edgeVector\nfunction getClosestEdge(a: Box, b: Box, edgeVector: Vector3, separatingAxis: Vector3) {\n    const x = separatingAxis.x;\n    const y = separatingAxis.y;\n    const z = separatingAxis.z;\n    const projectionMatrix = new Matrix3();\n    projectionMatrix.set(\n        x*x, x*y, x*z,\n        x*y, y*y, y*z,\n        x*z, y*z, z*z\n    );\n\n    const a_center = a.position.clone().applyMatrix3(projectionMatrix);\n\n    const b_edges = getEdges(b);\n    const parallel_b_edges = [];\n    for (let b_edge of b_edges) {\n        const b_edgeVector = b_edge.b.clone().sub(b_edge.a);\n        if (b_edgeVector.clone().cross(edgeVector).length() === 0) {\n            parallel_b_edges.push(b_edge);\n        }\n    }\n\n    let closestEdge = parallel_b_edges[0];\n    let closestDistance = closestEdge.a.clone().sub(a_center).length();\n    for (let b_edge of parallel_b_edges) {\n        const d = b_edge.a.clone().sub(a_center).length();\n        if (d < closestDistance) {\n            closestDistance = d;\n            closestEdge = b_edge;\n        }\n    }\n\n    return closestEdge;\n}\n\n// returns closest vertex of box b to face of box a\nfunction getClosestVertex(a: Box, b: Box, lineVector: Vector3): Vector3 {\n    const b_vertices = getVertices(b);\n    let vertex = b_vertices[0];\n\n    const x = lineVector.x;\n    const y = lineVector.y;\n    const z = lineVector.z;\n    const projectionMatrix = new Matrix3();\n    projectionMatrix.set(\n        x*x, x*y, x*z,\n        x*y, y*y, y*z,\n        x*z, y*z, z*z\n    );\n\n    const a_center = a.position.clone().applyMatrix3(projectionMatrix);\n    const b_center = b.position.clone().applyMatrix3(projectionMatrix);\n    let smallestDistanceToA = b_center.clone().sub(a_center).length();\n\n    for (let b_v of b_vertices) {\n        const b_v_projection = b_v.applyMatrix3(projectionMatrix);\n        const d = b_v_projection.clone().sub(a_center).length()\n        if (d < smallestDistanceToA) {\n            smallestDistanceToA = d;\n            vertex = b_v;\n        }\n    }\n\n    return vertex;\n}\n\nfunction separatingAxisPenetration(a: Box, b: Box, lineVector: Vector3): number {\n    const x = lineVector.x;\n    const y = lineVector.y;\n    const z = lineVector.z;\n    const projectionMatrix = new Matrix3();\n    projectionMatrix.set(\n        x*x, x*y, x*z,\n        x*y, y*y, y*z,\n        x*z, y*z, z*z\n    );\n\n    const a_center = a.position.clone().applyMatrix3(projectionMatrix);\n    const b_center = b.position.clone().applyMatrix3(projectionMatrix);\n    const d = b_center.clone().sub(a_center).length();\n\n    const a_vertices = getVertices(a);\n    const b_vertices = getVertices(b);\n\n    let r_a = 0, r_b = 0;\n    for (let a_v of a_vertices) {\n        const a_v_projection = a_v.applyMatrix3(projectionMatrix);\n        const r = a_center.clone().sub(a_v_projection).length()\n        if (r > r_a) {\n            r_a = r;\n        }\n    }\n    for (let b_v of b_vertices) {\n        const b_v_projection = b_v.applyMatrix3(projectionMatrix);\n        const r = b_center.clone().sub(b_v_projection).length()\n        if (r > r_b) {\n            r_b = r;\n        }\n    }\n\n    // returns the overlap. positive indicates overlap, negative indicates separation.\n    return r_a + r_b - d;\n}\n\nfunction getClosestPointBetweenTwoEdges(e1: any, e2: any) {\n    const x1 = e1.a.x;\n    const x2 = e1.b.x;\n    const x3 = e2.a.x;\n    const x4 = e2.b.x;\n    const y1 = e1.a.y;\n    const y2 = e1.b.y;\n    const y3 = e2.a.y;\n    const y4 = e2.b.y;\n    const z1 = e1.a.z;\n    const z2 = e1.b.z;\n    const z3 = e2.a.z;\n    const z4 = e2.b.z;\n\n    // temporary variables\n    const R_1_squared = Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2) + Math.pow(z2 - z1, 2);\n    const R_2_squared = Math.pow(x4 - x3, 2) + Math.pow(y4 - y3, 2) + Math.pow(z4 - z3, 2);\n    const D_4321 = (x4 - x3)*(x2 - x1) + (y4 - y3)*(y2 - y1) + (z4 - z3)*(z2 - z1);\n    const D_3121 = (x3 - x1)*(x2 - x1) + (y3 - y1)*(y2 - y1) + (z3 - z1)*(z2 - z1);\n    const D_4331 = (x4 - x3)*(x3 - x1) + (y4 - y3)*(y3 - y1) + (z4 - z3)*(z3 - z1);\n\n    let s = (D_4321*D_4331 + D_3121*R_2_squared) / (R_1_squared*R_2_squared + D_4321*D_4321);\n    let t = (D_4321*D_3121 + D_4331*R_1_squared) / (R_1_squared*R_2_squared + D_4321*D_4321);\n\n    s = Math.max(Math.min(s, 1), 0);\n    t = Math.max(Math.min(t, 1), 0);\n\n    const p1 = e1.a.clone().multiplyScalar(1 - s).add(e1.b.clone().multiplyScalar(s));\n    const p2 = e2.a.clone().multiplyScalar(1 - t).add(e2.b.clone().multiplyScalar(t));\n\n    return p1.clone().add(p2).multiplyScalar(1/2);\n}\n\n\nfunction getCoordinateAxes(box: Box) {\n    const x = new Vector3(1, 0, 0), y = new Vector3(0, 1, 0), z = new Vector3(0, 0, 1);\n\n    const axes = [x, y, z];\n\n    for (let axis of axes) {\n        axis.applyQuaternion(box.rotation);\n    }\n    return axes;\n}\n\nfunction getVertices(box: Box) {\n    const x = box.position.x;\n    const y = box.position.y;\n    const z = box.position.z;\n    const v1 = new Vector3(x - box.width/2, y - box.length/2, z - box.height/2);\n    const v2 = new Vector3(x - box.width/2, y + box.length/2, z - box.height/2);\n    const v3 = new Vector3(x + box.width/2, y + box.length/2, z - box.height/2);\n    const v4 = new Vector3(x + box.width/2, y - box.length/2, z - box.height/2);\n    const v5 = new Vector3(x - box.width/2, y - box.length/2, z + box.height/2);\n    const v6 = new Vector3(x - box.width/2, y + box.length/2, z + box.height/2);\n    const v7 = new Vector3(x + box.width/2, y + box.length/2, z + box.height/2);\n    const v8 = new Vector3(x + box.width/2, y - box.length/2, z + box.height/2);\n    const vertices = [v1, v2, v3, v4, v5, v6, v7, v8];\n\n    // rotate vertices\n    for (let vertex of vertices) {\n        // convert to body space, apply rotation, convert back to world space\n        vertex.sub(box.position);\n        vertex.applyQuaternion(box.rotation);\n        vertex.add(box.position);\n    }\n\n    return vertices;\n}\n\nfunction getEdges(box: Box) {\n    const x = box.position.x;\n    const y = box.position.y;\n    const z = box.position.z;\n    const v1 = new Vector3(x - box.width/2, y - box.length/2, z - box.height/2);\n    const v2 = new Vector3(x - box.width/2, y + box.length/2, z - box.height/2);\n    const v3 = new Vector3(x + box.width/2, y + box.length/2, z - box.height/2);\n    const v4 = new Vector3(x + box.width/2, y - box.length/2, z - box.height/2);\n    const v5 = new Vector3(x - box.width/2, y - box.length/2, z + box.height/2);\n    const v6 = new Vector3(x - box.width/2, y + box.length/2, z + box.height/2);\n    const v7 = new Vector3(x + box.width/2, y + box.length/2, z + box.height/2);\n    const v8 = new Vector3(x + box.width/2, y - box.length/2, z + box.height/2);\n    const vertices = [v1, v2, v3, v4, v5, v6, v7, v8];\n\n    // rotate vertices\n    for (let vertex of vertices) {\n        // convert to body space, apply rotation, convert back to world space\n        vertex.sub(box.position);\n        vertex.applyQuaternion(box.rotation);\n        vertex.add(box.position);\n    }\n\n    const edges = [];\n    edges.push({a: v1, b: v2});\n    edges.push({a: v1, b: v4});\n    edges.push({a: v1, b: v5});\n    edges.push({a: v2, b: v3});\n    edges.push({a: v2, b: v6});\n    edges.push({a: v3, b: v4});\n    edges.push({a: v3, b: v7});\n    edges.push({a: v4, b: v8});\n    edges.push({a: v5, b: v6});\n    edges.push({a: v5, b: v8});\n    edges.push({a: v6, b: v7});\n    edges.push({a: v7, b: v8});\n\n    return edges;\n}\n\nfunction getFacePlanes(box: Box) {\n    const x = box.position.x;\n    const y = box.position.y;\n    const z = box.position.z;\n    const v1 = new Vector3(x - box.width/2, y - box.length/2, z - box.height/2);\n    const v2 = new Vector3(x - box.width/2, y + box.length/2, z - box.height/2);\n    const v3 = new Vector3(x + box.width/2, y + box.length/2, z - box.height/2);\n    const v4 = new Vector3(x + box.width/2, y - box.length/2, z - box.height/2);\n    const v5 = new Vector3(x - box.width/2, y - box.length/2, z + box.height/2);\n    const v6 = new Vector3(x - box.width/2, y + box.length/2, z + box.height/2);\n    const v7 = new Vector3(x + box.width/2, y + box.length/2, z + box.height/2);\n    const v8 = new Vector3(x + box.width/2, y - box.length/2, z + box.height/2);\n    const vertices = [v1, v2, v3, v4, v5, v6, v7, v8];\n\n    // rotate vertices\n    for (let vertex of vertices) {\n        // convert to body space, apply rotation, convert back to world space\n        vertex.sub(box.position);\n        vertex.applyQuaternion(box.rotation);\n        vertex.add(box.position);\n    }\n    const face1 = { normal: ((v2.clone().sub(v1)).cross(v4.clone().sub(v1))).normalize(), point: v1 } // bottom plane\n    const face2 = { normal: ((v8.clone().sub(v5)).cross(v6.clone().sub(v5))).normalize(), point: v5 } // top plane\n    const face3 = { normal: ((v5.clone().sub(v1)).cross(v2.clone().sub(v1))).normalize(), point: v1 } // left plane\n    const face4 = { normal: ((v3.clone().sub(v4)).cross(v8.clone().sub(v4))).normalize(), point: v4 } // top plane\n    const face5 = { normal: ((v4.clone().sub(v1)).cross(v5.clone().sub(v1))).normalize(), point: v1 } // front plane\n    const face6 = { normal: ((v2.clone().sub(v3)).cross(v7.clone().sub(v3))).normalize(), point: v3 } // back plane\n    const facePlanes = [face1, face2, face3, face4, face5, face6];\n    return facePlanes;\n}\n\n/**\n * for symmetrical objects, valid separating axis iff sum the radii (half_widths) of the projected intervals is less than the distance between the centers\n * @param a \n * @param b \n * @param lineVector a unit vector describing the direction of the line\n * @returns true if the lineVector is a separating axis\n */\n/*export function testSeparatingAxis(a: Box, b: Box, lineVector: Vector3): boolean {\n    const x = lineVector.x;\n    const y = lineVector.y;\n    const z = lineVector.z;\n    const projectionMatrix = new Matrix3();\n    projectionMatrix.set(\n        x*x, x*y, x*z,\n        x*y, y*y, y*z,\n        x*z, y*z, z*z\n    );\n\n    const a_center = a.position.clone().applyMatrix3(projectionMatrix);\n    const b_center = b.position.clone().applyMatrix3(projectionMatrix);\n    const d = b_center.clone().sub(a_center).length();\n\n    const a_vertices = getVertices(a);\n    const b_vertices = getVertices(b);\n    \n    let r_a = 0, r_b = 0;\n    for (let a_v of a_vertices) {\n        const a_v_projection = a_v.applyMatrix3(projectionMatrix);\n        const r = a_center.clone().sub(a_v_projection).length()\n        if (r > r_a) {\n            r_a = r;\n        }\n    }\n    for (let b_v of b_vertices) {\n        const b_v_projection = b_v.applyMatrix3(projectionMatrix);\n        const r = b_center.clone().sub(b_v_projection).length()\n        if (r > r_b) {\n            r_b = r;\n        }\n    }\n    if (r_a + r_b < d) {\n        return true;\n    }\n\n    return false;\n}*/\n\n/*\nexport function checkCollisionBoxes(a: Box, b: Box): boolean {\n    // two convex objects don't collide iff there exists a separating plane between them\n\n    // search for separating plane.\n    // either its contain a face of one polyhedra or it contains an edge of one polyhedra and is parallel to the edge of the other polyhedra.\n    \n    const a_facePlanes = getFacePlanes(a);\n    for (let facePlane of a_facePlanes) {\n        if (testSeparatingAxis(a, b, facePlane.normal)) {\n            return false;\n        };\n    }\n    const b_facePlanes = getFacePlanes(b);\n    for (let facePlane of b_facePlanes) {\n        if (testSeparatingAxis(a, b, facePlane.normal)) {\n            return false;\n        }\n    }\n\n    const a_edges = getEdges(a);\n    const b_edges = getEdges(b);\n\n    for (let i = 0; i < a_edges.length; i++) {\n        for (let j = 0; j < b_edges.length; j++) {\n            const edge_i = a_edges[i].b.clone().sub(a_edges[i].a);\n            const edge_j = b_edges[j].b.clone().sub(b_edges[j].a);\n            let m = edge_i.clone().cross(edge_j);\n            if (m.length() !== 0) { // note to self: should use epsilon when checking for zero vector to improve stability\n                if (testSeparatingAxis(a, b, m)) {\n                    return false;\n                }\n            } else {\n                const edge_n = b_edges[j].b.clone().sub(a_edges[i].a);\n                m = edge_i.clone().cross(edge_n);\n                if (m.length() !== 0) {\n                    testSeparatingAxis(a, b, m);\n                } else {\n                    return true; // since edge_i and edge_2 are colinear\n                }\n            }\n        }\n    }\n\n    return true;\n}*/\n\n/*\nfunction getFaces(box: Box) {\n    const x = box.position.x;\n    const y = box.position.y;\n    const z = box.position.z;\n    const v1 = new Vector3(x - box.width/2, y - box.length/2, z - box.height/2);\n    const v2 = new Vector3(x - box.width/2, y + box.length/2, z - box.height/2);\n    const v3 = new Vector3(x + box.width/2, y + box.length/2, z - box.height/2);\n    const v4 = new Vector3(x + box.width/2, y - box.length/2, z - box.height/2);\n    const v5 = new Vector3(x - box.width/2, y - box.length/2, z + box.height/2);\n    const v6 = new Vector3(x - box.width/2, y + box.length/2, z + box.height/2);\n    const v7 = new Vector3(x + box.width/2, y + box.length/2, z + box.height/2);\n    const v8 = new Vector3(x + box.width/2, y - box.length/2, z + box.height/2);\n    const vertices = [v1, v2, v3, v4, v5, v6, v7, v8];\n\n    // rotate vertices\n    for (let vertex of vertices) {\n        // convert to body space, apply rotation, convert back to world space\n        vertex.sub(box.position);\n        vertex.applyQuaternion(box.rotation);\n        vertex.add(box.position);\n    }\n    \n    const f1 = { edges: [{a: v1, b: v2}, {a: v1, b: v4}, {a: v2, b: v3}, {a: v3, b: v4}] }; // bottom\n    const f2 = { edges: [{a: v5, b: v6}, {a: v5, b: v8}, {a: v6, b: v7}, {a: v7, b: v8}] }; // top\n    const f3 = { edges: [{a: v1, b: v2}, {a: v1, b: v5}, {a: v5, b: v6}, {a: v6, b: v2}] }; // left\n    const f4 = { edges: [{a: v4, b: v8}, {a: v4, b: v3}, {a: v8, b: v7}, {a: v7, b: v3}] }; // right\n    const f5 = { edges: [{a: v1, b: v4}, {a: v1, b: v5}, {a: v5, b: v8}, {a: v8, b: v4}] }; // front\n    const f6 = { edges: [{a: v2, b: v3}, {a: v2, b: v6}, {a: v6, b: v7}, {a: v7, b: v3}] }; // back\n    const faces = [f1, f2, f3, f4, f5, f6];\n    return faces;\n}*/\n\n/*\nexport function getAllBoundingBoxIntersections(boxes: Box[]) {\n    // create and sort intervals along x, y, and z\n    const x_intervals = [];\n    const y_intervals = [];\n    const z_intervals = [];\n    for(let box of boxes) {\n        const x_min = box.position.x - box.boundingBox.x/2;\n        const x_max = box.position.x + box.boundingBox.x/2;\n        x_intervals.push({ type: \"min\", value: x_min, object: box});\n        x_intervals.push({ type: \"max\", value: x_max, object: box});\n\n        \n        const y_min = box.position.y - box.boundingBox.y/2;\n        const y_max = box.position.y + box.boundingBox.y/2;\n        y_intervals.push({ type: \"min\", value: y_min, object: box});\n        y_intervals.push({ type: \"max\", value: y_max, object: box});\n\n        const z_min = box.position.z - box.boundingBox.z/2;\n        const z_max = box.position.z + box.boundingBox.z/2;\n        z_intervals.push({ type: \"min\", value: z_min, object: box});\n        z_intervals.push({ type: \"max\", value: z_max, object: box});\n    }\n    // note to self: switch to insertion sort and use normal merge sort only during the initialization frame\n    x_intervals.sort((a, b) => a.value - b.value);\n    //y_intervals.sort((a, b) => a.value - b.value);\n    //z_intervals.sort((a, b) => a.value - b.value);\n\n    // create a list of active intervals\n    const activeIntervals = [];\n}*/\n\n/*\nexport class World2 {\n    private objects: any[] = [];\n    private currentLoopInterval: any = null;\n\n    private characterForce: Vector3;\n\n    constructor() {\n        this.objects = [];\n\n        this.characterForce = new Vector3(0, 0, 0);\n    }\n\n    startLoop(): void {\n        const currentInstance = this;\n\n        // stop current loop if it exits\n        this.stopCurrentLoop();\n\n        let lastTimeCalled = performance.now();\n        let fps = 0;\n        let times: any[] = [];\n\n        function step() {\n            // calculate fps\n            const now = performance.now();\n            while (times.length > 0 && times[0] <= now - 1000) {\n                times.shift();\n            }\n            times.push(now);\n            fps = times.length;\n            // console.log(\"fps: \", fps);\n\n            for (let i = 0; i < currentInstance.objects.length; i++) {\n                currentInstance.objects[i].integrate(dt);\n            }\n        }\n\n        this.currentLoopInterval = setInterval(step, dt * 1000);\n    }\n\n    // Stops current loop if it exists.\n    stopCurrentLoop(): void {\n        if (this.currentLoopInterval) {\n            clearInterval(this.currentLoopInterval);\n        }\n    }\n\n    addObject(obj: any): void {\n        this.objects.push(obj);\n    }\n\n    getObjects(): any[] {\n        return this.objects;\n    }\n\n    updateCharacterForce(f: Vector3) {\n        this.characterForce = f;\n    }\n\n    detectCollisions(): void {\n\n    }\n\n    checkCollisionSpheres(s1: Sphere, s2: Sphere) {\n        const d = (s1.position.clone().sub(s2.position)).length(); // distance between centers\n\n        // collision if distance between spheres is smaller than sub of radiuses\n        if (d < (s1.radius + s2.radius)) {\n            return true;\n        }\n        return false;\n    }\n\n    resolveCollisionSpheres(s1: Sphere, s2: Sphere) {\n        // find unit vectors from s1 to s2 and s2 to s1\n        const u12 = (s2.position.clone().sub(s1.position)).normalize();\n        const u21 = u12.clone().multiplyScalar(-1);\n\n        // find components of v1 and v2 along and perpendicular to u\n        const v1_along_u12 = u12.clone().multiplyScalar(u12.dot(s1.velocity));\n        const v2_along_u21 = u21.clone().multiplyScalar(u21.dot(s2.velocity));\n\n        const v1_perp_u12 = s1.velocity.clone().sub(v1_along_u12);\n        const v2_perp_u21 = s2.velocity.clone().sub(v2_along_u21);\n\n        // calculate new velocities along u, assuming elastic collision\n        const m1 = 1/s1.inverseMass;\n        const m2 = 1/s2.inverseMass;\n        const v1_along_u_new = (v1_along_u12.clone().multiplyScalar((m1-m2)/(m1+m2))).addScaledVector(v2_along_u21, (2*m2)/(m1+m2));\n        const v2_along_u_new = (v1_along_u12.clone().multiplyScalar((2*m1)/(m1+m2))).addScaledVector(v2_along_u21, -(m1-m2)/(m1+m2));\n\n        // calculate and set new velocities\n        const v1_new = v1_along_u_new.clone().add(v1_perp_u12);\n        const v2_new = v2_along_u_new.clone().add(v2_perp_u21);\n\n        console.log(\"u: \", u12);\n        console.log(\"v1_new: \", v1_new);\n        console.log(\"v2_new\", v2_new);\n    }\n\n    clearCurrentLoop(): void {\n        clearInterval(this.currentLoopInterval);\n    }\n}*/"],"mappings":"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,CAAiDU,SAAjD,EAAV;IAAwE1H,KAAK,EAAEgH;EAA/E,CAAd,CA1B6B,CA0BqE;;EAClG,MAAMgB,UAAU,GAAG,CAACP,KAAD,EAAQE,KAAR,EAAeC,KAAf,EAAsBC,KAAtB,EAA6BC,KAA7B,EAAoCC,KAApC,CAAnB;EACA,OAAOC,UAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}