{"ast":null,"code":"/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Takes a performance entry type and a callback function, and creates a\n * `PerformanceObserver` instance that will observe the specified entry type\n * with buffering enabled and call the callback _for each entry_.\n *\n * This function also feature-detects entry support and wraps the logic in a\n * try/catch to avoid errors in unsupporting browsers.\n */\nexport const observe = (type, callback) => {\n  try {\n    if (PerformanceObserver.supportedEntryTypes.includes(type)) {\n      // More extensive feature detect needed for Firefox due to:\n      // https://github.com/GoogleChrome/web-vitals/issues/142\n      if (type === 'first-input' && !('PerformanceEventTiming' in self)) {\n        return;\n      }\n\n      const po = new PerformanceObserver(l => l.getEntries().map(callback));\n      po.observe({\n        type,\n        buffered: true\n      });\n      return po;\n    }\n  } catch (e) {// Do nothing.\n  }\n\n  return;\n};","map":{"version":3,"names":["observe","type","callback","PerformanceObserver","supportedEntryTypes","includes","self","po","l","getEntries","map","buffered","e"],"sources":["/Users/danny/Github/physics_engine_for_the_web/frontend/node_modules/web-vitals/dist/modules/lib/observe.js"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Takes a performance entry type and a callback function, and creates a\n * `PerformanceObserver` instance that will observe the specified entry type\n * with buffering enabled and call the callback _for each entry_.\n *\n * This function also feature-detects entry support and wraps the logic in a\n * try/catch to avoid errors in unsupporting browsers.\n */\nexport const observe = (type, callback) => {\n    try {\n        if (PerformanceObserver.supportedEntryTypes.includes(type)) {\n            // More extensive feature detect needed for Firefox due to:\n            // https://github.com/GoogleChrome/web-vitals/issues/142\n            if (type === 'first-input' && !('PerformanceEventTiming' in self)) {\n                return;\n            }\n            const po = new PerformanceObserver((l) => l.getEntries().map(callback));\n            po.observe({ type, buffered: true });\n            return po;\n        }\n    }\n    catch (e) {\n        // Do nothing.\n    }\n    return;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,OAAO,GAAG,CAACC,IAAD,EAAOC,QAAP,KAAoB;EACvC,IAAI;IACA,IAAIC,mBAAmB,CAACC,mBAApB,CAAwCC,QAAxC,CAAiDJ,IAAjD,CAAJ,EAA4D;MACxD;MACA;MACA,IAAIA,IAAI,KAAK,aAAT,IAA0B,EAAE,4BAA4BK,IAA9B,CAA9B,EAAmE;QAC/D;MACH;;MACD,MAAMC,EAAE,GAAG,IAAIJ,mBAAJ,CAAyBK,CAAD,IAAOA,CAAC,CAACC,UAAF,GAAeC,GAAf,CAAmBR,QAAnB,CAA/B,CAAX;MACAK,EAAE,CAACP,OAAH,CAAW;QAAEC,IAAF;QAAQU,QAAQ,EAAE;MAAlB,CAAX;MACA,OAAOJ,EAAP;IACH;EACJ,CAXD,CAYA,OAAOK,CAAP,EAAU,CACN;EACH;;EACD;AACH,CAjBM"},"metadata":{},"sourceType":"module"}