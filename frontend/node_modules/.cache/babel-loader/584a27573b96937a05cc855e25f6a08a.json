{"ast":null,"code":"var _jsxFileName = \"/Users/danny/Github/physics_engine_for_the_web/frontend/src/Playgrounds/Playground4.tsx\";\nimport React from \"react\";\nimport * as THREE from \"three\";\nimport { Vector3 } from \"three\";\nimport { Box } from \"../physics_engine/Box\";\nimport { OrbitControls } from \"three-orbitcontrols-ts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CANVAS_WIDTH = 1000;\nconst CANVAS_HEIGHT = 500; // camera\n\nconst camera = new THREE.PerspectiveCamera(45, CANVAS_WIDTH / CANVAS_HEIGHT, 1, 1000);\ncamera.position.set(0, 0, CANVAS_HEIGHT / 4);\ncamera.up.set(0, 1, 0); // add lighting\n\nconst light_color = 0xffffff;\nconst intensity = 1;\nconst point_light = new THREE.PointLight(light_color, intensity);\npoint_light.position.set(50, 50, 50);\nconst ambient_light = new THREE.AmbientLight(light_color, 0.2);\nexport default class Playground4 extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = void 0;\n    this.renderer = void 0;\n    this.animationRequestID = void 0;\n    this.canvasRef = /*#__PURE__*/React.createRef(); // graphics\n\n    this.renderer = null;\n    this.animationRequestID = null;\n  }\n\n  componentDidMount() {\n    // graphics\n    this.renderer = new THREE.WebGLRenderer({\n      canvas: this.canvasRef.current,\n      alpha: false\n    });\n    this.renderer.setSize(CANVAS_WIDTH, CANVAS_HEIGHT); // orbit controls\n\n    const controls = new OrbitControls(camera, this.renderer.domElement);\n    this.onVisualize();\n  }\n\n  onVisualize() {\n    // cancel ongoing animation\n    if (this.animationRequestID) {\n      cancelAnimationFrame(this.animationRequestID);\n    } // set up objects\n\n\n    const b = new Box(new Vector3(0, 0, 20), 30, 5, 5);\n    const b2 = new Box(new Vector3(40, 20, 20), 5, 5, 20);\n    const b3 = new Box(new Vector3(-40, 20, 20), 30, 5, 5);\n    const b4 = new Box(new Vector3(10, 10, 20), 5, 5, 5);\n    const boxes = [b, b2, b3, b4]; // graphics set up\n    // set up scene\n\n    const scene = new THREE.Scene(); // create box meshes\n    //const meshes: any[] = []\n\n    for (let box of boxes) {\n      const mesh = box.mesh; //meshes.push(mesh);\n\n      scene.add(mesh); // add bounding box mesh\n\n      scene.add(box.boundingBoxMesh);\n    } // add lighting\n\n\n    scene.add(point_light, ambient_light); // add gridHelper\n\n    const gridHelper = new THREE.GridHelper(100, 10);\n    gridHelper.rotateOnWorldAxis(new Vector3(1, 0, 0), Math.PI / 2);\n    scene.add(gridHelper);\n\n    for (let i = 0; i < boxes.length; i++) {}\n\n    const currentInstance = this;\n\n    function animate() {\n      currentInstance.animationRequestID = requestAnimationFrame(animate); // update position and rotation of the box mesh\n\n      for (let box of boxes) {\n        // run physics step\n        box.integrate(1 / 60); // update graphics\n\n        box.updateMesh();\n        box.updateBoundingBoxMesh();\n      }\n\n      currentInstance.renderer.render(scene, camera);\n    }\n\n    animate();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playground\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Playground 4 page desu...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"canvas_container\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: this.canvasRef,\n          width: CANVAS_WIDTH,\n          height: CANVAS_HEIGHT\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"names":["React","THREE","Vector3","Box","OrbitControls","CANVAS_WIDTH","CANVAS_HEIGHT","camera","PerspectiveCamera","position","set","up","light_color","intensity","point_light","PointLight","ambient_light","AmbientLight","Playground4","Component","constructor","props","canvasRef","renderer","animationRequestID","createRef","componentDidMount","WebGLRenderer","canvas","current","alpha","setSize","controls","domElement","onVisualize","cancelAnimationFrame","b","b2","b3","b4","boxes","scene","Scene","box","mesh","add","boundingBoxMesh","gridHelper","GridHelper","rotateOnWorldAxis","Math","PI","i","length","currentInstance","animate","requestAnimationFrame","integrate","updateMesh","updateBoundingBoxMesh","render"],"sources":["/Users/danny/Github/physics_engine_for_the_web/frontend/src/Playgrounds/Playground4.tsx"],"sourcesContent":["import React from \"react\";\nimport { getAllBoundingBoxIntersections, World } from \"../physics_engine/physics_engine\";\nimport * as THREE from \"three\";\nimport { Matrix3, Scene, Vector3 } from \"three\";\nimport { Sphere } from \"../physics_engine/Sphere\";\nimport { Box } from \"../physics_engine/Box\";\nimport { OrbitControls } from \"three-orbitcontrols-ts\";\nimport { getEulerAngles, xRotationMatrix3, yRotationMatrix3, zRotationMatrix3, convertMatrix3ToMatrix4 } from \"../physics_engine/math_library\";\n\nconst CANVAS_WIDTH = 1000;\nconst CANVAS_HEIGHT = 500;\n\n// camera\nconst camera = new THREE.PerspectiveCamera(45, CANVAS_WIDTH / CANVAS_HEIGHT, 1, 1000);\ncamera.position.set(0, 0, CANVAS_HEIGHT / 4);\ncamera.up.set(0, 1, 0);\n\n// add lighting\nconst light_color = 0xffffff;\nconst intensity = 1;\nconst point_light = new THREE.PointLight(light_color, intensity);\npoint_light.position.set(50, 50, 50);\n\nconst ambient_light = new THREE.AmbientLight(light_color, 0.2);\n\nexport default class Playground4 extends React.Component {\n    private canvasRef: any;\n    private renderer: any;\n    private animationRequestID: any;\n\n    constructor(props: any) {\n        super(props);\n        this.canvasRef = React.createRef();\n\n        // graphics\n        this.renderer = null;\n        this.animationRequestID = null;\n    }\n\n    componentDidMount(): void {\n        // graphics\n        this.renderer = new THREE.WebGLRenderer({ canvas: this.canvasRef.current, alpha: false })\n        this.renderer.setSize(CANVAS_WIDTH, CANVAS_HEIGHT);\n\n        // orbit controls\n        const controls = new OrbitControls(camera, this.renderer.domElement);\n\n        this.onVisualize();\n    }\n\n    onVisualize() {\n        // cancel ongoing animation\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n\n        // set up objects\n        const b = new Box(new Vector3(0, 0, 20), 30, 5, 5);\n        const b2 = new Box(new Vector3(40, 20, 20), 5, 5, 20);\n        const b3 = new Box(new Vector3(-40, 20, 20), 30, 5, 5);\n        const b4 = new Box(new Vector3(10, 10, 20), 5, 5, 5);\n\n        const boxes = [b, b2, b3, b4];\n\n        // graphics set up\n        // set up scene\n        const scene = new THREE.Scene();\n\n        // create box meshes\n        //const meshes: any[] = []\n        for (let box of boxes) {\n            const mesh = box.mesh;\n            //meshes.push(mesh);\n            scene.add(mesh);\n            \n            // add bounding box mesh\n            scene.add(box.boundingBoxMesh)\n        }\n\n        // add lighting\n        scene.add(point_light, ambient_light);\n\n        // add gridHelper\n        const gridHelper = new THREE.GridHelper( 100, 10 );\n        gridHelper.rotateOnWorldAxis(new Vector3(1, 0, 0), Math.PI / 2);\n        scene.add(gridHelper);\n\n        for(let i = 0; i < boxes.length; i++) {\n            \n        }\n\n        const currentInstance = this;\n        function animate() {\n            currentInstance.animationRequestID = requestAnimationFrame(animate);\n\n            // update position and rotation of the box mesh\n            for (let box of boxes) {\n                // run physics step\n                box.integrate(1/60);\n\n                // update graphics\n                box.updateMesh();\n                box.updateBoundingBoxMesh();\n            }\n            currentInstance.renderer.render(scene, camera);\n        }\n        animate();\n    }\n\n    render() {\n        return (\n            <div className=\"playground\">\n                <h2>Playground 4 page desu...</h2>\n                <div id=\"canvas_container\">\n                    <canvas ref={this.canvasRef} width={CANVAS_WIDTH} height={CANVAS_HEIGHT} />\n                </div>\n            </div>\n        )\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}