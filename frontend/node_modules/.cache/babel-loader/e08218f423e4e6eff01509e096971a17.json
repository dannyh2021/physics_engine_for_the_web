{"ast":null,"code":"var _jsxFileName = \"/Users/danny/Github/physics_engine_for_the_web/frontend/src/Playgrounds/Playground2.tsx\";\nimport React from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three-orbitcontrols-ts\";\nimport { Vector3 } from \"three\";\nimport { World } from \"../physics_engine/physics_engine\";\nimport { Sphere } from \"../physics_engine/Sphere\";\nimport { Box } from \"../physics_engine/Box\";\nimport { Plane } from \"../physics_engine/Plane\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CANVAS_WIDTH = 1000;\nconst CANVAS_HEIGHT = 500; // camera\n\nconst camera = new THREE.PerspectiveCamera(45, CANVAS_WIDTH / CANVAS_HEIGHT, 1, 1000);\ncamera.position.set(0, -CANVAS_HEIGHT / 6, CANVAS_HEIGHT / 6);\ncamera.up.set(0, 1, 0); // add lighting\n\nconst light_color = 0xffffff;\nconst intensity = 1;\nconst point_light = new THREE.PointLight(light_color, intensity);\npoint_light.position.set(10, 10, 50);\nconst ambient_light = new THREE.AmbientLight(light_color, 0.2);\nexport default class Playground2 extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = void 0;\n    this.w = void 0;\n    this.renderer = void 0;\n    this.animationRequestID = void 0;\n    this.scene = void 0;\n    this.canvasRef = /*#__PURE__*/React.createRef();\n    this.w = new World(); // graphics\n\n    this.renderer = null;\n    this.animationRequestID = null; // bindings\n\n    this.onRestart = this.onRestart.bind(this);\n    this.onResume = this.onResume.bind(this);\n    this.onPause = this.onPause.bind(this);\n  }\n\n  componentDidMount() {\n    // graphics\n    this.renderer = new THREE.WebGLRenderer({\n      canvas: this.canvasRef.current,\n      alpha: false\n    });\n    this.renderer.setSize(CANVAS_WIDTH, CANVAS_HEIGHT); // orbit controls\n\n    const controls = new OrbitControls(camera, this.renderer.domElement);\n    this.initialize();\n    this.onVisualize();\n  }\n\n  componentWillUnmount() {\n    if (this.renderer) {\n      this.renderer = null;\n    }\n\n    if (this.animationRequestID) {\n      cancelAnimationFrame(this.animationRequestID);\n    }\n  }\n\n  initialize() {\n    // cancel ongoing animation\n    if (this.animationRequestID) {\n      cancelAnimationFrame(this.animationRequestID);\n    }\n\n    this.w = new World();\n    this.scene = new THREE.Scene(); // set up objects\n\n    const s = new Sphere(new Vector3(-70, 0, 40), 8);\n    s.velocity = new Vector3(30, 0, 0);\n    this.w.addObject(s); // add pyramid of boxes\n\n    let height = 7.5;\n\n    for (let i = 0; i < 2; i++) {\n      for (let j = 0; j < 2; j++) {\n        const box = new Box(new Vector3(i * 25 + 5, j * 17 - 7.5, height), 15, 15, 20);\n        this.w.addObject(box);\n      }\n    }\n\n    height += 15;\n    const box1 = new Box(new Vector3(15, 0, height), 14, 14, 15); // this.w.addObject(box1);\n\n    height += 15;\n    const wall = new Box(new Vector3(50, 0, 25), 5, 80, 50);\n    this.w.addObject(wall); // rotating cubes on corners\n\n    const corners = [];\n    corners.push(new Vector3(-55, 55, 40), new Vector3(-55, -55, 40), new Vector3(55, 55, 40), new Vector3(55, -55, 40));\n\n    for (let corner of corners) {\n      const rotatingCube = new Box(corner, 10, 10, 10);\n      rotatingCube.angularMomentum = new Vector3(1, 1, 5).applyMatrix3(rotatingCube.getInertia());\n      this.w.addObject(rotatingCube);\n    } // add some bouncing balls at the top and bottom\n\n\n    const sides = [];\n    sides.push(new Vector3(0, 55, 40), new Vector3(0, -55, 40));\n\n    for (let side of sides) {\n      const bouncingBall = new Sphere(side, 5);\n      this.w.addObject(bouncingBall);\n    } // add plane\n\n\n    const plane = new Plane(new Vector3(0, 0, 0), new Vector3(0, 0, 1), 1000, 1000);\n    this.w.addObject(plane); // add object meshes and bounding box meshes to scene\n\n    for (let object of this.w.objects) {\n      this.scene.add(object.mesh);\n    } // add gridHelper\n\n\n    const gridHelper = new THREE.GridHelper(100, 10);\n    gridHelper.rotateOnWorldAxis(new Vector3(1, 0, 0), Math.PI / 2);\n    this.scene.add(gridHelper); // add lighting\n\n    this.scene.add(point_light, ambient_light);\n  }\n\n  onVisualize() {\n    // cancel ongoing animation\n    if (this.animationRequestID) {\n      cancelAnimationFrame(this.animationRequestID);\n    }\n\n    const renderer = this.renderer;\n    const scene = this.scene;\n    const world = this.w;\n    const objects = world.objects;\n    let boundingBoxIntersections;\n    let contacts;\n    const currentInstance = this;\n\n    function animate() {\n      currentInstance.animationRequestID = requestAnimationFrame(animate); // add gravity\n\n      for (let object of objects) {\n        if (object instanceof Plane) {\n          continue;\n        }\n\n        const mass = 1 / object.inverseMass;\n        object.forceAccum.addScaledVector(new Vector3(0, 0, -1), mass * 10);\n      }\n\n      world.tick(1 / 60); // graphics step\n\n      world.updateMeshes();\n      currentInstance.renderer.render(scene, camera);\n    }\n\n    animate();\n  }\n\n  onRestart() {\n    this.initialize();\n    this.onVisualize();\n  }\n\n  onResume() {\n    this.onVisualize();\n  }\n\n  onPause() {\n    // cancel ongoing animation\n    if (this.animationRequestID) {\n      cancelAnimationFrame(this.animationRequestID);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"demo2\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Demo 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This scene shows how the physics engine simulates constrained dynamics. The sphere, set with some initial velocity, is launched into a small pile of cubes, and all objects are accelerated by the force of gravity. The engine may be extended to become part of physics-based game, such as one involved ballistics.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.onRestart,\n        children: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.onResume,\n        children: \"Resume\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.onPause,\n        children: \"Pause\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"canvas_container\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: this.canvasRef,\n          width: CANVAS_WIDTH,\n          height: CANVAS_HEIGHT\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"names":["React","THREE","OrbitControls","Vector3","World","Sphere","Box","Plane","CANVAS_WIDTH","CANVAS_HEIGHT","camera","PerspectiveCamera","position","set","up","light_color","intensity","point_light","PointLight","ambient_light","AmbientLight","Playground2","Component","constructor","props","canvasRef","w","renderer","animationRequestID","scene","createRef","onRestart","bind","onResume","onPause","componentDidMount","WebGLRenderer","canvas","current","alpha","setSize","controls","domElement","initialize","onVisualize","componentWillUnmount","cancelAnimationFrame","Scene","s","velocity","addObject","height","i","j","box","box1","wall","corners","push","corner","rotatingCube","angularMomentum","applyMatrix3","getInertia","sides","side","bouncingBall","plane","object","objects","add","mesh","gridHelper","GridHelper","rotateOnWorldAxis","Math","PI","world","boundingBoxIntersections","contacts","currentInstance","animate","requestAnimationFrame","mass","inverseMass","forceAccum","addScaledVector","tick","updateMeshes","render"],"sources":["/Users/danny/Github/physics_engine_for_the_web/frontend/src/Playgrounds/Playground2.tsx"],"sourcesContent":["import React from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three-orbitcontrols-ts\";\nimport { Matrix4, Vector3 } from \"three\";\nimport { getAllContacts, resolveCollision, World } from \"../physics_engine/physics_engine\";\nimport { Sphere } from \"../physics_engine/Sphere\";\nimport { Box } from \"../physics_engine/Box\";\nimport { Plane } from \"../physics_engine/Plane\";\n\nconst CANVAS_WIDTH = 1000;\nconst CANVAS_HEIGHT = 500;\n\n// camera\nconst camera = new THREE.PerspectiveCamera(45, CANVAS_WIDTH / CANVAS_HEIGHT, 1, 1000);\ncamera.position.set(0, -CANVAS_HEIGHT / 6, CANVAS_HEIGHT / 6);\ncamera.up.set(0, 1, 0);\n\n// add lighting\nconst light_color = 0xffffff;\nconst intensity = 1;\nconst point_light = new THREE.PointLight(light_color, intensity);\npoint_light.position.set(10, 10, 50);\n\nconst ambient_light = new THREE.AmbientLight(light_color, 0.2);\n\nexport default class Playground2 extends React.Component {\n    private canvasRef: any;\n\n    private w: World;\n\n    private renderer: any;\n    private animationRequestID: any;\n    private scene: THREE.Scene;\n\n    constructor(props: any) {\n        super(props);\n        this.canvasRef = React.createRef();\n        this.w = new World();\n\n        // graphics\n        this.renderer = null;\n        this.animationRequestID = null;\n\n        // bindings\n        this.onRestart = this.onRestart.bind(this);\n        this.onResume = this.onResume.bind(this);\n        this.onPause = this.onPause.bind(this);\n    }\n\n    componentDidMount(): void {\n        // graphics\n        this.renderer = new THREE.WebGLRenderer({ canvas: this.canvasRef.current, alpha: false })\n        this.renderer.setSize(CANVAS_WIDTH, CANVAS_HEIGHT);\n\n        // orbit controls\n        const controls = new OrbitControls(camera, this.renderer.domElement);\n\n        this.initialize();\n        this.onVisualize();\n    }\n\n    componentWillUnmount() {\n        if(this.renderer) {\n            this.renderer = null;\n        }\n\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n    }\n\n    initialize(): void {\n        // cancel ongoing animation\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n\n        this.w = new World();\n        this.scene = new THREE.Scene();\n\n        // set up objects\n        const s = new Sphere(new Vector3(-70, 0, 40), 8);\n        s.velocity = new Vector3(30, 0, 0);\n\n        this.w.addObject(s);\n\n        // add pyramid of boxes\n        let height = 7.5;\n        for (let i = 0; i < 2 ; i++) {\n            for (let j = 0; j < 2; j++) {\n                const box = new Box(new Vector3(i * 25 + 5, j*17 - 7.5, height), 15, 15, 20);\n                this.w.addObject(box);\n            }\n        }\n        height += 15;\n        const box1 = new Box(new Vector3(15, 0, height), 14, 14, 15);\n        // this.w.addObject(box1);\n        height += 15;\n        \n        const wall = new Box(new Vector3(50, 0, 25), 5, 80, 50);\n\n        this.w.addObject(wall);\n\n        // rotating cubes on corners\n        const corners = [];\n        corners.push(new Vector3(-55, 55, 40), new Vector3(-55, -55, 40), new Vector3(55, 55, 40), new Vector3(55, -55, 40));\n        for (let corner of corners) {\n            const rotatingCube = new Box(corner, 10, 10, 10);\n            rotatingCube.angularMomentum = new Vector3(1, 1, 5).applyMatrix3(rotatingCube.getInertia());\n            this.w.addObject(rotatingCube);\n        }\n\n        // add some bouncing balls at the top and bottom\n        const sides =[];\n        sides.push(new Vector3(0, 55, 40), new Vector3(0, -55, 40));\n        for (let side of sides) {\n            const bouncingBall = new Sphere(side, 5);\n            this.w.addObject(bouncingBall);\n        }\n\n        // add plane\n        const plane = new Plane(new Vector3(0, 0, 0), new Vector3(0, 0, 1), 1000, 1000);\n        this.w.addObject(plane);\n\n        // add object meshes and bounding box meshes to scene\n        for (let object of this.w.objects) {\n            this.scene.add(object.mesh);\n        }\n\n        // add gridHelper\n        const gridHelper = new THREE.GridHelper( 100, 10 );\n        gridHelper.rotateOnWorldAxis(new Vector3(1, 0, 0), Math.PI/2);\n        this.scene.add(gridHelper);\n\n        // add lighting\n        this.scene.add(point_light, ambient_light);\n    }\n\n    onVisualize(): void {\n        // cancel ongoing animation\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n\n        const renderer = this.renderer;\n        const scene = this.scene;\n        const world = this.w;\n        const objects = world.objects;\n\n        let boundingBoxIntersections;\n        let contacts;\n\n        const currentInstance = this;\n        function animate() {\n            currentInstance.animationRequestID = requestAnimationFrame(animate);\n\n            // add gravity\n            for (let object of objects) {\n                if (object instanceof Plane) {\n                    continue;\n                }\n\n                const mass = 1/object.inverseMass;\n                object.forceAccum.addScaledVector(new Vector3(0, 0, -1), mass * 10);\n            }\n\n            world.tick(1/60);\n\n            // graphics step\n            world.updateMeshes();\n\n            currentInstance.renderer.render(scene, camera);\n        }\n\n        animate();\n    }\n\n    onRestart(): void {\n        this.initialize();\n        this.onVisualize();\n    }\n\n    onResume(): void {\n        this.onVisualize();\n    }\n\n    onPause(): void {\n        // cancel ongoing animation\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"demo2\">\n                <h2>Demo 3</h2>\n                <p>This scene shows how the physics engine simulates constrained dynamics. The sphere, set with some initial velocity, is launched into a small pile of cubes, and all objects are accelerated by the force of gravity. The engine may be extended to become part of physics-based game, such as one involved ballistics.</p>\n                <button onClick={this.onRestart}>Restart</button>\n                <button onClick={this.onResume}>Resume</button>\n                <button onClick={this.onPause}>Pause</button>\n                <div id=\"canvas_container\">\n                    <canvas ref={this.canvasRef} width={CANVAS_WIDTH} height={CANVAS_HEIGHT} />\n                </div>\n            </div>\n        )\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}