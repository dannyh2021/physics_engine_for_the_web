{"ast":null,"code":"var _jsxFileName = \"/Users/danny/Github/physics_engine_for_the_web/frontend/src/Playgrounds/Playground.tsx\";\nimport React from \"react\";\nimport { World } from \"../physics_engine/physics_engine\";\nimport * as THREE from \"three\";\nimport { Vector3 } from \"three\";\nimport { Sphere } from \"../physics_engine/Sphere\";\nimport { Box } from \"../physics_engine/Box\";\nimport { OrbitControls } from \"three-orbitcontrols-ts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CANVAS_WIDTH = 1000;\nconst CANVAS_HEIGHT = 500; // camera\n\nconst camera = new THREE.PerspectiveCamera(45, CANVAS_WIDTH / CANVAS_HEIGHT, 1, 1000);\ncamera.position.set(0, -CANVAS_HEIGHT / 6, CANVAS_HEIGHT / 6);\ncamera.up.set(0, 1, 0); // add lighting\n\nconst light_color = 0xffffff;\nconst intensity = 1;\nconst point_light = new THREE.PointLight(light_color, intensity);\npoint_light.position.set(50, 50, 50);\nconst ambient_light = new THREE.AmbientLight(light_color, 0.2);\nexport default class Playground extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = void 0;\n    this.w = void 0;\n    this.renderer = void 0;\n    this.animationRequestID = void 0;\n    this.scene = void 0;\n    this.canvasRef = /*#__PURE__*/React.createRef();\n    this.w = new World(); // graphics\n\n    this.renderer = null;\n    this.animationRequestID = null; // bindings\n\n    this.onRestart = this.onRestart.bind(this);\n    this.onResume = this.onResume.bind(this);\n    this.onPause = this.onPause.bind(this);\n  }\n\n  componentDidMount() {\n    this.w = new World(); // graphics\n\n    this.renderer = new THREE.WebGLRenderer({\n      canvas: this.canvasRef.current,\n      alpha: false\n    });\n    this.renderer.setSize(CANVAS_WIDTH, CANVAS_HEIGHT); // orbit controls\n\n    const controls = new OrbitControls(camera, this.renderer.domElement);\n    this.initialize();\n    this.onVisualize();\n  }\n\n  initialize() {\n    // cancel ongoing animation\n    if (this.animationRequestID) {\n      cancelAnimationFrame(this.animationRequestID);\n    }\n\n    this.scene = new THREE.Scene(); // set up objects\n\n    const sphere = new Sphere(new Vector3(0, 0, 0), 5);\n    const box = new Box(new Vector3(20, 20, 20), 10, 10, 10);\n    const box2 = new Box(new Vector3(-20, -20, 0), 10, 10, 10);\n    this.w.addObject(sphere);\n    this.w.addObject(box);\n    this.w.addObject(box2); // add object meshes and bounding box meshes to scene\n\n    for (let object of this.w.objects) {\n      this.scene.add(object.mesh);\n      this.scene.add(object.boundingBoxMesh);\n    } // add gridHelper\n\n\n    const gridHelper = new THREE.GridHelper(100, 10);\n    gridHelper.rotateOnWorldAxis(new Vector3(1, 0, 0), Math.PI / 2);\n    this.scene.add(gridHelper); // add lighting\n\n    this.scene.add(point_light, ambient_light);\n  }\n\n  onVisualize() {\n    // cancel ongoing animation\n    if (this.animationRequestID) {\n      cancelAnimationFrame(this.animationRequestID);\n    }\n\n    const renderer = this.renderer;\n    const scene = this.scene;\n    const world = this.w;\n    const objects = world.objects;\n    console.log(\"objects length: \", objects.length);\n    const currentInstance = this;\n\n    function animate() {\n      currentInstance.animationRequestID = requestAnimationFrame(animate); // apply forces\n\n      for (let obj of objects) {\n        obj.forceAccum.addScaledVector(obj.position, -1);\n      } // physics step\n\n\n      world.integrateObjects(1 / 60); // graphics step\n\n      world.updateMeshes(); // reset mesh colors\n\n      for (let object of objects) {\n        object.mesh.material = new THREE.MeshPhongMaterial({\n          color: 0x00bcd6\n        });\n        object.boundingBoxMesh.material = new THREE.LineBasicMaterial({\n          color: 0xffffff\n        });\n      } // color intersecting bounding boxes and objects\n\n      /*const boundingBoxIntersections = getAllBoundingBoxIntersections(objects);\n      for(let boundingBoxIntersection of boundingBoxIntersections) {\n          boundingBoxIntersection.a.boundingBoxMesh.material = new THREE.LineBasicMaterial({ color: 0xff0000 });\n          boundingBoxIntersection.b.boundingBoxMesh.material = new THREE.LineBasicMaterial({ color: 0xff0000 });\n           // todo: color collisions\n      }*/\n      // camera.lookAt(0, 0, 0);\n\n\n      renderer.render(scene, camera);\n    }\n\n    animate();\n  }\n\n  onRestart() {\n    this.initialize();\n    this.onVisualize();\n  }\n\n  onResume() {\n    this.onVisualize();\n  }\n\n  onPause() {\n    // cancel ongoing animation\n    if (this.animationRequestID) {\n      cancelAnimationFrame(this.animationRequestID);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playground\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Playground page desu...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"canvas_container\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: this.canvasRef,\n          width: CANVAS_WIDTH,\n          height: CANVAS_HEIGHT\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"names":["React","World","THREE","Vector3","Sphere","Box","OrbitControls","CANVAS_WIDTH","CANVAS_HEIGHT","camera","PerspectiveCamera","position","set","up","light_color","intensity","point_light","PointLight","ambient_light","AmbientLight","Playground","Component","constructor","props","canvasRef","w","renderer","animationRequestID","scene","createRef","onRestart","bind","onResume","onPause","componentDidMount","WebGLRenderer","canvas","current","alpha","setSize","controls","domElement","initialize","onVisualize","cancelAnimationFrame","Scene","sphere","box","box2","addObject","object","objects","add","mesh","boundingBoxMesh","gridHelper","GridHelper","rotateOnWorldAxis","Math","PI","world","console","log","length","currentInstance","animate","requestAnimationFrame","obj","forceAccum","addScaledVector","integrateObjects","updateMeshes","material","MeshPhongMaterial","color","LineBasicMaterial","render"],"sources":["/Users/danny/Github/physics_engine_for_the_web/frontend/src/Playgrounds/Playground.tsx"],"sourcesContent":["import React from \"react\";\nimport { getAllBoundingBoxIntersections, World } from \"../physics_engine/physics_engine\";\nimport * as THREE from \"three\";\nimport { Vector3 } from \"three\";\nimport { Sphere } from \"../physics_engine/Sphere\";\nimport { Box } from \"../physics_engine/Box\";\nimport { OrbitControls } from \"three-orbitcontrols-ts\";\n\nconst CANVAS_WIDTH = 1000;\nconst CANVAS_HEIGHT = 500;\n\n// camera\nconst camera = new THREE.PerspectiveCamera(45, CANVAS_WIDTH / CANVAS_HEIGHT, 1, 1000);\ncamera.position.set(0, -CANVAS_HEIGHT / 6, CANVAS_HEIGHT / 6);\ncamera.up.set(0, 1, 0);\n\n// add lighting\nconst light_color = 0xffffff;\nconst intensity = 1;\nconst point_light = new THREE.PointLight(light_color, intensity);\npoint_light.position.set(50, 50, 50);\n\nconst ambient_light = new THREE.AmbientLight(light_color, 0.2);\n\nexport default class Playground extends React.Component {\n    private canvasRef: any;\n\n    private w: World;\n\n    private renderer: any;\n    private animationRequestID: any;\n    private scene: THREE.Scene;\n\n    constructor(props: any) {\n        super(props);\n        this.canvasRef = React.createRef();\n        this.w = new World();\n\n        // graphics\n        this.renderer = null;\n        this.animationRequestID = null;\n\n        // bindings\n        this.onRestart = this.onRestart.bind(this);\n        this.onResume = this.onResume.bind(this);\n        this.onPause = this.onPause.bind(this);\n    }\n\n    componentDidMount(): void {\n        this.w = new World();\n\n        // graphics\n        this.renderer = new THREE.WebGLRenderer({ canvas: this.canvasRef.current, alpha: false })\n        this.renderer.setSize(CANVAS_WIDTH, CANVAS_HEIGHT);\n\n        // orbit controls\n        const controls = new OrbitControls(camera, this.renderer.domElement);\n\n        this.initialize();\n        this.onVisualize();\n    }\n\n    initialize(): void {\n        // cancel ongoing animation\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n\n        this.scene = new THREE.Scene();\n\n        // set up objects\n        const sphere = new Sphere(new Vector3(0, 0, 0), 5);\n        const box = new Box(new Vector3(20, 20, 20), 10, 10, 10);\n        const box2 = new Box(new Vector3(-20, -20, 0), 10, 10, 10);\n\n        this.w.addObject(sphere);\n        this.w.addObject(box);\n        this.w.addObject(box2);\n\n        // add object meshes and bounding box meshes to scene\n        for (let object of this.w.objects) {\n            this.scene.add(object.mesh);\n            this.scene.add(object.boundingBoxMesh);\n        }\n\n        // add gridHelper\n        const gridHelper = new THREE.GridHelper( 100, 10 );\n        gridHelper.rotateOnWorldAxis(new Vector3(1, 0, 0), Math.PI/2);\n        this.scene.add(gridHelper);\n\n        // add lighting\n        this.scene.add(point_light, ambient_light);\n    }\n\n    onVisualize(): void {\n        // cancel ongoing animation\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n\n        const renderer = this.renderer;\n        const scene = this.scene;\n        const world = this.w;\n        const objects = world.objects;\n\n        console.log(\"objects length: \", objects.length);\n\n        const currentInstance = this;\n        function animate() {\n            currentInstance.animationRequestID = requestAnimationFrame(animate);\n\n            // apply forces\n            for (let obj of objects) {\n                obj.forceAccum.addScaledVector(obj.position, -1);\n            }\n\n            // physics step\n            world.integrateObjects(1/60);\n            \n            // graphics step\n            world.updateMeshes();\n\n            // reset mesh colors\n            for (let object of objects) {\n                object.mesh.material = new THREE.MeshPhongMaterial({ color: 0x00bcd6 });\n                object.boundingBoxMesh.material = new THREE.LineBasicMaterial({ color: 0xffffff });\n            }\n\n            // color intersecting bounding boxes and objects\n            /*const boundingBoxIntersections = getAllBoundingBoxIntersections(objects);\n            for(let boundingBoxIntersection of boundingBoxIntersections) {\n                boundingBoxIntersection.a.boundingBoxMesh.material = new THREE.LineBasicMaterial({ color: 0xff0000 });\n                boundingBoxIntersection.b.boundingBoxMesh.material = new THREE.LineBasicMaterial({ color: 0xff0000 });\n\n                // todo: color collisions\n            }*/\n\n            // camera.lookAt(0, 0, 0);\n\n            renderer.render(scene, camera);\n        }\n        animate();\n    }\n\n    onRestart(): void {\n        this.initialize();\n        this.onVisualize();\n    }\n\n    onResume(): void {\n        this.onVisualize();\n    }\n\n    onPause(): void {\n        // cancel ongoing animation\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"playground\">\n                <h2>Playground page desu...</h2>\n                <div id=\"canvas_container\">\n                    <canvas ref={this.canvasRef} width={CANVAS_WIDTH} height={CANVAS_HEIGHT} />\n                </div>\n            </div>\n        )\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}