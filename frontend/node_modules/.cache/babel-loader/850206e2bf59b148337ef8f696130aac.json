{"ast":null,"code":"var _jsxFileName = \"/Users/danny/Github/physics_engine_for_the_web/frontend/src/Playgrounds/Playground6.tsx\";\nimport React from \"react\";\nimport { getAllBoundingBoxIntersections, checkCollision } from \"../physics_engine/physics_engine\";\nimport * as THREE from \"three\";\nimport { Vector3 } from \"three\";\nimport { Box } from \"../physics_engine/Box\";\nimport { OrbitControls } from \"three-orbitcontrols-ts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CANVAS_WIDTH = 1000;\nconst CANVAS_HEIGHT = 500; // camera\n\nconst camera = new THREE.PerspectiveCamera(45, CANVAS_WIDTH / CANVAS_HEIGHT, 1, 1000);\ncamera.position.set(0, 0, CANVAS_HEIGHT / 4);\ncamera.up.set(0, 1, 0); // add lighting\n\nconst light_color = 0xffffff;\nconst intensity = 1;\nconst point_light = new THREE.PointLight(light_color, intensity);\npoint_light.position.set(50, 50, 50);\nconst ambient_light = new THREE.AmbientLight(light_color, 0.2);\nexport default class Playground6 extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = void 0;\n    this.renderer = void 0;\n    this.animationRequestID = void 0;\n    this.scene = void 0;\n    this.boxes = void 0;\n    this.canvasRef = /*#__PURE__*/React.createRef();\n    this.scene = new THREE.Scene();\n    this.boxes = []; // graphics\n\n    this.renderer = null;\n    this.animationRequestID = null; // bindings\n\n    this.onRestart = this.onRestart.bind(this);\n    this.onResume = this.onResume.bind(this);\n    this.onPause = this.onPause.bind(this);\n  }\n\n  componentDidMount() {\n    // graphics\n    this.renderer = new THREE.WebGLRenderer({\n      canvas: this.canvasRef.current,\n      alpha: false\n    });\n    this.renderer.setSize(CANVAS_WIDTH, CANVAS_HEIGHT); // orbit controls\n\n    const controls = new OrbitControls(camera, this.renderer.domElement);\n    this.initialize();\n    this.onVisualize();\n  }\n\n  initialize() {\n    // cancel ongoing animation\n    if (this.animationRequestID) {\n      cancelAnimationFrame(this.animationRequestID);\n    }\n\n    this.scene = new THREE.Scene(); // set up objects\n\n    const b = new Box(new Vector3(0, 0, 20), 30, 5, 5);\n    const b2 = new Box(new Vector3(-30, 20, 20), 5, 5, 20);\n    const b3 = new Box(new Vector3(30, 10, 20), 10, 10, 10);\n    const b4 = new Box(new Vector3(-70, 10, 20), 5, 5, 5);\n    b4.momentum = new Vector3(20, 0, 0).multiplyScalar(1 / b4.inverseMass);\n    const b5 = new Box(new Vector3(30, -30, 20), 5, 10, 20);\n    this.boxes = [b, b2, b3, b4, b5];\n\n    for (let box of this.boxes) {\n      this.scene.add(box.mesh); // add bounding box mesh\n\n      this.scene.add(box.boundingBoxMesh);\n    } // add lighting\n\n\n    this.scene.add(point_light, ambient_light); // add gridHelper\n\n    const gridHelper = new THREE.GridHelper(100, 10);\n    gridHelper.rotateOnWorldAxis(new Vector3(1, 0, 0), Math.PI / 2);\n    this.scene.add(gridHelper);\n  }\n\n  onVisualize() {\n    // cancel ongoing animation\n    if (this.animationRequestID) {\n      cancelAnimationFrame(this.animationRequestID);\n    }\n\n    const scene = this.scene;\n    const boxes = this.boxes;\n    let boundingBoxIntersections = getAllBoundingBoxIntersections(boxes);\n    console.log(\"bounding box intersections: \", boundingBoxIntersections); // let intersections = \n\n    const currentInstance = this;\n\n    function animate() {\n      currentInstance.animationRequestID = requestAnimationFrame(animate); // physics step\n\n      for (let box of boxes) {\n        box.integrate(1 / 60);\n      } // get bounding box intersections\n\n\n      boundingBoxIntersections = getAllBoundingBoxIntersections(boxes); // graphics step\n\n      for (let box of boxes) {\n        // update position and rotation of the box mesh\n        box.updateMesh();\n        box.updateBoundingBoxMesh(); // clear bounding box color\n\n        box.mesh.material = new THREE.MeshPhongMaterial({\n          color: 0x00bcd6\n        });\n        box.boundingBoxMesh.material = new THREE.LineBasicMaterial({\n          color: 0xffffff\n        });\n      } // color the bound boxes of intersecting boxes\n\n\n      for (let i = 0; i < boundingBoxIntersections.length; i++) {\n        const a = boundingBoxIntersections[i].a;\n        const b = boundingBoxIntersections[i].b;\n        a.boundingBoxMesh.material = new THREE.LineBasicMaterial({\n          color: 0xff0000\n        });\n        b.boundingBoxMesh.material = new THREE.LineBasicMaterial({\n          color: 0xff0000\n        }); // check for collisions and color them\n\n        if (checkCollision(a, b)) {\n          const red_material = new THREE.MeshPhongMaterial({\n            color: 0xff0000\n          });\n          a.mesh.material = red_material;\n          b.mesh.material = red_material;\n        }\n      }\n\n      currentInstance.renderer.render(scene, camera);\n    }\n\n    animate();\n  }\n\n  onRestart() {\n    this.initialize();\n    this.onVisualize();\n  }\n\n  onResume() {\n    this.onVisualize();\n  }\n\n  onPause() {\n    // cancel ongoing animation\n    if (this.animationRequestID) {\n      cancelAnimationFrame(this.animationRequestID);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playground\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Playground 6 page desu...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.onRestart,\n        children: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.onResume,\n        children: \"Resume\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.onPause,\n        children: \"Pause\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"canvas_container\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: this.canvasRef,\n          width: CANVAS_WIDTH,\n          height: CANVAS_HEIGHT\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"names":["React","getAllBoundingBoxIntersections","checkCollision","THREE","Vector3","Box","OrbitControls","CANVAS_WIDTH","CANVAS_HEIGHT","camera","PerspectiveCamera","position","set","up","light_color","intensity","point_light","PointLight","ambient_light","AmbientLight","Playground6","Component","constructor","props","canvasRef","renderer","animationRequestID","scene","boxes","createRef","Scene","onRestart","bind","onResume","onPause","componentDidMount","WebGLRenderer","canvas","current","alpha","setSize","controls","domElement","initialize","onVisualize","cancelAnimationFrame","b","b2","b3","b4","momentum","multiplyScalar","inverseMass","b5","box","add","mesh","boundingBoxMesh","gridHelper","GridHelper","rotateOnWorldAxis","Math","PI","boundingBoxIntersections","console","log","currentInstance","animate","requestAnimationFrame","integrate","updateMesh","updateBoundingBoxMesh","material","MeshPhongMaterial","color","LineBasicMaterial","i","length","a","red_material","render"],"sources":["/Users/danny/Github/physics_engine_for_the_web/frontend/src/Playgrounds/Playground6.tsx"],"sourcesContent":["import React from \"react\";\nimport { checkBoundingBoxIntersection, getAllBoundingBoxIntersections, World, checkCollision } from \"../physics_engine/physics_engine\";\nimport * as THREE from \"three\";\nimport { Matrix3, MeshPhongMaterial, Vector3 } from \"three\";\nimport { Sphere } from \"../physics_engine/Sphere\";\nimport { Box } from \"../physics_engine/Box\";\nimport { OrbitControls } from \"three-orbitcontrols-ts\";\n\nconst CANVAS_WIDTH = 1000;\nconst CANVAS_HEIGHT = 500;\n\n// camera\nconst camera = new THREE.PerspectiveCamera(45, CANVAS_WIDTH / CANVAS_HEIGHT, 1, 1000);\ncamera.position.set(0, 0, CANVAS_HEIGHT / 4);\ncamera.up.set(0, 1, 0);\n\n// add lighting\nconst light_color = 0xffffff;\nconst intensity = 1;\nconst point_light = new THREE.PointLight(light_color, intensity);\npoint_light.position.set(50, 50, 50);\n\nconst ambient_light = new THREE.AmbientLight(light_color, 0.2);\n\nexport default class Playground6 extends React.Component {\n    private canvasRef: any;\n    private renderer: any;\n    private animationRequestID: any;\n    private scene: THREE.Scene;\n    private boxes: any[];\n\n    constructor(props: any) {\n        super(props);\n        this.canvasRef = React.createRef();\n        this.scene = new THREE.Scene();\n        this.boxes = [];\n\n        // graphics\n        this.renderer = null;\n        this.animationRequestID = null;\n\n        // bindings\n        this.onRestart = this.onRestart.bind(this);\n        this.onResume = this.onResume.bind(this);\n        this.onPause = this.onPause.bind(this);\n    }\n\n    componentDidMount(): void {\n        // graphics\n        this.renderer = new THREE.WebGLRenderer({ canvas: this.canvasRef.current, alpha: false })\n        this.renderer.setSize(CANVAS_WIDTH, CANVAS_HEIGHT);\n\n        // orbit controls\n        const controls = new OrbitControls(camera, this.renderer.domElement);\n\n        this.initialize();\n        this.onVisualize();\n    }\n\n    initialize() {\n        // cancel ongoing animation\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n\n        this.scene = new THREE.Scene();\n\n        // set up objects\n        const b = new Box(new Vector3(0, 0, 20), 30, 5, 5);\n        const b2 = new Box(new Vector3(-30, 20, 20), 5, 5, 20);\n        const b3 = new Box(new Vector3(30, 10, 20), 10, 10, 10);\n\n        const b4 = new Box(new Vector3(-70, 10, 20), 5, 5, 5);\n        b4.momentum = (new Vector3(20, 0, 0)).multiplyScalar(1/b4.inverseMass);\n\n        const b5 = new Box(new Vector3(30, -30, 20), 5, 10, 20);\n\n        this.boxes = [b, b2, b3, b4, b5];\n\n        for (let box of this.boxes) {\n            this.scene.add(box.mesh);\n            \n            // add bounding box mesh\n            this.scene.add(box.boundingBoxMesh);\n        }\n\n        // add lighting\n        this.scene.add(point_light, ambient_light);\n\n        // add gridHelper\n        const gridHelper = new THREE.GridHelper( 100, 10 );\n        gridHelper.rotateOnWorldAxis(new Vector3(1, 0, 0), Math.PI/2);\n        this.scene.add(gridHelper);\n    }\n\n    onVisualize() {\n        // cancel ongoing animation\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n\n        const scene = this.scene;\n        const boxes = this.boxes;\n\n        let boundingBoxIntersections = getAllBoundingBoxIntersections(boxes);\n        console.log(\"bounding box intersections: \", boundingBoxIntersections);\n        // let intersections = \n\n        const currentInstance = this;\n        function animate() {\n            currentInstance.animationRequestID = requestAnimationFrame(animate);\n\n            // physics step\n            for (let box of boxes) {\n                box.integrate(1/60);\n            }\n\n            // get bounding box intersections\n            boundingBoxIntersections = getAllBoundingBoxIntersections(boxes);\n\n            // graphics step\n            for (let box of boxes) {\n                // update position and rotation of the box mesh\n                box.updateMesh();\n                box.updateBoundingBoxMesh();\n\n                // clear bounding box color\n                box.mesh.material = new THREE.MeshPhongMaterial({ color: 0x00bcd6 });\n                box.boundingBoxMesh.material = new THREE.LineBasicMaterial({ color: 0xffffff });\n            }\n\n            // color the bound boxes of intersecting boxes\n            for(let i = 0; i < boundingBoxIntersections.length; i++) {\n                const a = boundingBoxIntersections[i].a;\n                const b = boundingBoxIntersections[i].b;\n                a.boundingBoxMesh.material = new THREE.LineBasicMaterial({ color: 0xff0000 });\n                b.boundingBoxMesh.material = new THREE.LineBasicMaterial({ color: 0xff0000 });\n\n                // check for collisions and color them\n                if (checkCollision(a, b)) {\n                    const red_material = new THREE.MeshPhongMaterial({ color: 0xff0000 });\n                    a.mesh.material = red_material;\n                    b.mesh.material = red_material;\n                }\n            }\n            currentInstance.renderer.render(scene, camera);\n        }\n        animate();\n    }\n\n    onRestart(): void {\n        this.initialize();\n        this.onVisualize();\n    }\n\n    onResume(): void {\n        this.onVisualize();\n    }\n\n    onPause(): void {\n        // cancel ongoing animation\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"playground\">\n                <h2>Playground 6 page desu...</h2>\n                <button onClick={this.onRestart}>Restart</button>\n                <button onClick={this.onResume}>Resume</button>\n                <button onClick={this.onPause}>Pause</button>\n                <div id=\"canvas_container\">\n                    <canvas ref={this.canvasRef} width={CANVAS_WIDTH} height={CANVAS_HEIGHT} />\n                </div>\n            </div>\n        )\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}