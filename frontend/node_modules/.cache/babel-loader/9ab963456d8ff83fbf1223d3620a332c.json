{"ast":null,"code":"import { Vector3 } from \"three\";\nimport * as THREE from \"three\";\nimport { Sphere } from \"./Sphere\";\nconst CANVAS_WIDTH = 1000;\nconst CANVAS_HEIGHT = 600;\nexport class World {\n  constructor(canvas) {\n    this.canvas = canvas;\n    this.objects = [];\n    this.currentLoopInterval = null;\n    this.objects = [];\n  }\n\n  startGameLoop() {\n    const s = new Sphere(new Vector3(0, 0, 0), 1);\n    this.clearCurrentLoop();\n    let i = 0; // this.currentLoopInterval = setInterval(() => {i++; console.log(i)}, 1000);\n\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, CANVAS_WIDTH / CANVAS_HEIGHT, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      canvas: this.canvas,\n      alpha: true\n    });\n    renderer.setSize(CANVAS_HEIGHT, CANVAS_WIDTH);\n    const sphereGeometry = new THREE.SphereGeometry(1);\n    const material = new THREE.MeshBasicMaterial({\n      color: 0xffff00\n    });\n    const sphere = new THREE.Mesh(sphereGeometry, material);\n    scene.add(sphere);\n\n    function animate() {\n      requestAnimationFrame(animate);\n      console.log('hi');\n      renderer.render(scene, camera);\n    }\n\n    animate();\n  }\n\n  runLoop() {\n    let i = 0;\n    console.log(\"clearing: \", this.currentLoopInterval);\n    clearInterval(this.currentLoopInterval);\n    this.currentLoopInterval = setInterval(() => {\n      i++;\n      console.log(i);\n    }, 1000);\n  }\n\n  clearCurrentLoop() {\n    clearInterval(this.currentLoopInterval);\n  }\n\n  test() {\n    const s = new Sphere(new Vector3(0, 0, 0), 1);\n    this.objects.push(s);\n    console.log(\"hi\");\n    console.log(this.objects);\n  }\n\n}","map":{"version":3,"names":["Vector3","THREE","Sphere","CANVAS_WIDTH","CANVAS_HEIGHT","World","constructor","canvas","objects","currentLoopInterval","startGameLoop","s","clearCurrentLoop","i","scene","Scene","camera","PerspectiveCamera","renderer","WebGLRenderer","alpha","setSize","sphereGeometry","SphereGeometry","material","MeshBasicMaterial","color","sphere","Mesh","add","animate","requestAnimationFrame","console","log","render","runLoop","clearInterval","setInterval","test","push"],"sources":["/Users/danny/Github/physics_engine_for_the_web/frontend/src/physics_engine/physics_engine.ts"],"sourcesContent":["import { Vector3 } from \"three\";\nimport * as THREE from \"three\";\nimport { Sphere } from \"./Sphere\";\nimport { createRenderer } from \"react-dom/test-utils\";\n\nconst CANVAS_WIDTH = 1000;\nconst CANVAS_HEIGHT = 600;\n\nexport class World {\n    private objects: any[] = [];\n    private currentLoopInterval: any = null;\n\n    constructor(private canvas: HTMLCanvasElement) {\n        this.objects = [];\n    }\n\n    startGameLoop(): void {\n        const s = new Sphere(new Vector3(0, 0, 0), 1);\n\n        this.clearCurrentLoop();\n\n        let i = 0;\n        // this.currentLoopInterval = setInterval(() => {i++; console.log(i)}, 1000);\n\n        const scene = new THREE.Scene();\n        const camera = new THREE.PerspectiveCamera(75, CANVAS_WIDTH / CANVAS_HEIGHT, 0.1, 1000);\n        \n        const renderer = new THREE.WebGLRenderer({ canvas: this.canvas, alpha: true });\n        renderer.setSize(CANVAS_HEIGHT, CANVAS_WIDTH);\n\n        const sphereGeometry = new THREE.SphereGeometry(1);\n        const material = new THREE.MeshBasicMaterial({color: 0xffff00});\n        const sphere = new THREE.Mesh(sphereGeometry, material);\n\n        scene.add(sphere);\n\n        function animate(): void {\n            requestAnimationFrame(animate);\n            console.log('hi');\n            renderer.render(scene, camera);\n        }\n        animate();\n    }\n\n    runLoop(): void {\n        let i = 0;\n        console.log(\"clearing: \", this.currentLoopInterval);\n        clearInterval(this.currentLoopInterval);\n        this.currentLoopInterval = setInterval(() => {i++; console.log(i)}, 1000);\n    }\n\n    clearCurrentLoop(): void {\n        clearInterval(this.currentLoopInterval);\n    }\n\n    test(): void {\n        const s = new Sphere(new Vector3(0, 0, 0), 1);\n        this.objects.push(s);\n        console.log(\"hi\");\n        console.log(this.objects);\n    }\n}"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,UAAvB;AAGA,MAAMC,YAAY,GAAG,IAArB;AACA,MAAMC,aAAa,GAAG,GAAtB;AAEA,OAAO,MAAMC,KAAN,CAAY;EAIfC,WAAW,CAASC,MAAT,EAAoC;IAAA,KAA3BA,MAA2B,GAA3BA,MAA2B;IAAA,KAHvCC,OAGuC,GAHtB,EAGsB;IAAA,KAFvCC,mBAEuC,GAFZ,IAEY;IAC3C,KAAKD,OAAL,GAAe,EAAf;EACH;;EAEDE,aAAa,GAAS;IAClB,MAAMC,CAAC,GAAG,IAAIT,MAAJ,CAAW,IAAIF,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAX,EAAiC,CAAjC,CAAV;IAEA,KAAKY,gBAAL;IAEA,IAAIC,CAAC,GAAG,CAAR,CALkB,CAMlB;;IAEA,MAAMC,KAAK,GAAG,IAAIb,KAAK,CAACc,KAAV,EAAd;IACA,MAAMC,MAAM,GAAG,IAAIf,KAAK,CAACgB,iBAAV,CAA4B,EAA5B,EAAgCd,YAAY,GAAGC,aAA/C,EAA8D,GAA9D,EAAmE,IAAnE,CAAf;IAEA,MAAMc,QAAQ,GAAG,IAAIjB,KAAK,CAACkB,aAAV,CAAwB;MAAEZ,MAAM,EAAE,KAAKA,MAAf;MAAuBa,KAAK,EAAE;IAA9B,CAAxB,CAAjB;IACAF,QAAQ,CAACG,OAAT,CAAiBjB,aAAjB,EAAgCD,YAAhC;IAEA,MAAMmB,cAAc,GAAG,IAAIrB,KAAK,CAACsB,cAAV,CAAyB,CAAzB,CAAvB;IACA,MAAMC,QAAQ,GAAG,IAAIvB,KAAK,CAACwB,iBAAV,CAA4B;MAACC,KAAK,EAAE;IAAR,CAA5B,CAAjB;IACA,MAAMC,MAAM,GAAG,IAAI1B,KAAK,CAAC2B,IAAV,CAAeN,cAAf,EAA+BE,QAA/B,CAAf;IAEAV,KAAK,CAACe,GAAN,CAAUF,MAAV;;IAEA,SAASG,OAAT,GAAyB;MACrBC,qBAAqB,CAACD,OAAD,CAArB;MACAE,OAAO,CAACC,GAAR,CAAY,IAAZ;MACAf,QAAQ,CAACgB,MAAT,CAAgBpB,KAAhB,EAAuBE,MAAvB;IACH;;IACDc,OAAO;EACV;;EAEDK,OAAO,GAAS;IACZ,IAAItB,CAAC,GAAG,CAAR;IACAmB,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B,KAAKxB,mBAA/B;IACA2B,aAAa,CAAC,KAAK3B,mBAAN,CAAb;IACA,KAAKA,mBAAL,GAA2B4B,WAAW,CAAC,MAAM;MAACxB,CAAC;MAAImB,OAAO,CAACC,GAAR,CAAYpB,CAAZ;IAAe,CAA5B,EAA8B,IAA9B,CAAtC;EACH;;EAEDD,gBAAgB,GAAS;IACrBwB,aAAa,CAAC,KAAK3B,mBAAN,CAAb;EACH;;EAED6B,IAAI,GAAS;IACT,MAAM3B,CAAC,GAAG,IAAIT,MAAJ,CAAW,IAAIF,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAX,EAAiC,CAAjC,CAAV;IACA,KAAKQ,OAAL,CAAa+B,IAAb,CAAkB5B,CAAlB;IACAqB,OAAO,CAACC,GAAR,CAAY,IAAZ;IACAD,OAAO,CAACC,GAAR,CAAY,KAAKzB,OAAjB;EACH;;AApDc"},"metadata":{},"sourceType":"module"}