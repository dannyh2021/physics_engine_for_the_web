{"ast":null,"code":"import { Matrix3 } from \"three\";\n/**\n* R = R_z(phi) R_y(theta) R_x(psi)\n* @param rotationMatrix assumes valid rotation matrix\n* @return JSON of euler angles psi, theta, and phi {psi: number, theta: number, phi: number}\n*/\n\nexport function getEulerAngles(rotationMatrix) {\n  const elements = rotationMatrix.elements;\n  const r_11 = elements[0];\n  const r_12 = elements[3];\n  const r_13 = elements[6];\n  const r_21 = elements[1];\n  const r_31 = elements[2];\n  const r_32 = elements[5];\n  const r_33 = elements[8];\n  let psi;\n  let theta;\n  let phi;\n\n  if (!(r_31 === 1 || r_31 === -1)) {\n    theta = -Math.asin(r_31);\n    psi = Math.atan2(r_32 / Math.cos(theta), r_33 / Math.cos(theta));\n    phi = Math.atan2(r_21 / Math.cos(theta), r_11 / Math.cos(theta));\n  } else {\n    phi = 0;\n\n    if (r_31 === -1) {\n      theta = Math.PI / 2;\n      psi = phi + Math.atan2(r_12, r_13);\n    } else {\n      theta = -Math.PI / 2;\n      psi = -phi + Math.atan2(-r_12, -r_13);\n    }\n  }\n\n  const angles = {\n    psi: psi,\n    theta: theta,\n    phi: phi\n  };\n  return angles;\n}\nexport function xRotationMatrix3(angle) {\n  const c = Math.cos(angle);\n  const s = Math.sin(angle);\n  const m = new Matrix3();\n  m.set(1, 0, 0, 0, c, -s, 0, s, c);\n  return m;\n}\nexport function yRotationMatrix3(angle) {\n  const c = Math.cos(angle);\n  const s = Math.sin(angle);\n  const m = new Matrix3();\n  m.set(c, 0, s, 0, 1, 0, -s, 0, c);\n  return m;\n}\nexport function zRotationMatrix3(angle) {\n  const c = Math.cos(angle);\n  const s = Math.sin(angle);\n  const m = new Matrix3();\n  m.set(c, -s, 0, s, c, 0, 0, 0, 1);\n  return m;\n}","map":{"version":3,"names":["Matrix3","getEulerAngles","rotationMatrix","elements","r_11","r_12","r_13","r_21","r_31","r_32","r_33","psi","theta","phi","Math","asin","atan2","cos","PI","angles","xRotationMatrix3","angle","c","s","sin","m","set","yRotationMatrix3","zRotationMatrix3"],"sources":["/Users/danny/Github/physics_engine_for_the_web/frontend/src/physics_engine/math_library.ts"],"sourcesContent":["import { Matrix3 } from \"three\";\n\n/**\n* R = R_z(phi) R_y(theta) R_x(psi)\n* @param rotationMatrix assumes valid rotation matrix\n* @return JSON of euler angles psi, theta, and phi {psi: number, theta: number, phi: number}\n*/\nexport function getEulerAngles(rotationMatrix: Matrix3) {\n   const elements = rotationMatrix.elements;\n   const r_11 = elements[0];\n   const r_12 = elements[3];\n   const r_13 = elements[6];\n   const r_21 = elements[1];\n   const r_31 = elements[2];\n   const r_32 = elements[5];\n   const r_33 = elements[8];\n\n   let psi: number;\n   let theta: number;\n   let phi: number;\n\n   if (!(r_31 === 1 || r_31 === -1)) {\n       theta = - Math.asin(r_31);\n\n       psi = Math.atan2(r_32/Math.cos(theta), r_33/Math.cos(theta));\n\n       phi = Math.atan2(r_21/Math.cos(theta), r_11/Math.cos(theta));\n   } else {\n       phi = 0;\n\n       if (r_31 === -1) {\n           theta = Math.PI/2;\n           psi = phi + Math.atan2(r_12, r_13);\n       } else {\n           theta = -Math.PI/2;\n           psi = -phi + Math.atan2(-r_12, -r_13);\n       }\n   }\n\n   const angles = {psi: psi, theta: theta, phi: phi};\n   return angles;\n}\n\nexport function xRotationMatrix3(angle: number) {\n    const c = Math.cos(angle);\n    const s = Math.sin(angle);\n\n    const m = new Matrix3()\n    m.set(\n        1, 0, 0,\n        0, c, -s,\n        0, s, c\n    );\n    return m;\n}\n\nexport function yRotationMatrix3(angle: number) {\n    const c = Math.cos(angle);\n    const s = Math.sin(angle);\n\n    const m = new Matrix3();\n    m.set(\n        c, 0, s,\n        0, 1, 0,\n        -s, 0, c,\n    );\n    return m;\n}\n\nexport function zRotationMatrix3(angle: number) {\n    const c = Math.cos(angle);\n    const s = Math.sin(angle);\n\n    const m = new Matrix3();\n    m.set(\n        c, -s, 0,\n        s, c, 0,\n        0, 0, 1,\n    );\n    return m;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}