{"ast":null,"code":"import { Vector3 } from \"three\";\nimport { Sphere } from \"./Sphere\"; // import { Sphere } from \"three\";\n\nexport class World {\n  constructor() {\n    this.objects = [];\n    this.currentLoopInterval = null;\n    this.characterForce = void 0;\n    this.objects = [];\n    this.characterForce = new Vector3(0, 0, 0);\n  }\n\n  updatePositions() {\n    for (let i = 0; i < this.objects.length; i++) {\n      this.updatePositionOfSphere(this.objects[i], 0.01);\n      console.log(\"updated \", i, this.objects[i].position);\n    }\n  } // updates position of object based on speed.\n\n\n  updatePositionOfSphere(s, dt) {\n    s.position.addScaledVector(s.velocity, 0.01);\n  }\n\n  startGameLoop() {\n    const s = new Sphere(new Vector3(0, 0, 0), 3);\n    const s2 = new Sphere(new Vector3(5, 0, 0), 3);\n    const s3 = new Sphere(new Vector3(0, 5, 0), 3);\n    this.objects = [];\n    this.objects.push(s); //this.objects.push(s2);\n    //this.objects.push(s3);\n\n    this.clearCurrentLoop();\n    let lastCalledTime = performance.now(); // returns timestamp in ms\n\n    let fps = 0;\n    let times = [];\n    let i = 0; // this.currentLoopInterval = setInterval(() => {i++; console.log(i)}, 1000);\n\n    const currentInstance = this;\n\n    function animate() {\n      requestAnimationFrame(animate);\n      currentInstance.updatePositions();\n    }\n\n    animate();\n  }\n\n  getObjects() {\n    return this.objects;\n  }\n\n  detectCollisions() {}\n\n  clearCurrentLoop() {\n    clearInterval(this.currentLoopInterval);\n  }\n\n}","map":{"version":3,"names":["Vector3","Sphere","World","constructor","objects","currentLoopInterval","characterForce","updatePositions","i","length","updatePositionOfSphere","console","log","position","s","dt","addScaledVector","velocity","startGameLoop","s2","s3","push","clearCurrentLoop","lastCalledTime","performance","now","fps","times","currentInstance","animate","requestAnimationFrame","getObjects","detectCollisions","clearInterval"],"sources":["/Users/danny/Github/physics_engine_for_the_web/frontend/src/physics_engine/physics_engine.ts"],"sourcesContent":["import { Vector3 } from \"three\";\nimport * as THREE from \"three\";\nimport { Sphere } from \"./Sphere\";\n// import { Sphere } from \"three\";\n\nexport class World {\n    private objects: any[] = [];\n    private currentLoopInterval: any = null;\n\n    private characterForce: Vector3;\n\n    constructor() {\n        this.objects = [];\n\n        this.characterForce = new Vector3(0, 0, 0);\n    }\n\n    updatePositions(): void {\n        for (let i = 0; i < this.objects.length; i++) {\n            this.updatePositionOfSphere(this.objects[i], 0.01);\n            console.log(\"updated \", i, this.objects[i].position);\n        }\n    }\n\n    // updates position of object based on speed.\n    updatePositionOfSphere(s: Sphere, dt: number): void {\n        s.position.addScaledVector(s.velocity, 0.01);\n    }\n\n    startGameLoop(): void {\n        const s = new Sphere(new Vector3(0, 0, 0), 3);\n        const s2 = new Sphere(new Vector3(5, 0, 0), 3);\n        const s3 = new Sphere(new Vector3(0, 5, 0), 3);\n        \n        this.objects = [];\n        this.objects.push(s);\n        //this.objects.push(s2);\n        //this.objects.push(s3);\n\n        this.clearCurrentLoop();\n\n        let lastCalledTime = performance.now() // returns timestamp in ms\n        let fps = 0;\n        let times = [];\n\n        let i = 0;\n        // this.currentLoopInterval = setInterval(() => {i++; console.log(i)}, 1000);\n\n        const currentInstance = this;\n        function animate(): void {\n            requestAnimationFrame(animate);\n            currentInstance.updatePositions();\n        }\n        animate();\n    }\n\n    getObjects(): any[] {\n        return this.objects;\n    }\n\n    detectCollisions(): void {\n\n    }\n\n    clearCurrentLoop(): void {\n        clearInterval(this.currentLoopInterval);\n    }\n}"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AAEA,SAASC,MAAT,QAAuB,UAAvB,C,CACA;;AAEA,OAAO,MAAMC,KAAN,CAAY;EAMfC,WAAW,GAAG;IAAA,KALNC,OAKM,GALW,EAKX;IAAA,KAJNC,mBAIM,GAJqB,IAIrB;IAAA,KAFNC,cAEM;IACV,KAAKF,OAAL,GAAe,EAAf;IAEA,KAAKE,cAAL,GAAsB,IAAIN,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAtB;EACH;;EAEDO,eAAe,GAAS;IACpB,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKJ,OAAL,CAAaK,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;MAC1C,KAAKE,sBAAL,CAA4B,KAAKN,OAAL,CAAaI,CAAb,CAA5B,EAA6C,IAA7C;MACAG,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBJ,CAAxB,EAA2B,KAAKJ,OAAL,CAAaI,CAAb,EAAgBK,QAA3C;IACH;EACJ,CAjBc,CAmBf;;;EACAH,sBAAsB,CAACI,CAAD,EAAYC,EAAZ,EAA8B;IAChDD,CAAC,CAACD,QAAF,CAAWG,eAAX,CAA2BF,CAAC,CAACG,QAA7B,EAAuC,IAAvC;EACH;;EAEDC,aAAa,GAAS;IAClB,MAAMJ,CAAC,GAAG,IAAIb,MAAJ,CAAW,IAAID,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAX,EAAiC,CAAjC,CAAV;IACA,MAAMmB,EAAE,GAAG,IAAIlB,MAAJ,CAAW,IAAID,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAX,EAAiC,CAAjC,CAAX;IACA,MAAMoB,EAAE,GAAG,IAAInB,MAAJ,CAAW,IAAID,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAX,EAAiC,CAAjC,CAAX;IAEA,KAAKI,OAAL,GAAe,EAAf;IACA,KAAKA,OAAL,CAAaiB,IAAb,CAAkBP,CAAlB,EANkB,CAOlB;IACA;;IAEA,KAAKQ,gBAAL;IAEA,IAAIC,cAAc,GAAGC,WAAW,CAACC,GAAZ,EAArB,CAZkB,CAYqB;;IACvC,IAAIC,GAAG,GAAG,CAAV;IACA,IAAIC,KAAK,GAAG,EAAZ;IAEA,IAAInB,CAAC,GAAG,CAAR,CAhBkB,CAiBlB;;IAEA,MAAMoB,eAAe,GAAG,IAAxB;;IACA,SAASC,OAAT,GAAyB;MACrBC,qBAAqB,CAACD,OAAD,CAArB;MACAD,eAAe,CAACrB,eAAhB;IACH;;IACDsB,OAAO;EACV;;EAEDE,UAAU,GAAU;IAChB,OAAO,KAAK3B,OAAZ;EACH;;EAED4B,gBAAgB,GAAS,CAExB;;EAEDV,gBAAgB,GAAS;IACrBW,aAAa,CAAC,KAAK5B,mBAAN,CAAb;EACH;;AA7Dc"},"metadata":{},"sourceType":"module"}