{"ast":null,"code":"import { Matrix3, Vector3 } from \"three\";\nimport { Sphere } from \"./Sphere\";\nimport { Box } from \"./Box\";\nimport { Plane } from \"./Plane\";\nexport class World {\n  // 0 is fully inelastic, 1 is fully elastic\n  // time step in seconds\n  constructor() {\n    this.objects = void 0;\n    this.coefficient_of_restitution = 1;\n    this.dt = 1 / 60;\n    this.objects = [];\n  }\n\n  addObject(obj) {\n    this.objects.push(obj);\n  }\n\n  getAllBoundingBoxIntersections() {\n    // for now just sort against x-axis. Slightly better is to update axis based on one with highest variance\n    // worst case is still O(n^2)\n    function compareBoundingBoxes(a, b) {\n      const a_min = a.position.x - a.boundingBox.x / 2;\n      const b_min = b.position.x - b.boundingBox.x / 2;\n      return a_min - b_min;\n    } // sort objects along x-axis\n\n\n    const objectsCopy = [...this.objects];\n    objectsCopy.sort(compareBoundingBoxes); // sweep the array for collisions\n\n    const intersections = [];\n\n    for (let i = 0; i < objectsCopy.length - 1; i++) {\n      // test against all possible overlapping boxes following the current one.\n      for (let j = i + 1; j < objectsCopy.length; j++) {\n        // stop testing when AABBs are beyond the current AABB\n        const i_max = objectsCopy[i].position.x + objectsCopy[i].boundingBox.x / 2;\n        const j_min = objectsCopy[j].position.x - objectsCopy[j].boundingBox.x / 2;\n\n        if (j_min > i_max) {\n          break;\n        }\n\n        if (checkBoundingBoxIntersection(objectsCopy[i], objectsCopy[j])) {\n          intersections.push({\n            a: objectsCopy[i],\n            b: objectsCopy[j]\n          });\n        }\n      }\n    }\n\n    return intersections;\n  }\n\n  detectAndResolveCollisions() {\n    const boundingBoxIntersections = this.getAllBoundingBoxIntersections();\n  }\n\n  integrateObjects(duration) {\n    for (let object of this.objects) {\n      if (object instanceof Plane) {\n        continue;\n      }\n\n      object.integrate(duration);\n    }\n  }\n\n  updateMeshes() {\n    for (let object of this.objects) {\n      if (object instanceof Plane) {\n        continue;\n      }\n\n      object.updateMesh();\n      object.updateBoundingBoxMesh();\n    }\n  }\n\n}\n/**\n * checks if the bounding box of two objects intersect\n * @param a the first object\n * @param b the other object\n */\n\nexport function checkBoundingBoxIntersection(a, b) {\n  // create intervals\n  const a_x_min = a.position.x - a.boundingBox.x / 2;\n  const a_x_max = a.position.x + a.boundingBox.x / 2;\n  const a_y_min = a.position.y - a.boundingBox.y / 2;\n  const a_y_max = a.position.y + a.boundingBox.y / 2;\n  const a_z_min = a.position.z - a.boundingBox.z / 2;\n  const a_z_max = a.position.z + a.boundingBox.z / 2;\n  const b_x_min = b.position.x - b.boundingBox.x / 2;\n  const b_x_max = b.position.x + b.boundingBox.x / 2;\n  const b_y_min = b.position.y - b.boundingBox.y / 2;\n  const b_y_max = b.position.y + b.boundingBox.y / 2;\n  const b_z_min = b.position.z - b.boundingBox.z / 2;\n  const b_z_max = b.position.z + b.boundingBox.z / 2; // intersecting if all intervals are intersecting\n\n  if (a_x_min < b_x_max && b_x_min < a_x_max && a_y_min < b_y_max && b_y_min < a_y_max && a_z_min < b_z_max && b_z_min < a_z_max) {\n    return true;\n  }\n\n  return false;\n} // returns true if the two objects are intersecting\n\nexport function checkCollision(a, b) {\n  if (a instanceof Box && b instanceof Box) {\n    return checkCollisionBoxes(a, b);\n  } else if (a instanceof Box && b instanceof Sphere) {\n    return checkCollisionBoxAndSphere(a, b);\n  } else if (a instanceof Box && b instanceof Plane) {\n    return checkCollisionBoxAndPlane(a, b);\n  } else if (a instanceof Sphere && b instanceof Box) {\n    return checkCollisionBoxAndSphere(b, a);\n  } else if (a instanceof Sphere && b instanceof Sphere) {\n    return checkCollisionSpheres(a, b);\n  } else if (a instanceof Sphere && b instanceof Plane) {\n    return checkCollisionSphereAndPlane(a, b);\n  } else if (a instanceof Plane && b instanceof Box) {\n    return checkCollisionBoxAndPlane(b, a);\n  } else if (a instanceof Plane && b instanceof Sphere) {\n    return checkCollisionSphereAndPlane(b, a);\n  } else {\n    console.error(\"checking collision between these types not implemented.\");\n  }\n}\nexport function checkCollisionBoxes(a, b) {\n  // two convex objects don't collide iff there exists a separating plane between them\n  // search for separating plane.\n  // either its contain a face of one polyhedra or it contains an edge of one polyhedra and is parallel to the edge of the other polyhedra.\n  const a_coordinateAxes = getCoordinateAxes(a);\n  const b_coordinateAxes = getCoordinateAxes(b); // check the 6 face axes\n\n  for (let faceAxis of a_coordinateAxes) {\n    if (separatingAxisPenetration(a, b, faceAxis) < 0) {\n      return false;\n    }\n  }\n\n  for (let faceAxis of b_coordinateAxes) {\n    if (separatingAxisPenetration(a, b, faceAxis) < 0) {\n      return false;\n    }\n  } // check the 9 edge-edge axes\n\n\n  for (let a_axis of a_coordinateAxes) {\n    for (let b_axis of b_coordinateAxes) {\n      let m = a_axis.clone().cross(b_axis).normalize();\n\n      if (m.length() > 0) {\n        // note to self: should use epsilon when checking for zero vector to  improve stability\n        if (separatingAxisPenetration(a, b, m) < 0) {\n          return false;\n        }\n      } else {\n        // for now, ignore case where the corresponding edges are parallel.\n        continue;\n      }\n    }\n  }\n\n  return true;\n}\nexport function checkCollisionSpheres(a, b) {\n  // two spheres intersect if the distance between their centers is not greater than the sum of their radii\n  const d = a.position.clone().sub(b.position).length();\n  return d <= a.radius + b.radius;\n}\nexport function checkCollisionSphereAndPlane(sphere, plane) {\n  const relativePosition = sphere.position.clone().sub(plane.position);\n  const d = relativePosition.dot(plane.normal); // distance to center of sphere, negative if center is below plane.\n\n  return d <= sphere.radius;\n}\nexport function checkCollisionBoxAndSphere(box, sphere) {\n  // convert sphere center to box coordinate space\n  const inverseRotation = box.rotation.clone();\n  let sphereCenter = sphere.position.clone().sub(box.position).applyQuaternion(inverseRotation); // Clamp each coordinate to the box.\n\n  const closestPoint = sphereCenter.clone();\n  closestPoint.x = Math.max(Math.min(closestPoint.x, box.width / 2), -box.width / 2);\n  closestPoint.y = Math.max(Math.min(closestPoint.y, box.length / 2), -box.length / 2);\n  closestPoint.z = Math.max(Math.min(closestPoint.z, box.height / 2), -box.height / 2); // check if they're in contact\n\n  const distance = sphereCenter.clone().sub(closestPoint).length();\n  return distance < sphere.radius;\n}\nexport function checkCollisionBoxAndPlane(box, plane) {\n  const vertices = getVertices(box);\n\n  for (let v of vertices) {\n    const relative_position = v.clone().sub(plane.position);\n    const d = relative_position.dot(plane.normal);\n\n    if (d < 0) {\n      return true;\n    }\n  }\n\n  return false;\n}\nexport function getAllContacts(boundingBoxIntersections) {\n  const contacts = [];\n\n  for (let i = 0; i < boundingBoxIntersections.length; i++) {\n    const a = boundingBoxIntersections[i].a;\n    const b = boundingBoxIntersections[i].b; // check for collisions and color them\n\n    if (checkCollision(a, b)) {\n      const contact = getContactData(a, b);\n      contacts.push(contact);\n    }\n  }\n\n  return contacts;\n} // todo: refactor functions below\n\nexport function getContactData(a, b) {\n  if (a instanceof Box && b instanceof Box) {\n    return getContactDataBoxes(a, b);\n  } else if (a instanceof Box && b instanceof Sphere) {\n    return getContactDataBoxAndSphere(a, b);\n  } else if (a instanceof Box && b instanceof Plane) {\n    return getContactDataBoxAndPlane(a, b);\n  } else if (a instanceof Sphere && b instanceof Box) {\n    return getContactDataBoxAndSphere(b, a);\n  } else if (a instanceof Sphere && b instanceof Sphere) {\n    return getContactDataSpheres(a, b);\n  } else if (a instanceof Sphere && b instanceof Plane) {\n    return getContactDataSphereAndPlane(a, b);\n  } else if (a instanceof Plane && b instanceof Box) {\n    return getContactDataBoxAndPlane(b, a);\n  } else if (a instanceof Plane && b instanceof Sphere) {\n    return getContactDataSphereAndPlane(b, a);\n  } else {\n    console.error(\"getting contact data between these types not implemented.\");\n    return {\n      a: a,\n      b: b,\n      type: \"none\",\n      contactNormal: new Vector3(0, 0, 1),\n      penetration: 0,\n      contactPoint: new Vector3(0, 0, 0),\n      edge_a: {\n        a: new Vector3(0, 0, 0),\n        b: new Vector3(0, 0, 0)\n      },\n      edge_b: {\n        a: new Vector3(0, 0, 0),\n        b: new Vector3(0, 0, 0)\n      }\n    };\n  }\n} // note: all getContact functions assume the objects already intersect.\n// convention: contact data is of format {a, b, type, contactNormal, penetration, contactPoint, ...} where contactNormal points from b to a\n// get contact data for two colliding boxes, assuming collision\n\nfunction getContactDataBoxes(a, b) {\n  const vector_ab = b.position.clone().sub(a.position);\n  const a_coordinateAxes = getCoordinateAxes(a);\n  const b_coordinateAxes = getCoordinateAxes(b);\n  let smallestOverlap = Infinity;\n  let contact;\n\n  for (let a_axis of a_coordinateAxes) {\n    const overlap = separatingAxisPenetration(a, b, a_axis);\n\n    if (overlap < smallestOverlap) {\n      smallestOverlap = overlap; // set contact\n\n      const axis = a_axis.clone();\n\n      if (vector_ab.dot(axis) < 0) {\n        // orient axis to normal of the correct face.\n        axis.multiplyScalar(-1);\n      }\n\n      axis.normalize();\n      const vertex = getClosestVertex(a, b, axis);\n      contact = {\n        a: b,\n        b: a,\n        type: \"vertex-face\",\n        contactNormal: axis,\n        penetration: smallestOverlap,\n        contactPoint: vertex,\n        edge_a: {\n          a: new Vector3(0, 0, 0),\n          b: new Vector3(0, 0, 0)\n        },\n        edge_b: {\n          a: new Vector3(0, 0, 0),\n          b: new Vector3(0, 0, 0)\n        }\n      };\n    }\n  }\n\n  for (let b_axis of b_coordinateAxes) {\n    const overlap = separatingAxisPenetration(a, b, b_axis);\n\n    if (overlap < smallestOverlap) {\n      smallestOverlap = overlap; // set contact\n\n      const axis = b_axis.clone();\n\n      if (vector_ab.clone().dot(axis) > 0) {\n        // orient axis to normal of the correct face.\n        axis.multiplyScalar(-1);\n      }\n\n      axis.normalize();\n      const vertex = getClosestVertex(b, a, axis);\n      contact = {\n        a: a,\n        b: b,\n        type: \"vertex-face\",\n        contactNormal: axis,\n        penetration: smallestOverlap,\n        contactPoint: vertex,\n        edge_a: {\n          a: new Vector3(0, 0, 0),\n          b: new Vector3(0, 0, 0)\n        },\n        edge_b: {\n          a: new Vector3(0, 0, 0),\n          b: new Vector3(0, 0, 0)\n        }\n      };\n    }\n  }\n\n  for (let a_axis of a_coordinateAxes) {\n    for (let b_axis of b_coordinateAxes) {\n      let m = a_axis.clone().cross(b_axis).normalize();\n\n      if (m.length() > 0.005) {\n        // check parallel edges\n        const overlap = separatingAxisPenetration(a, b, m);\n\n        if (overlap < smallestOverlap) {\n          smallestOverlap = overlap; // set contact\n\n          const axis = m.clone();\n\n          if (vector_ab.clone().dot(axis) > 0) {\n            axis.multiplyScalar(-1);\n          }\n\n          axis.normalize();\n          const edge_a = getClosestEdge(b, a, a_axis, m);\n          const edge_b = getClosestEdge(a, b, b_axis, m);\n          contact = {\n            a: a,\n            b: b,\n            type: \"edge-edge\",\n            contactNormal: axis,\n            penetration: smallestOverlap,\n            contactPoint: getClosestPointBetweenTwoEdges(edge_a, edge_b),\n            edge_a: edge_a,\n            edge_b: edge_b\n          };\n        }\n      } else {\n        // for now, ignore case where the corresponding edges are parallel.\n        continue;\n      }\n    }\n  }\n\n  return contact;\n}\n\nfunction getContactDataBoxAndSphere(box, sphere) {\n  // convert sphere center to box coordinate space\n  const inverseRotation = box.rotation.clone();\n  let sphereCenter = sphere.position.clone().sub(box.position).applyQuaternion(inverseRotation); // Clamp each coordinate to the box.\n\n  let closestPoint = sphereCenter.clone();\n  closestPoint.x = Math.max(Math.min(closestPoint.x, box.width / 2), -box.width / 2);\n  closestPoint.y = Math.max(Math.min(closestPoint.y, box.length / 2), -box.length / 2);\n  closestPoint.z = Math.max(Math.min(closestPoint.z, box.height / 2), -box.height / 2);\n  const distance = sphereCenter.clone().sub(closestPoint).length();\n  const penetration = sphere.radius - distance; // convert back to world space\n\n  closestPoint.applyQuaternion(box.rotation).add(box.position);\n  const contactPoint = closestPoint;\n  const contactNormal = closestPoint.clone().sub(sphere.position.clone()).normalize();\n  const contact = {\n    a: box,\n    b: sphere,\n    type: \"vertex-face\",\n    contactNormal: contactNormal,\n    penetration: penetration,\n    contactPoint: contactPoint,\n    edge_a: {\n      a: new Vector3(0, 0, 0),\n      b: new Vector3(0, 0, 0)\n    },\n    edge_b: {\n      a: new Vector3(0, 0, 0),\n      b: new Vector3(0, 0, 0)\n    }\n  };\n  return contact;\n}\n\nfunction getContactDataSpheres(a, b) {\n  const v_ab = b.position.clone().sub(a.position);\n  const contactPoint = a.position.clone().add(v_ab.clone().multiplyScalar(a.radius).sub(v_ab.clone().multiplyScalar(b.radius)).multiplyScalar(0.5));\n  const penetration = a.radius - b.radius - v_ab.length();\n  const contactNormal = v_ab.clone().multiplyScalar(-1).normalize();\n  const contact = {\n    a: a,\n    b: b,\n    type: \"vertex-face\",\n    contactNormal: contactNormal,\n    penetration: penetration,\n    contactPoint: contactPoint,\n    edge_a: {\n      a: new Vector3(0, 0, 0),\n      b: new Vector3(0, 0, 0)\n    },\n    edge_b: {\n      a: new Vector3(0, 0, 0),\n      b: new Vector3(0, 0, 0)\n    }\n  };\n  return contact;\n}\n\nfunction getContactDataBoxAndPlane(box, plane) {\n  const vertices = getVertices(box);\n  let contactPoint = vertices[0];\n  let penetration = 0;\n\n  for (let v of vertices) {\n    const relative_position = v.clone().sub(plane.position);\n    const d = relative_position.dot(plane.normal);\n\n    if (d < penetration) {\n      contactPoint = v;\n      penetration = d;\n    }\n  }\n\n  const contact = {\n    a: box,\n    b: plane,\n    type: \"vertex-face\",\n    contactNormal: plane.normal.clone(),\n    penetration: penetration,\n    contactPoint: contactPoint,\n    edge_a: {\n      a: new Vector3(0, 0, 0),\n      b: new Vector3(0, 0, 0)\n    },\n    edge_b: {\n      a: new Vector3(0, 0, 0),\n      b: new Vector3(0, 0, 0)\n    }\n  };\n  return contact;\n}\n\nfunction getContactDataSphereAndPlane(sphere, plane) {\n  const relativePosition = sphere.position.clone().sub(plane.position);\n  const d = relativePosition.dot(plane.normal); // distance to center of sphere, negative if center is below plane.\n\n  const penetration = sphere.radius - d;\n  const contactPoint = sphere.position.clone().addScaledVector(plane.normal, -sphere.radius);\n  const contact = {\n    a: sphere,\n    b: plane,\n    type: \"vertex-face\",\n    contactNormal: plane.normal.clone(),\n    penetration: penetration,\n    contactPoint: contactPoint,\n    edge_a: {\n      a: new Vector3(0, 0, 0),\n      b: new Vector3(0, 0, 0)\n    },\n    edge_b: {\n      a: new Vector3(0, 0, 0),\n      b: new Vector3(0, 0, 0)\n    }\n  };\n  return contact;\n}\n\nconst coefficient_of_restitution = 0;\nexport function resolveCollision(contactData) {\n  const a = contactData.a;\n  const b = contactData.b;\n  const normal = contactData.contactNormal;\n\n  if (contactData.type === \"vertex-face\") {\n    console.log(\"resolving vertex-face contact\");\n    const vertex = contactData.contactPoint;\n    const r_a = vertex.clone().sub(a.position);\n    const r_b = vertex.clone().sub(b.position);\n    const vertexVelocity_a = a.velocity.clone().add(a.getAngularVelocity().cross(r_a));\n    const vertexVelocity_b = b.velocity.clone().add(b.getAngularVelocity().cross(r_b));\n    const relativeVelocity = normal.dot(vertexVelocity_a.clone().sub(vertexVelocity_b));\n\n    if (relativeVelocity < 0) {\n      console.log(\"colliding contact\");\n      console.log(\"contact: \", contactData);\n      const I_inverse_a = a.getInertia().invert();\n      const I_inverse_b = b.getInertia().invert();\n      const term1 = normal.dot(r_a.clone().cross(normal).applyMatrix3(I_inverse_a).cross(r_a));\n      const term2 = normal.dot(r_b.clone().cross(normal).applyMatrix3(I_inverse_b).cross(r_b));\n      const j = -(1 + coefficient_of_restitution) * relativeVelocity / (a.inverseMass + b.inverseMass + term1 + term2);\n      console.log(\"relative Velocity: \", relativeVelocity);\n      const impulse = normal.clone().multiplyScalar(j);\n      const impulse2 = normal.clone().multiplyScalar(-j);\n      a.applyImpulse(vertex, impulse);\n      b.applyImpulse(vertex, impulse2);\n    } else if (relativeVelocity === 0) {\n      console.log(\"resting contact\");\n    } else {\n      // ignore\n      console.log(\"leaving\");\n    }\n  } else if (contactData.type === \"edge-edge\") {\n    console.log(\"resolving edge-edge contact\");\n    console.log(\"edge_a\", contactData.edge_a);\n    console.log(\"edge_b\", contactData.edge_b);\n    console.log(\"contactNormal: \", contactData.contactNormal);\n    const vertex = getClosestPointBetweenTwoEdges(contactData.edge_a, contactData.edge_b);\n    const r_a = vertex.clone().sub(a.position);\n    const r_b = vertex.clone().sub(b.position);\n    const vertexVelocity_a = a.velocity.clone().add(a.getAngularVelocity().cross(r_a));\n    const vertexVelocity_b = b.velocity.clone().add(b.getAngularVelocity().cross(r_b));\n    const relativeVelocity = normal.dot(vertexVelocity_a.clone().sub(vertexVelocity_b));\n\n    if (relativeVelocity < 0) {\n      console.log(\"colliding contact\");\n      const I_inverse_a = a.getInertia().invert();\n      let I_inverse_b = b.getInertia().invert();\n      const term1 = normal.dot(r_a.clone().cross(normal).applyMatrix3(I_inverse_a).cross(r_a));\n      const term2 = normal.dot(r_b.clone().cross(normal).applyMatrix3(I_inverse_b).cross(r_b));\n      const j = -(1 + coefficient_of_restitution) * relativeVelocity / (a.inverseMass + b.inverseMass + term1 + term2);\n      const impulse = normal.clone().multiplyScalar(j);\n      const impulse2 = normal.clone().multiplyScalar(-j);\n      a.applyImpulse(vertex, impulse);\n      b.applyImpulse(vertex, impulse2);\n    } else if (relativeVelocity === 0) {\n      console.log(\"resting contact\");\n    } else {\n      // ignore\n      console.log(\"leaving\");\n    }\n  } else {\n    console.error(\"contactData type not recognized.\");\n    console.log(\"contact data: \", contactData);\n  }\n} // returns closest edge of box b\n// edge should be parallel to input edgeVector\n\nfunction getClosestEdge(a, b, edgeVector, separatingAxis) {\n  const x = separatingAxis.x;\n  const y = separatingAxis.y;\n  const z = separatingAxis.z;\n  const projectionMatrix = new Matrix3();\n  projectionMatrix.set(x * x, x * y, x * z, x * y, y * y, y * z, x * z, y * z, z * z);\n  const a_center = a.position.clone().applyMatrix3(projectionMatrix);\n  const b_edges = getEdges(b);\n  const parallel_b_edges = [];\n\n  for (let b_edge of b_edges) {\n    const b_edgeVector = b_edge.b.clone().sub(b_edge.a);\n\n    if (b_edgeVector.clone().cross(edgeVector).length() < 0.005) {\n      parallel_b_edges.push(b_edge);\n    }\n  }\n\n  let closestEdge = parallel_b_edges[0];\n  let closestDistance = closestEdge.a.clone().sub(a_center).length();\n\n  for (let b_edge of parallel_b_edges) {\n    const d = b_edge.a.clone().sub(a_center).length();\n\n    if (d < closestDistance) {\n      closestDistance = d;\n      closestEdge = b_edge;\n    }\n  }\n\n  return closestEdge;\n} // returns closest vertex of box b to face of box a\n\n\nfunction getClosestVertex(a, b, lineVector) {\n  const a_vertices = getVertices(a);\n  const b_vertices = getVertices(b);\n  const x = lineVector.x;\n  const y = lineVector.y;\n  const z = lineVector.z;\n  const projectionMatrix = new Matrix3();\n  projectionMatrix.set(x * x, x * y, x * z, x * y, y * y, y * z, x * z, y * z, z * z);\n  const a_center = a.position.clone().applyMatrix3(projectionMatrix);\n  let a_radius = 0;\n\n  for (let a_v of a_vertices) {\n    const a_v_projection = a_v.clone().applyMatrix3(projectionMatrix);\n    const r = a_v_projection.clone().sub(a_center).length();\n\n    if (r > a_radius) {\n      a_radius = r;\n    }\n  }\n\n  const b_center = b.position.clone().applyMatrix3(projectionMatrix);\n  let vertex = b_vertices[0];\n  let smallestDistanceToA = b_center.clone().sub(a_center).length() - a_radius;\n\n  for (let b_v of b_vertices) {\n    const b_v_projection = b_v.clone().applyMatrix3(projectionMatrix);\n    const d = b_v_projection.clone().sub(a_center).length() - a_radius;\n\n    if (d < smallestDistanceToA) {\n      smallestDistanceToA = d;\n      vertex = b_v;\n    }\n  }\n\n  return vertex;\n}\n\nfunction separatingAxisPenetration(a, b, lineVector) {\n  const x = lineVector.x;\n  const y = lineVector.y;\n  const z = lineVector.z;\n  const projectionMatrix = new Matrix3();\n  projectionMatrix.set(x * x, x * y, x * z, x * y, y * y, y * z, x * z, y * z, z * z);\n  const a_center = a.position.clone().applyMatrix3(projectionMatrix);\n  const b_center = b.position.clone().applyMatrix3(projectionMatrix);\n  const d = b_center.clone().sub(a_center).length();\n  const a_vertices = getVertices(a);\n  const b_vertices = getVertices(b);\n  let r_a = 0,\n      r_b = 0;\n\n  for (let a_v of a_vertices) {\n    const a_v_projection = a_v.applyMatrix3(projectionMatrix);\n    const r = a_center.clone().sub(a_v_projection).length();\n\n    if (r > r_a) {\n      r_a = r;\n    }\n  }\n\n  for (let b_v of b_vertices) {\n    const b_v_projection = b_v.applyMatrix3(projectionMatrix);\n    const r = b_center.clone().sub(b_v_projection).length();\n\n    if (r > r_b) {\n      r_b = r;\n    }\n  } // returns the overlap. positive indicates overlap, negative indicates separation.\n\n\n  return r_a + r_b - d;\n}\n\nfunction getClosestPointBetweenTwoEdges(e1, e2) {\n  const p1 = e1.a;\n  const p2 = e1.b;\n  const p3 = e2.a;\n  const p4 = e2.b;\n  const v12 = p2.clone().sub(p1);\n  const v34 = p4.clone().sub(p3);\n  const v13 = p3.clone().sub(p1);\n  let s, t; // terms\n\n  const R_1_squared = v12.dot(v12);\n  const R_2_squared = v34.dot(v34);\n  const D_4321 = v12.dot(v34);\n  const D_3121 = v12.dot(v13);\n  const D_4331 = v13.dot(v34);\n  const denominator = D_4321 * D_4321 - R_1_squared * R_2_squared;\n  s = (D_4321 * D_4331 - R_2_squared * D_3121) / denominator;\n  t = (R_1_squared * D_4331 - D_4321 * D_3121) / denominator;\n  s = Math.max(Math.min(s, 1), 0);\n  t = Math.max(Math.min(t, 1), 0);\n  const point_a = e1.a.clone().add(v12.clone().multiplyScalar(s));\n  const point_b = e2.a.clone().add(v34.clone().multiplyScalar(t));\n  return point_a.clone().add(point_b).multiplyScalar(1 / 2);\n}\n\nfunction getCoordinateAxes(box) {\n  const x = new Vector3(1, 0, 0),\n        y = new Vector3(0, 1, 0),\n        z = new Vector3(0, 0, 1);\n  const axes = [x, y, z];\n\n  for (let axis of axes) {\n    axis.applyQuaternion(box.rotation);\n  }\n\n  return axes;\n}\n\nfunction getVertices(box) {\n  const x = box.position.x;\n  const y = box.position.y;\n  const z = box.position.z;\n  const v1 = new Vector3(x - box.width / 2, y - box.length / 2, z - box.height / 2);\n  const v2 = new Vector3(x - box.width / 2, y + box.length / 2, z - box.height / 2);\n  const v3 = new Vector3(x + box.width / 2, y + box.length / 2, z - box.height / 2);\n  const v4 = new Vector3(x + box.width / 2, y - box.length / 2, z - box.height / 2);\n  const v5 = new Vector3(x - box.width / 2, y - box.length / 2, z + box.height / 2);\n  const v6 = new Vector3(x - box.width / 2, y + box.length / 2, z + box.height / 2);\n  const v7 = new Vector3(x + box.width / 2, y + box.length / 2, z + box.height / 2);\n  const v8 = new Vector3(x + box.width / 2, y - box.length / 2, z + box.height / 2);\n  const vertices = [v1, v2, v3, v4, v5, v6, v7, v8]; // rotate vertices\n\n  for (let vertex of vertices) {\n    // convert to body space, apply rotation, convert back to world space\n    vertex.sub(box.position);\n    vertex.applyQuaternion(box.rotation);\n    vertex.add(box.position);\n  }\n\n  return vertices;\n}\n\nfunction getEdges(box) {\n  const x = box.position.x;\n  const y = box.position.y;\n  const z = box.position.z;\n  const v1 = new Vector3(x - box.width / 2, y - box.length / 2, z - box.height / 2);\n  const v2 = new Vector3(x - box.width / 2, y + box.length / 2, z - box.height / 2);\n  const v3 = new Vector3(x + box.width / 2, y + box.length / 2, z - box.height / 2);\n  const v4 = new Vector3(x + box.width / 2, y - box.length / 2, z - box.height / 2);\n  const v5 = new Vector3(x - box.width / 2, y - box.length / 2, z + box.height / 2);\n  const v6 = new Vector3(x - box.width / 2, y + box.length / 2, z + box.height / 2);\n  const v7 = new Vector3(x + box.width / 2, y + box.length / 2, z + box.height / 2);\n  const v8 = new Vector3(x + box.width / 2, y - box.length / 2, z + box.height / 2);\n  const vertices = [v1, v2, v3, v4, v5, v6, v7, v8]; // rotate vertices\n\n  for (let vertex of vertices) {\n    // convert to body space, apply rotation, convert back to world space\n    vertex.sub(box.position);\n    vertex.applyQuaternion(box.rotation);\n    vertex.add(box.position);\n  }\n\n  const edges = [];\n  edges.push({\n    a: v1,\n    b: v2\n  });\n  edges.push({\n    a: v1,\n    b: v4\n  });\n  edges.push({\n    a: v1,\n    b: v5\n  });\n  edges.push({\n    a: v2,\n    b: v3\n  });\n  edges.push({\n    a: v2,\n    b: v6\n  });\n  edges.push({\n    a: v3,\n    b: v4\n  });\n  edges.push({\n    a: v3,\n    b: v7\n  });\n  edges.push({\n    a: v4,\n    b: v8\n  });\n  edges.push({\n    a: v5,\n    b: v6\n  });\n  edges.push({\n    a: v5,\n    b: v8\n  });\n  edges.push({\n    a: v6,\n    b: v7\n  });\n  edges.push({\n    a: v7,\n    b: v8\n  });\n  return edges;\n}\n\nexport function getAllBoundingBoxIntersections(objects) {\n  // for now just sort against x-axis. Slightly better is to update axis based on one with highest variance\n  // worst case is still O(n^2)\n  function compareBoundingBoxes(a, b) {\n    const a_min = a.position.x - a.boundingBox.x / 2;\n    const b_min = b.position.x - b.boundingBox.x / 2;\n    return a_min - b_min;\n  } // sort objects along x-axis\n\n\n  const objectsCopy = [...objects];\n  objectsCopy.sort(compareBoundingBoxes); // sweep the array for collisions\n\n  const intersections = [];\n\n  for (let i = 0; i < objectsCopy.length - 1; i++) {\n    // test against all possible overlapping boxes following the current one.\n    for (let j = i + 1; j < objectsCopy.length; j++) {\n      // stop testing when AABBs are beyond the current AABB\n      const i_max = objectsCopy[i].position.x + objectsCopy[i].boundingBox.x / 2;\n      const j_min = objectsCopy[j].position.x - objectsCopy[j].boundingBox.x / 2;\n\n      if (j_min > i_max) {\n        break;\n      }\n\n      if (checkBoundingBoxIntersection(objectsCopy[i], objectsCopy[j])) {\n        intersections.push({\n          a: objectsCopy[i],\n          b: objectsCopy[j]\n        });\n      }\n    }\n  }\n\n  return intersections;\n}\n/**\n * for symmetrical objects, valid separating axis iff sum the radii (half_widths) of the projected intervals is less than the distance between the centers\n * @param a \n * @param b \n * @param lineVector a unit vector describing the direction of the line\n * @returns true if the lineVector is a separating axis\n */\n\n/*export function testSeparatingAxis(a: Box, b: Box, lineVector: Vector3): boolean {\n    const x = lineVector.x;\n    const y = lineVector.y;\n    const z = lineVector.z;\n    const projectionMatrix = new Matrix3();\n    projectionMatrix.set(\n        x*x, x*y, x*z,\n        x*y, y*y, y*z,\n        x*z, y*z, z*z\n    );\n\n    const a_center = a.position.clone().applyMatrix3(projectionMatrix);\n    const b_center = b.position.clone().applyMatrix3(projectionMatrix);\n    const d = b_center.clone().sub(a_center).length();\n\n    const a_vertices = getVertices(a);\n    const b_vertices = getVertices(b);\n    \n    let r_a = 0, r_b = 0;\n    for (let a_v of a_vertices) {\n        const a_v_projection = a_v.applyMatrix3(projectionMatrix);\n        const r = a_center.clone().sub(a_v_projection).length()\n        if (r > r_a) {\n            r_a = r;\n        }\n    }\n    for (let b_v of b_vertices) {\n        const b_v_projection = b_v.applyMatrix3(projectionMatrix);\n        const r = b_center.clone().sub(b_v_projection).length()\n        if (r > r_b) {\n            r_b = r;\n        }\n    }\n    if (r_a + r_b < d) {\n        return true;\n    }\n\n    return false;\n}*/\n\n/*\nexport function checkCollisionBoxes(a: Box, b: Box): boolean {\n    // two convex objects don't collide iff there exists a separating plane between them\n\n    // search for separating plane.\n    // either its contain a face of one polyhedra or it contains an edge of one polyhedra and is parallel to the edge of the other polyhedra.\n    \n    const a_facePlanes = getFacePlanes(a);\n    for (let facePlane of a_facePlanes) {\n        if (testSeparatingAxis(a, b, facePlane.normal)) {\n            return false;\n        };\n    }\n    const b_facePlanes = getFacePlanes(b);\n    for (let facePlane of b_facePlanes) {\n        if (testSeparatingAxis(a, b, facePlane.normal)) {\n            return false;\n        }\n    }\n\n    const a_edges = getEdges(a);\n    const b_edges = getEdges(b);\n\n    for (let i = 0; i < a_edges.length; i++) {\n        for (let j = 0; j < b_edges.length; j++) {\n            const edge_i = a_edges[i].b.clone().sub(a_edges[i].a);\n            const edge_j = b_edges[j].b.clone().sub(b_edges[j].a);\n            let m = edge_i.clone().cross(edge_j);\n            if (m.length() !== 0) { // note to self: should use epsilon when checking for zero vector to improve stability\n                if (testSeparatingAxis(a, b, m)) {\n                    return false;\n                }\n            } else {\n                const edge_n = b_edges[j].b.clone().sub(a_edges[i].a);\n                m = edge_i.clone().cross(edge_n);\n                if (m.length() !== 0) {\n                    testSeparatingAxis(a, b, m);\n                } else {\n                    return true; // since edge_i and edge_2 are colinear\n                }\n            }\n        }\n    }\n\n    return true;\n}*/\n\n/*\nfunction getFaces(box: Box) {\n    const x = box.position.x;\n    const y = box.position.y;\n    const z = box.position.z;\n    const v1 = new Vector3(x - box.width/2, y - box.length/2, z - box.height/2);\n    const v2 = new Vector3(x - box.width/2, y + box.length/2, z - box.height/2);\n    const v3 = new Vector3(x + box.width/2, y + box.length/2, z - box.height/2);\n    const v4 = new Vector3(x + box.width/2, y - box.length/2, z - box.height/2);\n    const v5 = new Vector3(x - box.width/2, y - box.length/2, z + box.height/2);\n    const v6 = new Vector3(x - box.width/2, y + box.length/2, z + box.height/2);\n    const v7 = new Vector3(x + box.width/2, y + box.length/2, z + box.height/2);\n    const v8 = new Vector3(x + box.width/2, y - box.length/2, z + box.height/2);\n    const vertices = [v1, v2, v3, v4, v5, v6, v7, v8];\n\n    // rotate vertices\n    for (let vertex of vertices) {\n        // convert to body space, apply rotation, convert back to world space\n        vertex.sub(box.position);\n        vertex.applyQuaternion(box.rotation);\n        vertex.add(box.position);\n    }\n    \n    const f1 = { edges: [{a: v1, b: v2}, {a: v1, b: v4}, {a: v2, b: v3}, {a: v3, b: v4}] }; // bottom\n    const f2 = { edges: [{a: v5, b: v6}, {a: v5, b: v8}, {a: v6, b: v7}, {a: v7, b: v8}] }; // top\n    const f3 = { edges: [{a: v1, b: v2}, {a: v1, b: v5}, {a: v5, b: v6}, {a: v6, b: v2}] }; // left\n    const f4 = { edges: [{a: v4, b: v8}, {a: v4, b: v3}, {a: v8, b: v7}, {a: v7, b: v3}] }; // right\n    const f5 = { edges: [{a: v1, b: v4}, {a: v1, b: v5}, {a: v5, b: v8}, {a: v8, b: v4}] }; // front\n    const f6 = { edges: [{a: v2, b: v3}, {a: v2, b: v6}, {a: v6, b: v7}, {a: v7, b: v3}] }; // back\n    const faces = [f1, f2, f3, f4, f5, f6];\n    return faces;\n}*/\n\n/*\nexport function getAllBoundingBoxIntersections(boxes: Box[]) {\n    // create and sort intervals along x, y, and z\n    const x_intervals = [];\n    const y_intervals = [];\n    const z_intervals = [];\n    for(let box of boxes) {\n        const x_min = box.position.x - box.boundingBox.x/2;\n        const x_max = box.position.x + box.boundingBox.x/2;\n        x_intervals.push({ type: \"min\", value: x_min, object: box});\n        x_intervals.push({ type: \"max\", value: x_max, object: box});\n\n        \n        const y_min = box.position.y - box.boundingBox.y/2;\n        const y_max = box.position.y + box.boundingBox.y/2;\n        y_intervals.push({ type: \"min\", value: y_min, object: box});\n        y_intervals.push({ type: \"max\", value: y_max, object: box});\n\n        const z_min = box.position.z - box.boundingBox.z/2;\n        const z_max = box.position.z + box.boundingBox.z/2;\n        z_intervals.push({ type: \"min\", value: z_min, object: box});\n        z_intervals.push({ type: \"max\", value: z_max, object: box});\n    }\n    // note to self: switch to insertion sort and use normal merge sort only during the initialization frame\n    x_intervals.sort((a, b) => a.value - b.value);\n    //y_intervals.sort((a, b) => a.value - b.value);\n    //z_intervals.sort((a, b) => a.value - b.value);\n\n    // create a list of active intervals\n    const activeIntervals = [];\n}*/\n\n/*\nexport class World2 {\n    private objects: any[] = [];\n    private currentLoopInterval: any = null;\n\n    private characterForce: Vector3;\n\n    constructor() {\n        this.objects = [];\n\n        this.characterForce = new Vector3(0, 0, 0);\n    }\n\n    startLoop(): void {\n        const currentInstance = this;\n\n        // stop current loop if it exits\n        this.stopCurrentLoop();\n\n        let lastTimeCalled = performance.now();\n        let fps = 0;\n        let times: any[] = [];\n\n        function step() {\n            // calculate fps\n            const now = performance.now();\n            while (times.length > 0 && times[0] <= now - 1000) {\n                times.shift();\n            }\n            times.push(now);\n            fps = times.length;\n            // console.log(\"fps: \", fps);\n\n            for (let i = 0; i < currentInstance.objects.length; i++) {\n                currentInstance.objects[i].integrate(dt);\n            }\n        }\n\n        this.currentLoopInterval = setInterval(step, dt * 1000);\n    }\n\n    // Stops current loop if it exists.\n    stopCurrentLoop(): void {\n        if (this.currentLoopInterval) {\n            clearInterval(this.currentLoopInterval);\n        }\n    }\n\n    addObject(obj: any): void {\n        this.objects.push(obj);\n    }\n\n    getObjects(): any[] {\n        return this.objects;\n    }\n\n    updateCharacterForce(f: Vector3) {\n        this.characterForce = f;\n    }\n\n    detectCollisions(): void {\n\n    }\n\n    checkCollisionSpheres(s1: Sphere, s2: Sphere) {\n        const d = (s1.position.clone().sub(s2.position)).length(); // distance between centers\n\n        // collision if distance between spheres is smaller than sub of radiuses\n        if (d < (s1.radius + s2.radius)) {\n            return true;\n        }\n        return false;\n    }\n\n    resolveCollisionSpheres(s1: Sphere, s2: Sphere) {\n        // find unit vectors from s1 to s2 and s2 to s1\n        const u12 = (s2.position.clone().sub(s1.position)).normalize();\n        const u21 = u12.clone().multiplyScalar(-1);\n\n        // find components of v1 and v2 along and perpendicular to u\n        const v1_along_u12 = u12.clone().multiplyScalar(u12.dot(s1.velocity));\n        const v2_along_u21 = u21.clone().multiplyScalar(u21.dot(s2.velocity));\n\n        const v1_perp_u12 = s1.velocity.clone().sub(v1_along_u12);\n        const v2_perp_u21 = s2.velocity.clone().sub(v2_along_u21);\n\n        // calculate new velocities along u, assuming elastic collision\n        const m1 = 1/s1.inverseMass;\n        const m2 = 1/s2.inverseMass;\n        const v1_along_u_new = (v1_along_u12.clone().multiplyScalar((m1-m2)/(m1+m2))).addScaledVector(v2_along_u21, (2*m2)/(m1+m2));\n        const v2_along_u_new = (v1_along_u12.clone().multiplyScalar((2*m1)/(m1+m2))).addScaledVector(v2_along_u21, -(m1-m2)/(m1+m2));\n\n        // calculate and set new velocities\n        const v1_new = v1_along_u_new.clone().add(v1_perp_u12);\n        const v2_new = v2_along_u_new.clone().add(v2_perp_u21);\n\n        console.log(\"u: \", u12);\n        console.log(\"v1_new: \", v1_new);\n        console.log(\"v2_new\", v2_new);\n    }\n\n    clearCurrentLoop(): void {\n        clearInterval(this.currentLoopInterval);\n    }\n}*/\n\n/*\nfunction getFacePlanes(box: Box) {\n    const x = box.position.x;\n    const y = box.position.y;\n    const z = box.position.z;\n    const v1 = new Vector3(x - box.width/2, y - box.length/2, z - box.height/2);\n    const v2 = new Vector3(x - box.width/2, y + box.length/2, z - box.height/2);\n    const v3 = new Vector3(x + box.width/2, y + box.length/2, z - box.height/2);\n    const v4 = new Vector3(x + box.width/2, y - box.length/2, z - box.height/2);\n    const v5 = new Vector3(x - box.width/2, y - box.length/2, z + box.height/2);\n    const v6 = new Vector3(x - box.width/2, y + box.length/2, z + box.height/2);\n    const v7 = new Vector3(x + box.width/2, y + box.length/2, z + box.height/2);\n    const v8 = new Vector3(x + box.width/2, y - box.length/2, z + box.height/2);\n    const vertices = [v1, v2, v3, v4, v5, v6, v7, v8];\n\n    // rotate vertices\n    for (let vertex of vertices) {\n        // convert to body space, apply rotation, convert back to world space\n        vertex.sub(box.position);\n        vertex.applyQuaternion(box.rotation);\n        vertex.add(box.position);\n    }\n    const face1 = { normal: ((v2.clone().sub(v1)).cross(v4.clone().sub(v1))).normalize(), point: v1 } // bottom plane\n    const face2 = { normal: ((v8.clone().sub(v5)).cross(v6.clone().sub(v5))).normalize(), point: v5 } // top plane\n    const face3 = { normal: ((v5.clone().sub(v1)).cross(v2.clone().sub(v1))).normalize(), point: v1 } // left plane\n    const face4 = { normal: ((v3.clone().sub(v4)).cross(v8.clone().sub(v4))).normalize(), point: v4 } // top plane\n    const face5 = { normal: ((v4.clone().sub(v1)).cross(v5.clone().sub(v1))).normalize(), point: v1 } // front plane\n    const face6 = { normal: ((v2.clone().sub(v3)).cross(v7.clone().sub(v3))).normalize(), point: v3 } // back plane\n    const facePlanes = [face1, face2, face3, face4, face5, face6];\n    return facePlanes;\n}*/","map":{"version":3,"names":["Matrix3","Vector3","Sphere","Box","Plane","World","constructor","objects","coefficient_of_restitution","dt","addObject","obj","push","getAllBoundingBoxIntersections","compareBoundingBoxes","a","b","a_min","position","x","boundingBox","b_min","objectsCopy","sort","intersections","i","length","j","i_max","j_min","checkBoundingBoxIntersection","detectAndResolveCollisions","boundingBoxIntersections","integrateObjects","duration","object","integrate","updateMeshes","updateMesh","updateBoundingBoxMesh","a_x_min","a_x_max","a_y_min","y","a_y_max","a_z_min","z","a_z_max","b_x_min","b_x_max","b_y_min","b_y_max","b_z_min","b_z_max","checkCollision","checkCollisionBoxes","checkCollisionBoxAndSphere","checkCollisionBoxAndPlane","checkCollisionSpheres","checkCollisionSphereAndPlane","console","error","a_coordinateAxes","getCoordinateAxes","b_coordinateAxes","faceAxis","separatingAxisPenetration","a_axis","b_axis","m","clone","cross","normalize","d","sub","radius","sphere","plane","relativePosition","dot","normal","box","inverseRotation","rotation","sphereCenter","applyQuaternion","closestPoint","Math","max","min","width","height","distance","vertices","getVertices","v","relative_position","getAllContacts","contacts","contact","getContactData","getContactDataBoxes","getContactDataBoxAndSphere","getContactDataBoxAndPlane","getContactDataSpheres","getContactDataSphereAndPlane","type","contactNormal","penetration","contactPoint","edge_a","edge_b","vector_ab","smallestOverlap","Infinity","overlap","axis","multiplyScalar","vertex","getClosestVertex","getClosestEdge","getClosestPointBetweenTwoEdges","add","v_ab","addScaledVector","resolveCollision","contactData","log","r_a","r_b","vertexVelocity_a","velocity","getAngularVelocity","vertexVelocity_b","relativeVelocity","I_inverse_a","getInertia","invert","I_inverse_b","term1","applyMatrix3","term2","inverseMass","impulse","impulse2","applyImpulse","edgeVector","separatingAxis","projectionMatrix","set","a_center","b_edges","getEdges","parallel_b_edges","b_edge","b_edgeVector","closestEdge","closestDistance","lineVector","a_vertices","b_vertices","a_radius","a_v","a_v_projection","r","b_center","smallestDistanceToA","b_v","b_v_projection","e1","e2","p1","p2","p3","p4","v12","v34","v13","s","t","R_1_squared","R_2_squared","D_4321","D_3121","D_4331","denominator","point_a","point_b","axes","v1","v2","v3","v4","v5","v6","v7","v8","edges"],"sources":["/Users/danny/Github/physics_engine_for_the_web/frontend/src/physics_engine/physics_engine.ts"],"sourcesContent":["import { Matrix3, Vector3 } from \"three\";\nimport * as THREE from \"three\";\nimport { Sphere } from \"./Sphere\";\nimport { Box } from \"./Box\";\nimport { Plane } from \"./Plane\";\n\nexport class World {\n    public objects: any[];\n    public coefficient_of_restitution: number = 1; // 0 is fully inelastic, 1 is fully elastic\n    public dt: number = 1/60; // time step in seconds\n\n    constructor() {\n        this.objects = [];\n    }\n\n    addObject(obj: any): void {\n        this.objects.push(obj);\n    }\n\n    getAllBoundingBoxIntersections() {\n        // for now just sort against x-axis. Slightly better is to update axis based on one with highest variance\n        // worst case is still O(n^2)\n    \n        function compareBoundingBoxes(a: any, b: any) {\n            const a_min = a.position.x - a.boundingBox.x/2;\n            const b_min = b.position.x - b.boundingBox.x/2;\n            return a_min - b_min;\n        }\n    \n        // sort objects along x-axis\n        const objectsCopy = [...this.objects];\n        objectsCopy.sort(compareBoundingBoxes);\n    \n        // sweep the array for collisions\n        const intersections = [];\n        for(let i = 0; i < objectsCopy.length - 1; i++) {\n            // test against all possible overlapping boxes following the current one.\n            for(let j = i + 1; j < objectsCopy.length; j++) {\n                // stop testing when AABBs are beyond the current AABB\n                const i_max = objectsCopy[i].position.x + objectsCopy[i].boundingBox.x/2;\n                const j_min = objectsCopy[j].position.x - objectsCopy[j].boundingBox.x/2;\n                if (j_min > i_max) {\n                    break;\n                }\n    \n                if (checkBoundingBoxIntersection(objectsCopy[i], objectsCopy[j])) {\n                    intersections.push({\n                        a: objectsCopy[i],\n                        b: objectsCopy[j]\n                    });\n                }\n            }\n        }\n        return intersections;\n    }\n\n    detectAndResolveCollisions(): void {\n        const boundingBoxIntersections = this.getAllBoundingBoxIntersections();\n    }\n\n    integrateObjects(duration: number): void {\n        for (let object of this.objects) {\n            if (object instanceof Plane) {\n                continue;\n            }\n\n            object.integrate(duration);\n        }\n    }\n\n    updateMeshes(): void {\n        for (let object of this.objects) {\n            if (object instanceof Plane) {\n                continue;\n            }\n\n            object.updateMesh();\n            object.updateBoundingBoxMesh();\n        }\n    }\n}\n\n/**\n * checks if the bounding box of two objects intersect\n * @param a the first object\n * @param b the other object\n */\nexport function checkBoundingBoxIntersection(a: any, b: any): boolean {\n    // create intervals\n    const a_x_min = a.position.x - a.boundingBox.x/2;\n    const a_x_max = a.position.x + a.boundingBox.x/2;\n    const a_y_min = a.position.y - a.boundingBox.y/2;\n    const a_y_max = a.position.y + a.boundingBox.y/2;\n    const a_z_min = a.position.z - a.boundingBox.z/2;\n    const a_z_max = a.position.z + a.boundingBox.z/2;\n    const b_x_min = b.position.x - b.boundingBox.x/2;\n    const b_x_max = b.position.x + b.boundingBox.x/2;\n    const b_y_min = b.position.y - b.boundingBox.y/2;\n    const b_y_max = b.position.y + b.boundingBox.y/2;\n    const b_z_min = b.position.z - b.boundingBox.z/2;\n    const b_z_max = b.position.z + b.boundingBox.z/2;\n\n    // intersecting if all intervals are intersecting\n    if ((a_x_min < b_x_max && b_x_min < a_x_max) &&\n        (a_y_min < b_y_max && b_y_min < a_y_max) &&\n        (a_z_min < b_z_max && b_z_min < a_z_max)) {\n        return true\n    }\n    return false;\n}\n\n// returns true if the two objects are intersecting\nexport function checkCollision(a: any, b: any): boolean {\n    if (a instanceof Box && b instanceof Box) {\n        return checkCollisionBoxes(a, b);\n    } else if (a instanceof Box && b instanceof Sphere) {\n        return checkCollisionBoxAndSphere(a, b);\n    } else if (a instanceof Box && b instanceof Plane) {\n        return checkCollisionBoxAndPlane(a, b);\n    } else if (a instanceof Sphere && b instanceof Box) {\n        return checkCollisionBoxAndSphere(b, a);\n    } else if (a instanceof Sphere && b instanceof Sphere) {\n        return checkCollisionSpheres(a, b);\n    } else if (a instanceof Sphere && b instanceof Plane) {\n        return checkCollisionSphereAndPlane(a, b);\n    } else if (a instanceof Plane && b instanceof Box) {\n        return checkCollisionBoxAndPlane(b, a);\n    } else if (a instanceof Plane && b instanceof Sphere) {\n        return checkCollisionSphereAndPlane(b, a);\n    } else {\n        console.error(\"checking collision between these types not implemented.\");\n    }\n}\n\nexport function checkCollisionBoxes(a: Box, b: Box): boolean {\n    // two convex objects don't collide iff there exists a separating plane between them\n\n    // search for separating plane.\n    // either its contain a face of one polyhedra or it contains an edge of one polyhedra and is parallel to the edge of the other polyhedra.\n\n    const a_coordinateAxes = getCoordinateAxes(a);\n    const b_coordinateAxes = getCoordinateAxes(b);\n\n    // check the 6 face axes\n    for (let faceAxis of a_coordinateAxes) {\n        if (separatingAxisPenetration(a, b, faceAxis) < 0) {\n            return false;\n        }\n    }\n    for (let faceAxis of b_coordinateAxes) {\n        if (separatingAxisPenetration(a, b, faceAxis) < 0) {\n            return false;\n        }\n    }\n\n    // check the 9 edge-edge axes\n    for (let a_axis of a_coordinateAxes) {\n        for (let b_axis of b_coordinateAxes) {\n            let m = a_axis.clone().cross(b_axis).normalize();\n            if (m.length() > 0) { // note to self: should use epsilon when checking for zero vector to  improve stability\n                if (separatingAxisPenetration(a, b, m) < 0) {\n                    return false;\n                }\n            } else {\n                // for now, ignore case where the corresponding edges are parallel.\n                continue;\n            }\n        }\n    }\n\n    return true;\n}\n\nexport function checkCollisionSpheres(a: Sphere, b: Sphere): boolean {\n    // two spheres intersect if the distance between their centers is not greater than the sum of their radii\n    const d = a.position.clone().sub(b.position).length();\n    return d <= a.radius + b.radius;\n}\n\nexport function checkCollisionSphereAndPlane(sphere: Sphere, plane: Plane) {\n    const relativePosition = sphere.position.clone().sub(plane.position);\n    const d = relativePosition.dot(plane.normal); // distance to center of sphere, negative if center is below plane.\n    return d <= sphere.radius;\n}\n\nexport function checkCollisionBoxAndSphere(box: Box, sphere: Sphere): boolean {\n    // convert sphere center to box coordinate space\n    const inverseRotation = box.rotation.clone();\n    let sphereCenter = sphere.position.clone().sub(box.position).applyQuaternion(inverseRotation);\n\n    // Clamp each coordinate to the box.\n    const closestPoint = sphereCenter.clone();\n    closestPoint.x = Math.max(Math.min(closestPoint.x, box.width/2), -box.width/2);\n    closestPoint.y = Math.max(Math.min(closestPoint.y, box.length/2), -box.length/2);\n    closestPoint.z = Math.max(Math.min(closestPoint.z, box.height/2), -box.height/2);\n\n    // check if they're in contact\n    const distance = sphereCenter.clone().sub(closestPoint).length();\n    return distance < sphere.radius;\n}\n\nexport function checkCollisionBoxAndPlane(box: Box, plane: Plane): boolean {\n    const vertices = getVertices(box);\n    for (let v of vertices) {\n        const relative_position = v.clone().sub(plane.position);\n        const d = relative_position.dot(plane.normal);\n        if (d < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\nexport function getAllContacts(boundingBoxIntersections: any[]) {\n    const contacts = [];\n    for(let i = 0; i < boundingBoxIntersections.length; i++) {\n        const a = boundingBoxIntersections[i].a;\n        const b = boundingBoxIntersections[i].b;\n\n        // check for collisions and color them\n        if (checkCollision(a, b)) {\n            const contact = getContactData(a, b);\n            contacts.push(contact);\n        }\n    }\n\n    return contacts;\n}\n\n// todo: refactor functions below\n\nexport function getContactData(a: any, b: any) {\n    if (a instanceof Box && b instanceof Box) {\n        return getContactDataBoxes(a, b);\n    } else if (a instanceof Box && b instanceof Sphere) {\n        return getContactDataBoxAndSphere(a, b);\n    } else if (a instanceof Box && b instanceof Plane) {\n        return getContactDataBoxAndPlane(a, b);\n    } else if (a instanceof Sphere && b instanceof Box) {\n        return getContactDataBoxAndSphere(b, a);\n    } else if (a instanceof Sphere && b instanceof Sphere) {\n        return getContactDataSpheres(a, b);\n    } else if (a instanceof Sphere && b instanceof Plane) {\n        return getContactDataSphereAndPlane(a, b);\n    } else if (a instanceof Plane && b instanceof Box) {\n        return getContactDataBoxAndPlane(b, a);\n    } else if (a instanceof Plane && b instanceof Sphere) {\n        return getContactDataSphereAndPlane(b, a);\n    } else {\n        console.error(\"getting contact data between these types not implemented.\");\n        return {\n            a: a,\n            b: b,\n            type: \"none\",\n            contactNormal: new Vector3(0, 0, 1),\n            penetration: 0,\n            contactPoint: new Vector3(0, 0, 0),\n            edge_a: { a: new Vector3(0, 0, 0), b: new Vector3(0, 0, 0) },\n            edge_b: { a: new Vector3(0, 0, 0), b: new Vector3(0, 0, 0) }\n        };\n    }\n}\n\n// note: all getContact functions assume the objects already intersect.\n\n// convention: contact data is of format {a, b, type, contactNormal, penetration, contactPoint, ...} where contactNormal points from b to a\n// get contact data for two colliding boxes, assuming collision\nfunction getContactDataBoxes(a: Box, b: Box) {\n    const vector_ab = b.position.clone().sub(a.position);\n    const a_coordinateAxes = getCoordinateAxes(a);\n    const b_coordinateAxes = getCoordinateAxes(b);\n    let smallestOverlap = Infinity;\n    let contact;\n\n    for (let a_axis of a_coordinateAxes) {\n        const overlap = separatingAxisPenetration(a, b, a_axis);\n        if (overlap < smallestOverlap) {\n            smallestOverlap = overlap;\n\n            // set contact\n            const axis = a_axis.clone();\n            if (vector_ab.dot(axis) < 0) { // orient axis to normal of the correct face.\n                axis.multiplyScalar(-1);\n            }\n            axis.normalize();\n            const vertex = getClosestVertex(a, b, axis);\n            contact = {\n                a: b,\n                b: a,\n                type: \"vertex-face\",\n                contactNormal: axis,\n                penetration: smallestOverlap,\n                contactPoint: vertex,\n                edge_a: { a: new Vector3(0, 0, 0), b: new Vector3(0, 0, 0) },\n                edge_b: { a: new Vector3(0, 0, 0), b: new Vector3(0, 0, 0) }\n            };\n        }\n    }\n    for (let b_axis of b_coordinateAxes) {\n        const overlap = separatingAxisPenetration(a, b, b_axis);\n        if (overlap < smallestOverlap) {\n            smallestOverlap = overlap;\n\n            // set contact\n            const axis = b_axis.clone();\n            if (vector_ab.clone().dot(axis) > 0) { // orient axis to normal of the correct face.\n                axis.multiplyScalar(-1);\n            }\n            axis.normalize();\n            const vertex = getClosestVertex(b, a, axis);\n            contact = {\n                a: a,\n                b: b, \n                type: \"vertex-face\",\n                contactNormal: axis,\n                penetration: smallestOverlap,\n                contactPoint: vertex,\n                edge_a: { a: new Vector3(0, 0, 0), b: new Vector3(0, 0, 0) },\n                edge_b: { a: new Vector3(0, 0, 0), b: new Vector3(0, 0, 0) }\n            };\n        }\n    }\n\n    for (let a_axis of a_coordinateAxes) {\n        for (let b_axis of b_coordinateAxes) {\n            let m = a_axis.clone().cross(b_axis).normalize();\n            if (m.length() > 0.005) { // check parallel edges\n                const overlap = separatingAxisPenetration(a, b, m);\n\n                if (overlap < smallestOverlap) {\n                    smallestOverlap = overlap;\n\n                    // set contact\n                    const axis = m.clone();\n                    if (vector_ab.clone().dot(axis) > 0) {\n                        axis.multiplyScalar(-1);\n                    }\n                    axis.normalize();\n                    const edge_a = getClosestEdge(b, a, a_axis, m);\n                    const edge_b = getClosestEdge(a, b, b_axis, m);\n                    contact = {\n                        a: a,\n                        b: b,\n                        type: \"edge-edge\",\n                        contactNormal: axis,\n                        penetration: smallestOverlap,\n                        contactPoint: getClosestPointBetweenTwoEdges(edge_a, edge_b),\n                        edge_a: edge_a,\n                        edge_b: edge_b\n                    };\n                }\n            } else {\n                // for now, ignore case where the corresponding edges are parallel.\n                continue;\n            }\n        }\n    }\n    \n    return contact;\n}\n\nfunction getContactDataBoxAndSphere(box: Box, sphere: Sphere) {\n    // convert sphere center to box coordinate space\n    const inverseRotation = box.rotation.clone();\n    let sphereCenter = sphere.position.clone().sub(box.position).applyQuaternion(inverseRotation);\n\n    // Clamp each coordinate to the box.\n    let closestPoint = sphereCenter.clone();\n    closestPoint.x = Math.max(Math.min(closestPoint.x, box.width/2), -box.width/2);\n    closestPoint.y = Math.max(Math.min(closestPoint.y, box.length/2), -box.length/2);\n    closestPoint.z = Math.max(Math.min(closestPoint.z, box.height/2), -box.height/2);\n\n    const distance = sphereCenter.clone().sub(closestPoint).length();\n    const penetration = sphere.radius - distance;\n\n    // convert back to world space\n    closestPoint.applyQuaternion(box.rotation).add(box.position);\n\n    const contactPoint = closestPoint;\n    const contactNormal = closestPoint.clone().sub(sphere.position.clone()).normalize();\n\n    const contact = {\n        a: box,\n        b: sphere,\n        type: \"vertex-face\",\n        contactNormal: contactNormal,\n        penetration: penetration,\n        contactPoint: contactPoint,\n        edge_a: { a: new Vector3(0, 0, 0), b: new Vector3(0, 0, 0) },\n        edge_b: { a: new Vector3(0, 0, 0), b: new Vector3(0, 0, 0) }\n    }\n    return contact;\n}\n\nfunction getContactDataSpheres(a: Sphere, b: Sphere) {\n    const v_ab = b.position.clone().sub(a.position);\n    const contactPoint = a.position.clone().add(v_ab.clone().multiplyScalar(a.radius).sub(v_ab.clone().multiplyScalar(b.radius)).multiplyScalar(0.5));\n    const penetration = a.radius - b.radius - v_ab.length()\n    const contactNormal = v_ab.clone().multiplyScalar(-1).normalize();\n    const contact = {\n        a: a,\n        b: b,\n        type: \"vertex-face\",\n        contactNormal: contactNormal,\n        penetration: penetration,\n        contactPoint: contactPoint,\n        edge_a: { a: new Vector3(0, 0, 0), b: new Vector3(0, 0, 0) },\n        edge_b: { a: new Vector3(0, 0, 0), b: new Vector3(0, 0, 0) }\n    }\n    return contact;\n}\n\nfunction getContactDataBoxAndPlane(box: Box, plane: Plane) {\n    const vertices = getVertices(box);\n    let contactPoint = vertices[0];\n    let penetration = 0;\n    \n    for (let v of vertices) {\n        const relative_position = v.clone().sub(plane.position);\n        const d = relative_position.dot(plane.normal);\n        if (d < penetration) {\n            contactPoint = v;\n            penetration = d;\n        }\n    }\n\n    const contact = {\n        a: box,\n        b: plane,\n        type: \"vertex-face\",\n        contactNormal: plane.normal.clone(),\n        penetration: penetration,\n        contactPoint: contactPoint,\n        edge_a: { a: new Vector3(0, 0, 0), b: new Vector3(0, 0, 0) },\n        edge_b: { a: new Vector3(0, 0, 0), b: new Vector3(0, 0, 0) }\n    };\n    return contact;\n}\n\nfunction getContactDataSphereAndPlane(sphere: Sphere, plane: Plane) {\n    const relativePosition = sphere.position.clone().sub(plane.position);\n    const d = relativePosition.dot(plane.normal); // distance to center of sphere, negative if center is below plane.\n    const penetration = sphere.radius - d;\n\n    const contactPoint = sphere.position.clone().addScaledVector(plane.normal, -sphere.radius);\n\n    const contact = {\n        a: sphere,\n        b: plane,\n        type: \"vertex-face\",\n        contactNormal: plane.normal.clone(),\n        penetration: penetration,\n        contactPoint: contactPoint,\n        edge_a: { a: new Vector3(0, 0, 0), b: new Vector3(0, 0, 0) },\n        edge_b: { a: new Vector3(0, 0, 0), b: new Vector3(0, 0, 0) }\n    };\n    return contact;\n}\n\nconst coefficient_of_restitution = 0;\nexport function resolveCollision(contactData: any) {\n    const a = contactData.a;\n    const b = contactData.b;\n    const normal = contactData.contactNormal;\n    if (contactData.type === \"vertex-face\") {\n        console.log(\"resolving vertex-face contact\");\n        const vertex = contactData.contactPoint;\n        const r_a = vertex.clone().sub(a.position);\n        const r_b = vertex.clone().sub(b.position);\n        const vertexVelocity_a = a.velocity.clone().add(a.getAngularVelocity().cross(r_a));\n        const vertexVelocity_b = b.velocity.clone().add(b.getAngularVelocity().cross(r_b));\n        const relativeVelocity = normal.dot(vertexVelocity_a.clone().sub(vertexVelocity_b));\n        if (relativeVelocity < 0) {\n            console.log(\"colliding contact\");\n            console.log(\"contact: \", contactData);\n            \n            const I_inverse_a = a.getInertia().invert();\n            const I_inverse_b = b.getInertia().invert();\n\n            const term1 = normal.dot(r_a.clone().cross(normal).applyMatrix3(I_inverse_a).cross(r_a));\n            const term2 = normal.dot(r_b.clone().cross(normal).applyMatrix3(I_inverse_b).cross(r_b));\n\n            const j = -(1 + coefficient_of_restitution) * relativeVelocity / (a.inverseMass + b.inverseMass + term1 + term2);\n            console.log(\"relative Velocity: \", relativeVelocity);\n            \n            const impulse = normal.clone().multiplyScalar(j);\n            const impulse2 = normal.clone().multiplyScalar(-j);\n            a.applyImpulse(vertex, impulse);\n            b.applyImpulse(vertex, impulse2);\n        } else if (relativeVelocity === 0) {\n            console.log(\"resting contact\");\n        } else {\n            // ignore\n            console.log(\"leaving\");\n        }\n    } else if (contactData.type === \"edge-edge\") {\n        console.log(\"resolving edge-edge contact\");\n        console.log(\"edge_a\", contactData.edge_a);\n        console.log(\"edge_b\", contactData.edge_b);\n        console.log(\"contactNormal: \", contactData.contactNormal);\n\n        const vertex = getClosestPointBetweenTwoEdges(contactData.edge_a, contactData.edge_b);\n        const r_a = vertex.clone().sub(a.position);\n        const r_b = vertex.clone().sub(b.position);\n        const vertexVelocity_a = a.velocity.clone().add(a.getAngularVelocity().cross(r_a));\n        const vertexVelocity_b = b.velocity.clone().add(b.getAngularVelocity().cross(r_b));\n        const relativeVelocity = normal.dot(vertexVelocity_a.clone().sub(vertexVelocity_b));\n        if (relativeVelocity < 0) {\n            console.log(\"colliding contact\");\n            \n            const I_inverse_a = a.getInertia().invert();\n            let I_inverse_b = b.getInertia().invert();\n\n            const term1 = normal.dot(r_a.clone().cross(normal).applyMatrix3(I_inverse_a).cross(r_a));\n            const term2 = normal.dot(r_b.clone().cross(normal).applyMatrix3(I_inverse_b).cross(r_b));\n\n            const j = -(1 + coefficient_of_restitution) * relativeVelocity / (a.inverseMass + b.inverseMass + term1 + term2);\n\n            const impulse = normal.clone().multiplyScalar(j);\n            const impulse2 = normal.clone().multiplyScalar(-j);\n            a.applyImpulse(vertex, impulse);\n            b.applyImpulse(vertex, impulse2);\n        } else if (relativeVelocity === 0) {\n            console.log(\"resting contact\");\n        } else {\n            // ignore\n            console.log(\"leaving\");\n        }\n    } else {\n        console.error(\"contactData type not recognized.\");\n        console.log(\"contact data: \", contactData);\n    }\n}\n\n// returns closest edge of box b\n// edge should be parallel to input edgeVector\nfunction getClosestEdge(a: Box, b: Box, edgeVector: Vector3, separatingAxis: Vector3) {\n    const x = separatingAxis.x;\n    const y = separatingAxis.y;\n    const z = separatingAxis.z;\n    const projectionMatrix = new Matrix3();\n    projectionMatrix.set(\n        x*x, x*y, x*z,\n        x*y, y*y, y*z,\n        x*z, y*z, z*z\n    );\n\n    const a_center = a.position.clone().applyMatrix3(projectionMatrix);\n\n    const b_edges = getEdges(b);\n    const parallel_b_edges = [];\n    for (let b_edge of b_edges) {\n        const b_edgeVector = b_edge.b.clone().sub(b_edge.a);\n        if (b_edgeVector.clone().cross(edgeVector).length() < 0.005) {\n            parallel_b_edges.push(b_edge);\n        }\n    }\n\n    let closestEdge = parallel_b_edges[0];\n    let closestDistance = closestEdge.a.clone().sub(a_center).length();\n    for (let b_edge of parallel_b_edges) {\n        const d = b_edge.a.clone().sub(a_center).length();\n        if (d < closestDistance) {\n            closestDistance = d;\n            closestEdge = b_edge;\n        }\n    }\n\n    return closestEdge;\n}\n\n// returns closest vertex of box b to face of box a\nfunction getClosestVertex(a: Box, b: Box, lineVector: Vector3): Vector3 {\n    const a_vertices = getVertices(a);\n    const b_vertices = getVertices(b);\n\n    const x = lineVector.x;\n    const y = lineVector.y;\n    const z = lineVector.z;\n    const projectionMatrix = new Matrix3();\n    projectionMatrix.set(\n        x*x, x*y, x*z,\n        x*y, y*y, y*z,\n        x*z, y*z, z*z\n    );\n\n    const a_center = a.position.clone().applyMatrix3(projectionMatrix);\n\n    let a_radius = 0;\n\n    for (let a_v of a_vertices) {\n        const a_v_projection = a_v.clone().applyMatrix3(projectionMatrix);\n        const r = a_v_projection.clone().sub(a_center).length();\n        if (r > a_radius) {\n            a_radius = r;\n        }\n    }\n\n    const b_center = b.position.clone().applyMatrix3(projectionMatrix);\n    let vertex = b_vertices[0];\n    let smallestDistanceToA = b_center.clone().sub(a_center).length() - a_radius;\n\n    for (let b_v of b_vertices) {\n        const b_v_projection = b_v.clone().applyMatrix3(projectionMatrix);\n        const d = b_v_projection.clone().sub(a_center).length() - a_radius;\n        if (d < smallestDistanceToA) {\n            smallestDistanceToA = d;\n            vertex = b_v;\n        }\n    }\n\n    return vertex;\n}\n\nfunction separatingAxisPenetration(a: Box, b: Box, lineVector: Vector3): number {\n    const x = lineVector.x;\n    const y = lineVector.y;\n    const z = lineVector.z;\n    const projectionMatrix = new Matrix3();\n    projectionMatrix.set(\n        x*x, x*y, x*z,\n        x*y, y*y, y*z,\n        x*z, y*z, z*z\n    );\n\n    const a_center = a.position.clone().applyMatrix3(projectionMatrix);\n    const b_center = b.position.clone().applyMatrix3(projectionMatrix);\n    const d = b_center.clone().sub(a_center).length();\n\n    const a_vertices = getVertices(a);\n    const b_vertices = getVertices(b);\n\n    let r_a = 0, r_b = 0;\n    for (let a_v of a_vertices) {\n        const a_v_projection = a_v.applyMatrix3(projectionMatrix);\n        const r = a_center.clone().sub(a_v_projection).length()\n        if (r > r_a) {\n            r_a = r;\n        }\n    }\n    for (let b_v of b_vertices) {\n        const b_v_projection = b_v.applyMatrix3(projectionMatrix);\n        const r = b_center.clone().sub(b_v_projection).length()\n        if (r > r_b) {\n            r_b = r;\n        }\n    }\n\n    // returns the overlap. positive indicates overlap, negative indicates separation.\n    return r_a + r_b - d;\n}\n\nfunction getClosestPointBetweenTwoEdges(e1: any, e2: any) {\n    const p1 = e1.a;\n    const p2 = e1.b;\n    const p3 = e2.a;\n    const p4 = e2.b;\n\n    const v12 = p2.clone().sub(p1);\n    const v34 = p4.clone().sub(p3);\n    const v13 = p3.clone().sub(p1);\n\n    let s, t;\n\n    // terms\n    const R_1_squared = v12.dot(v12);\n    const R_2_squared = v34.dot(v34);\n    const D_4321 = v12.dot(v34);\n    const D_3121 = v12.dot(v13);\n    const D_4331 = v13.dot(v34);\n    const denominator = D_4321*D_4321 - R_1_squared*R_2_squared;\n\n    s = (D_4321*D_4331 - R_2_squared*D_3121) / denominator;\n    t = (R_1_squared*D_4331 - D_4321*D_3121) / denominator;\n\n    s = Math.max(Math.min(s, 1), 0);\n    t = Math.max(Math.min(t, 1), 0);\n\n    const point_a = e1.a.clone().add(v12.clone().multiplyScalar(s));\n    const point_b = e2.a.clone().add(v34.clone().multiplyScalar(t));\n\n    return point_a.clone().add(point_b).multiplyScalar(1/2);\n}\n\nfunction getCoordinateAxes(box: Box) {\n    const x = new Vector3(1, 0, 0), y = new Vector3(0, 1, 0), z = new Vector3(0, 0, 1);\n\n    const axes = [x, y, z];\n\n    for (let axis of axes) {\n        axis.applyQuaternion(box.rotation);\n    }\n    return axes;\n}\n\nfunction getVertices(box: Box) {\n    const x = box.position.x;\n    const y = box.position.y;\n    const z = box.position.z;\n    const v1 = new Vector3(x - box.width/2, y - box.length/2, z - box.height/2);\n    const v2 = new Vector3(x - box.width/2, y + box.length/2, z - box.height/2);\n    const v3 = new Vector3(x + box.width/2, y + box.length/2, z - box.height/2);\n    const v4 = new Vector3(x + box.width/2, y - box.length/2, z - box.height/2);\n    const v5 = new Vector3(x - box.width/2, y - box.length/2, z + box.height/2);\n    const v6 = new Vector3(x - box.width/2, y + box.length/2, z + box.height/2);\n    const v7 = new Vector3(x + box.width/2, y + box.length/2, z + box.height/2);\n    const v8 = new Vector3(x + box.width/2, y - box.length/2, z + box.height/2);\n    const vertices = [v1, v2, v3, v4, v5, v6, v7, v8];\n\n    // rotate vertices\n    for (let vertex of vertices) {\n        // convert to body space, apply rotation, convert back to world space\n        vertex.sub(box.position);\n        vertex.applyQuaternion(box.rotation);\n        vertex.add(box.position);\n    }\n\n    return vertices;\n}\n\nfunction getEdges(box: Box) {\n    const x = box.position.x;\n    const y = box.position.y;\n    const z = box.position.z;\n    const v1 = new Vector3(x - box.width/2, y - box.length/2, z - box.height/2);\n    const v2 = new Vector3(x - box.width/2, y + box.length/2, z - box.height/2);\n    const v3 = new Vector3(x + box.width/2, y + box.length/2, z - box.height/2);\n    const v4 = new Vector3(x + box.width/2, y - box.length/2, z - box.height/2);\n    const v5 = new Vector3(x - box.width/2, y - box.length/2, z + box.height/2);\n    const v6 = new Vector3(x - box.width/2, y + box.length/2, z + box.height/2);\n    const v7 = new Vector3(x + box.width/2, y + box.length/2, z + box.height/2);\n    const v8 = new Vector3(x + box.width/2, y - box.length/2, z + box.height/2);\n    const vertices = [v1, v2, v3, v4, v5, v6, v7, v8];\n\n    // rotate vertices\n    for (let vertex of vertices) {\n        // convert to body space, apply rotation, convert back to world space\n        vertex.sub(box.position);\n        vertex.applyQuaternion(box.rotation);\n        vertex.add(box.position);\n    }\n\n    const edges = [];\n    edges.push({a: v1, b: v2});\n    edges.push({a: v1, b: v4});\n    edges.push({a: v1, b: v5});\n    edges.push({a: v2, b: v3});\n    edges.push({a: v2, b: v6});\n    edges.push({a: v3, b: v4});\n    edges.push({a: v3, b: v7});\n    edges.push({a: v4, b: v8});\n    edges.push({a: v5, b: v6});\n    edges.push({a: v5, b: v8});\n    edges.push({a: v6, b: v7});\n    edges.push({a: v7, b: v8});\n\n    return edges;\n}\n\nexport function getAllBoundingBoxIntersections(objects: any[]) {\n    // for now just sort against x-axis. Slightly better is to update axis based on one with highest variance\n    // worst case is still O(n^2)\n\n    function compareBoundingBoxes(a: any, b: any) {\n        const a_min = a.position.x - a.boundingBox.x/2;\n        const b_min = b.position.x - b.boundingBox.x/2;\n        return a_min - b_min;\n    }\n\n    // sort objects along x-axis\n    const objectsCopy = [...objects];\n    objectsCopy.sort(compareBoundingBoxes);\n\n    // sweep the array for collisions\n    const intersections = [];\n    for(let i = 0; i < objectsCopy.length - 1; i++) {\n        // test against all possible overlapping boxes following the current one.\n        for(let j = i + 1; j < objectsCopy.length; j++) {\n            // stop testing when AABBs are beyond the current AABB\n            const i_max = objectsCopy[i].position.x + objectsCopy[i].boundingBox.x/2;\n            const j_min = objectsCopy[j].position.x - objectsCopy[j].boundingBox.x/2;\n            if (j_min > i_max) {\n                break;\n            }\n\n            if (checkBoundingBoxIntersection(objectsCopy[i], objectsCopy[j])) {\n                intersections.push({\n                    a: objectsCopy[i],\n                    b: objectsCopy[j]\n                });\n            }\n        }\n    }\n    return intersections;\n}\n\n/**\n * for symmetrical objects, valid separating axis iff sum the radii (half_widths) of the projected intervals is less than the distance between the centers\n * @param a \n * @param b \n * @param lineVector a unit vector describing the direction of the line\n * @returns true if the lineVector is a separating axis\n */\n/*export function testSeparatingAxis(a: Box, b: Box, lineVector: Vector3): boolean {\n    const x = lineVector.x;\n    const y = lineVector.y;\n    const z = lineVector.z;\n    const projectionMatrix = new Matrix3();\n    projectionMatrix.set(\n        x*x, x*y, x*z,\n        x*y, y*y, y*z,\n        x*z, y*z, z*z\n    );\n\n    const a_center = a.position.clone().applyMatrix3(projectionMatrix);\n    const b_center = b.position.clone().applyMatrix3(projectionMatrix);\n    const d = b_center.clone().sub(a_center).length();\n\n    const a_vertices = getVertices(a);\n    const b_vertices = getVertices(b);\n    \n    let r_a = 0, r_b = 0;\n    for (let a_v of a_vertices) {\n        const a_v_projection = a_v.applyMatrix3(projectionMatrix);\n        const r = a_center.clone().sub(a_v_projection).length()\n        if (r > r_a) {\n            r_a = r;\n        }\n    }\n    for (let b_v of b_vertices) {\n        const b_v_projection = b_v.applyMatrix3(projectionMatrix);\n        const r = b_center.clone().sub(b_v_projection).length()\n        if (r > r_b) {\n            r_b = r;\n        }\n    }\n    if (r_a + r_b < d) {\n        return true;\n    }\n\n    return false;\n}*/\n\n/*\nexport function checkCollisionBoxes(a: Box, b: Box): boolean {\n    // two convex objects don't collide iff there exists a separating plane between them\n\n    // search for separating plane.\n    // either its contain a face of one polyhedra or it contains an edge of one polyhedra and is parallel to the edge of the other polyhedra.\n    \n    const a_facePlanes = getFacePlanes(a);\n    for (let facePlane of a_facePlanes) {\n        if (testSeparatingAxis(a, b, facePlane.normal)) {\n            return false;\n        };\n    }\n    const b_facePlanes = getFacePlanes(b);\n    for (let facePlane of b_facePlanes) {\n        if (testSeparatingAxis(a, b, facePlane.normal)) {\n            return false;\n        }\n    }\n\n    const a_edges = getEdges(a);\n    const b_edges = getEdges(b);\n\n    for (let i = 0; i < a_edges.length; i++) {\n        for (let j = 0; j < b_edges.length; j++) {\n            const edge_i = a_edges[i].b.clone().sub(a_edges[i].a);\n            const edge_j = b_edges[j].b.clone().sub(b_edges[j].a);\n            let m = edge_i.clone().cross(edge_j);\n            if (m.length() !== 0) { // note to self: should use epsilon when checking for zero vector to improve stability\n                if (testSeparatingAxis(a, b, m)) {\n                    return false;\n                }\n            } else {\n                const edge_n = b_edges[j].b.clone().sub(a_edges[i].a);\n                m = edge_i.clone().cross(edge_n);\n                if (m.length() !== 0) {\n                    testSeparatingAxis(a, b, m);\n                } else {\n                    return true; // since edge_i and edge_2 are colinear\n                }\n            }\n        }\n    }\n\n    return true;\n}*/\n\n/*\nfunction getFaces(box: Box) {\n    const x = box.position.x;\n    const y = box.position.y;\n    const z = box.position.z;\n    const v1 = new Vector3(x - box.width/2, y - box.length/2, z - box.height/2);\n    const v2 = new Vector3(x - box.width/2, y + box.length/2, z - box.height/2);\n    const v3 = new Vector3(x + box.width/2, y + box.length/2, z - box.height/2);\n    const v4 = new Vector3(x + box.width/2, y - box.length/2, z - box.height/2);\n    const v5 = new Vector3(x - box.width/2, y - box.length/2, z + box.height/2);\n    const v6 = new Vector3(x - box.width/2, y + box.length/2, z + box.height/2);\n    const v7 = new Vector3(x + box.width/2, y + box.length/2, z + box.height/2);\n    const v8 = new Vector3(x + box.width/2, y - box.length/2, z + box.height/2);\n    const vertices = [v1, v2, v3, v4, v5, v6, v7, v8];\n\n    // rotate vertices\n    for (let vertex of vertices) {\n        // convert to body space, apply rotation, convert back to world space\n        vertex.sub(box.position);\n        vertex.applyQuaternion(box.rotation);\n        vertex.add(box.position);\n    }\n    \n    const f1 = { edges: [{a: v1, b: v2}, {a: v1, b: v4}, {a: v2, b: v3}, {a: v3, b: v4}] }; // bottom\n    const f2 = { edges: [{a: v5, b: v6}, {a: v5, b: v8}, {a: v6, b: v7}, {a: v7, b: v8}] }; // top\n    const f3 = { edges: [{a: v1, b: v2}, {a: v1, b: v5}, {a: v5, b: v6}, {a: v6, b: v2}] }; // left\n    const f4 = { edges: [{a: v4, b: v8}, {a: v4, b: v3}, {a: v8, b: v7}, {a: v7, b: v3}] }; // right\n    const f5 = { edges: [{a: v1, b: v4}, {a: v1, b: v5}, {a: v5, b: v8}, {a: v8, b: v4}] }; // front\n    const f6 = { edges: [{a: v2, b: v3}, {a: v2, b: v6}, {a: v6, b: v7}, {a: v7, b: v3}] }; // back\n    const faces = [f1, f2, f3, f4, f5, f6];\n    return faces;\n}*/\n\n/*\nexport function getAllBoundingBoxIntersections(boxes: Box[]) {\n    // create and sort intervals along x, y, and z\n    const x_intervals = [];\n    const y_intervals = [];\n    const z_intervals = [];\n    for(let box of boxes) {\n        const x_min = box.position.x - box.boundingBox.x/2;\n        const x_max = box.position.x + box.boundingBox.x/2;\n        x_intervals.push({ type: \"min\", value: x_min, object: box});\n        x_intervals.push({ type: \"max\", value: x_max, object: box});\n\n        \n        const y_min = box.position.y - box.boundingBox.y/2;\n        const y_max = box.position.y + box.boundingBox.y/2;\n        y_intervals.push({ type: \"min\", value: y_min, object: box});\n        y_intervals.push({ type: \"max\", value: y_max, object: box});\n\n        const z_min = box.position.z - box.boundingBox.z/2;\n        const z_max = box.position.z + box.boundingBox.z/2;\n        z_intervals.push({ type: \"min\", value: z_min, object: box});\n        z_intervals.push({ type: \"max\", value: z_max, object: box});\n    }\n    // note to self: switch to insertion sort and use normal merge sort only during the initialization frame\n    x_intervals.sort((a, b) => a.value - b.value);\n    //y_intervals.sort((a, b) => a.value - b.value);\n    //z_intervals.sort((a, b) => a.value - b.value);\n\n    // create a list of active intervals\n    const activeIntervals = [];\n}*/\n\n/*\nexport class World2 {\n    private objects: any[] = [];\n    private currentLoopInterval: any = null;\n\n    private characterForce: Vector3;\n\n    constructor() {\n        this.objects = [];\n\n        this.characterForce = new Vector3(0, 0, 0);\n    }\n\n    startLoop(): void {\n        const currentInstance = this;\n\n        // stop current loop if it exits\n        this.stopCurrentLoop();\n\n        let lastTimeCalled = performance.now();\n        let fps = 0;\n        let times: any[] = [];\n\n        function step() {\n            // calculate fps\n            const now = performance.now();\n            while (times.length > 0 && times[0] <= now - 1000) {\n                times.shift();\n            }\n            times.push(now);\n            fps = times.length;\n            // console.log(\"fps: \", fps);\n\n            for (let i = 0; i < currentInstance.objects.length; i++) {\n                currentInstance.objects[i].integrate(dt);\n            }\n        }\n\n        this.currentLoopInterval = setInterval(step, dt * 1000);\n    }\n\n    // Stops current loop if it exists.\n    stopCurrentLoop(): void {\n        if (this.currentLoopInterval) {\n            clearInterval(this.currentLoopInterval);\n        }\n    }\n\n    addObject(obj: any): void {\n        this.objects.push(obj);\n    }\n\n    getObjects(): any[] {\n        return this.objects;\n    }\n\n    updateCharacterForce(f: Vector3) {\n        this.characterForce = f;\n    }\n\n    detectCollisions(): void {\n\n    }\n\n    checkCollisionSpheres(s1: Sphere, s2: Sphere) {\n        const d = (s1.position.clone().sub(s2.position)).length(); // distance between centers\n\n        // collision if distance between spheres is smaller than sub of radiuses\n        if (d < (s1.radius + s2.radius)) {\n            return true;\n        }\n        return false;\n    }\n\n    resolveCollisionSpheres(s1: Sphere, s2: Sphere) {\n        // find unit vectors from s1 to s2 and s2 to s1\n        const u12 = (s2.position.clone().sub(s1.position)).normalize();\n        const u21 = u12.clone().multiplyScalar(-1);\n\n        // find components of v1 and v2 along and perpendicular to u\n        const v1_along_u12 = u12.clone().multiplyScalar(u12.dot(s1.velocity));\n        const v2_along_u21 = u21.clone().multiplyScalar(u21.dot(s2.velocity));\n\n        const v1_perp_u12 = s1.velocity.clone().sub(v1_along_u12);\n        const v2_perp_u21 = s2.velocity.clone().sub(v2_along_u21);\n\n        // calculate new velocities along u, assuming elastic collision\n        const m1 = 1/s1.inverseMass;\n        const m2 = 1/s2.inverseMass;\n        const v1_along_u_new = (v1_along_u12.clone().multiplyScalar((m1-m2)/(m1+m2))).addScaledVector(v2_along_u21, (2*m2)/(m1+m2));\n        const v2_along_u_new = (v1_along_u12.clone().multiplyScalar((2*m1)/(m1+m2))).addScaledVector(v2_along_u21, -(m1-m2)/(m1+m2));\n\n        // calculate and set new velocities\n        const v1_new = v1_along_u_new.clone().add(v1_perp_u12);\n        const v2_new = v2_along_u_new.clone().add(v2_perp_u21);\n\n        console.log(\"u: \", u12);\n        console.log(\"v1_new: \", v1_new);\n        console.log(\"v2_new\", v2_new);\n    }\n\n    clearCurrentLoop(): void {\n        clearInterval(this.currentLoopInterval);\n    }\n}*/\n\n/*\nfunction getFacePlanes(box: Box) {\n    const x = box.position.x;\n    const y = box.position.y;\n    const z = box.position.z;\n    const v1 = new Vector3(x - box.width/2, y - box.length/2, z - box.height/2);\n    const v2 = new Vector3(x - box.width/2, y + box.length/2, z - box.height/2);\n    const v3 = new Vector3(x + box.width/2, y + box.length/2, z - box.height/2);\n    const v4 = new Vector3(x + box.width/2, y - box.length/2, z - box.height/2);\n    const v5 = new Vector3(x - box.width/2, y - box.length/2, z + box.height/2);\n    const v6 = new Vector3(x - box.width/2, y + box.length/2, z + box.height/2);\n    const v7 = new Vector3(x + box.width/2, y + box.length/2, z + box.height/2);\n    const v8 = new Vector3(x + box.width/2, y - box.length/2, z + box.height/2);\n    const vertices = [v1, v2, v3, v4, v5, v6, v7, v8];\n\n    // rotate vertices\n    for (let vertex of vertices) {\n        // convert to body space, apply rotation, convert back to world space\n        vertex.sub(box.position);\n        vertex.applyQuaternion(box.rotation);\n        vertex.add(box.position);\n    }\n    const face1 = { normal: ((v2.clone().sub(v1)).cross(v4.clone().sub(v1))).normalize(), point: v1 } // bottom plane\n    const face2 = { normal: ((v8.clone().sub(v5)).cross(v6.clone().sub(v5))).normalize(), point: v5 } // top plane\n    const face3 = { normal: ((v5.clone().sub(v1)).cross(v2.clone().sub(v1))).normalize(), point: v1 } // left plane\n    const face4 = { normal: ((v3.clone().sub(v4)).cross(v8.clone().sub(v4))).normalize(), point: v4 } // top plane\n    const face5 = { normal: ((v4.clone().sub(v1)).cross(v5.clone().sub(v1))).normalize(), point: v1 } // front plane\n    const face6 = { normal: ((v2.clone().sub(v3)).cross(v7.clone().sub(v3))).normalize(), point: v3 } // back plane\n    const facePlanes = [face1, face2, face3, face4, face5, face6];\n    return facePlanes;\n}*/"],"mappings":"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},"metadata":{},"sourceType":"module"}