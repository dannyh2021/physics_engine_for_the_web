{"ast":null,"code":"var _jsxFileName = \"/Users/danny/Github/physics_engine_for_the_web/frontend/src/Playgrounds/Playground3.tsx\";\nimport React from \"react\";\nimport { World, checkCollision, getAllContacts, resolveCollision } from \"../physics_engine/physics_engine\";\nimport * as THREE from \"three\";\nimport { Vector3 } from \"three\";\nimport { Sphere } from \"../physics_engine/Sphere\";\nimport { Box } from \"../physics_engine/Box\";\nimport { Plane } from \"../physics_engine/Plane\";\nimport { OrbitControls } from \"three-orbitcontrols-ts\";\nimport { getQuaternionRotatingV1ToV2 } from \"../physics_engine/math_library\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CANVAS_WIDTH = 1000;\nconst CANVAS_HEIGHT = 500; // camera\n\nconst camera = new THREE.PerspectiveCamera(45, CANVAS_WIDTH / CANVAS_HEIGHT, 1, 1000);\ncamera.position.set(0, -CANVAS_HEIGHT / 6, CANVAS_HEIGHT / 6);\ncamera.up.set(0, 1, 0); // add lighting\n\nconst light_color = 0xffffff;\nconst intensity = 1;\nconst point_light = new THREE.PointLight(light_color, intensity);\npoint_light.position.set(10, 10, 50);\nconst ambient_light = new THREE.AmbientLight(light_color, 0.2);\nexport default class Playground3 extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = void 0;\n    this.w = void 0;\n    this.renderer = void 0;\n    this.animationRequestID = void 0;\n    this.scene = void 0;\n    this.canvasRef = /*#__PURE__*/React.createRef();\n    this.w = new World(); // graphics\n\n    this.renderer = null;\n    this.animationRequestID = null; // bindings\n\n    this.onRestart = this.onRestart.bind(this);\n    this.onResume = this.onResume.bind(this);\n    this.onPause = this.onPause.bind(this);\n  }\n\n  componentDidMount() {\n    // graphics\n    this.renderer = new THREE.WebGLRenderer({\n      canvas: this.canvasRef.current,\n      alpha: false\n    });\n    this.renderer.setSize(CANVAS_WIDTH, CANVAS_HEIGHT); // orbit controls\n\n    const controls = new OrbitControls(camera, this.renderer.domElement);\n    this.initialize();\n    this.onVisualize();\n  }\n\n  initialize() {\n    // cancel ongoing animation\n    if (this.animationRequestID) {\n      cancelAnimationFrame(this.animationRequestID);\n    }\n\n    this.w = new World();\n    this.scene = new THREE.Scene(); // set up objects\n\n    const sphere = new Sphere(new Vector3(-50, 10, 10), 5);\n    sphere.velocity = new Vector3(10, 0, 0);\n    const sphere2 = new Sphere(new Vector3(-10, 10, 10), 5);\n    const sphere3 = new Sphere(new Vector3(10, 10, 10), 5);\n    const box = new Box(new Vector3(30, 0, 10), 10, 10, 10);\n    const box2 = new Box(new Vector3(0, 0, 30), 10, 10, 10);\n    box2.rotation = getQuaternionRotatingV1ToV2(new Vector3(0, 0, 1), new Vector3(1, 1, 1).normalize());\n    box2.velocity = new Vector3(0, 0, -5);\n    box2.angularMomentum = new Vector3(0, 0, 0);\n    const box3 = new Box(new Vector3(0, 0, 0), 10, 20, 10);\n    box3.angularMomentum = new Vector3(0, 0, 0);\n    this.w.addObject(sphere);\n    this.w.addObject(sphere2);\n    this.w.addObject(sphere3);\n    this.w.addObject(box); //this.w.addObject(box2);\n    //this.w.addObject(box3);\n\n    const topBox = new Box(new Vector3(2, 0, 30), 10, 10, 10);\n    topBox.rotation.setFromAxisAngle(new Vector3(0, 1, 0), Math.PI / 4);\n    topBox.velocity.z = -5;\n    const bottomBox = new Box(new Vector3(0, 0, 0), 10, 10, 10);\n    bottomBox.rotation.setFromAxisAngle(new Vector3(1, 0, 0), Math.PI / 4); // this.w.addObject(topBox);\n    // this.w.addObject(bottomBox);\n\n    const leftBox = new Box(new Vector3(-30, 0, 0), 10, 10, 10); //leftBox.rotation = getQuaternionRotatingV1ToV2(new Vector3(1, 1, 1).normalize(), new Vector3(1, 0, 0.2).normalize());\n    //leftBox.rotation.setFromAxisAngle(new Vector3(0, 1, 0), Math.PI/4);\n\n    leftBox.velocity.x = 20;\n    const rightBox = new Box(new Vector3(0, 0, 0), 10, 10, 10); // this.w.addObject(leftBox);\n    // this.w.addObject(rightBox);\n    // add plane\n\n    const plane = new Plane(new Vector3(55, 0, 0), new Vector3(-1, 0, 0), 1000, 1000);\n    this.w.addObject(plane); // add object meshes and bounding box meshes to scene\n\n    for (let object of this.w.objects) {\n      this.scene.add(object.mesh);\n\n      if (object instanceof Plane) {\n        continue;\n      }\n\n      this.scene.add(object.boundingBoxMesh);\n    } // add gridHelper\n\n\n    const gridHelper = new THREE.GridHelper(100, 10);\n    gridHelper.rotateOnWorldAxis(new Vector3(1, 0, 0), Math.PI / 2);\n    this.scene.add(gridHelper); // add lighting\n\n    this.scene.add(point_light, ambient_light);\n  }\n\n  onVisualize() {\n    // cancel ongoing animation\n    if (this.animationRequestID) {\n      cancelAnimationFrame(this.animationRequestID);\n    }\n\n    const renderer = this.renderer;\n    const scene = this.scene;\n    const world = this.w;\n    const objects = world.objects;\n    let boundingBoxIntersections;\n    let contacts;\n    const currentInstance = this;\n\n    function animate() {\n      currentInstance.animationRequestID = requestAnimationFrame(animate); // update bounding box intersections and contacts, for visualization\n\n      boundingBoxIntersections = world.getAllBoundingBoxIntersections();\n      contacts = getAllContacts(boundingBoxIntersections); // resolve contacts\n\n      for (let contact of contacts) {\n        resolveCollision(contact);\n      } // physics step\n\n\n      world.integrateObjects(1 / 60); // graphics step\n\n      world.updateMeshes(); // reset mesh colors\n\n      for (let object of objects) {\n        object.mesh.material = new THREE.MeshPhongMaterial({\n          color: 0x00bcd6\n        });\n        object.mesh.material.opacity = 0.6;\n        object.mesh.material.transparent = true;\n\n        if (object instanceof Plane) {\n          object.mesh.material = new THREE.MeshPhongMaterial({\n            color: 0xffcb3e\n          });\n          continue;\n        }\n\n        object.boundingBoxMesh.material = new THREE.LineBasicMaterial({\n          color: 0xffffff\n        });\n      } // color the bound boxes of intersecting boxes\n\n\n      for (let intersection of boundingBoxIntersections) {\n        const a = intersection.a,\n              b = intersection.b;\n\n        if (!(a instanceof Plane) && !(b instanceof Plane)) {\n          a.boundingBoxMesh.material = new THREE.LineBasicMaterial({\n            color: 0xff0000\n          });\n          b.boundingBoxMesh.material = new THREE.LineBasicMaterial({\n            color: 0xff0000\n          });\n        } // check for collisions and color them\n\n\n        if (checkCollision(a, b)) {\n          const red_material = new THREE.MeshPhongMaterial({\n            color: 0xff0000\n          });\n          red_material.opacity = 0.6;\n          red_material.transparent = true;\n          a.mesh.material = red_material;\n          b.mesh.material = red_material;\n        }\n      }\n\n      const toBeRemoved = [];\n\n      for (let contact of contacts) {\n        const sphere_geometry = new THREE.SphereGeometry(1);\n        const material = new THREE.MeshBasicMaterial({\n          color: 0xffff00\n        });\n        const sphere = new THREE.Mesh(sphere_geometry, material);\n        sphere.position.set(contact.contactPoint.x, contact.contactPoint.y, contact.contactPoint.z);\n        scene.add(sphere);\n        toBeRemoved.push(sphere);\n        const dir = contact.contactNormal.clone().normalize();\n        const origin = contact.contactPoint;\n        const length = 20;\n        const hex = 0xffff00;\n        const arrowHelper = new THREE.ArrowHelper(dir, origin, length, hex);\n        scene.add(arrowHelper);\n        toBeRemoved.push(arrowHelper);\n\n        if (contact.type === \"vertex-face\") {} else if (contact.type === \"edge-edge\") {\n          const a_points = [contact.edge_a.a, contact.edge_a.b];\n          const b_points = [contact.edge_b.a, contact.edge_b.b];\n          const material = new THREE.LineBasicMaterial({\n            color: 0xffff00\n          });\n          const geometry_a = new THREE.BufferGeometry().setFromPoints(a_points);\n          const geometry_b = new THREE.BufferGeometry().setFromPoints(b_points);\n          const line_a = new THREE.Line(geometry_a, material);\n          const line_b = new THREE.Line(geometry_b, material);\n          scene.add(line_a);\n          scene.add(line_b);\n          toBeRemoved.push(line_a);\n          toBeRemoved.push(line_b);\n        } else {\n          console.error(\"contact type not recognized\");\n        }\n      }\n\n      currentInstance.renderer.render(scene, camera);\n\n      for (let object of toBeRemoved) {\n        scene.remove(object);\n      }\n    }\n\n    animate();\n  }\n\n  onRestart() {\n    this.initialize();\n    this.onVisualize();\n  }\n\n  onResume() {\n    this.onVisualize();\n  }\n\n  onPause() {\n    // cancel ongoing animation\n    if (this.animationRequestID) {\n      cancelAnimationFrame(this.animationRequestID);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playground\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Playground 3 page desu...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.onRestart,\n        children: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.onResume,\n        children: \"Resume\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.onPause,\n        children: \"Pause\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"canvas_container\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: this.canvasRef,\n          width: CANVAS_WIDTH,\n          height: CANVAS_HEIGHT\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"names":["React","World","checkCollision","getAllContacts","resolveCollision","THREE","Vector3","Sphere","Box","Plane","OrbitControls","getQuaternionRotatingV1ToV2","CANVAS_WIDTH","CANVAS_HEIGHT","camera","PerspectiveCamera","position","set","up","light_color","intensity","point_light","PointLight","ambient_light","AmbientLight","Playground3","Component","constructor","props","canvasRef","w","renderer","animationRequestID","scene","createRef","onRestart","bind","onResume","onPause","componentDidMount","WebGLRenderer","canvas","current","alpha","setSize","controls","domElement","initialize","onVisualize","cancelAnimationFrame","Scene","sphere","velocity","sphere2","sphere3","box","box2","rotation","normalize","angularMomentum","box3","addObject","topBox","setFromAxisAngle","Math","PI","z","bottomBox","leftBox","x","rightBox","plane","object","objects","add","mesh","boundingBoxMesh","gridHelper","GridHelper","rotateOnWorldAxis","world","boundingBoxIntersections","contacts","currentInstance","animate","requestAnimationFrame","getAllBoundingBoxIntersections","contact","integrateObjects","updateMeshes","material","MeshPhongMaterial","color","opacity","transparent","LineBasicMaterial","intersection","a","b","red_material","toBeRemoved","sphere_geometry","SphereGeometry","MeshBasicMaterial","Mesh","contactPoint","y","push","dir","contactNormal","clone","origin","length","hex","arrowHelper","ArrowHelper","type","a_points","edge_a","b_points","edge_b","geometry_a","BufferGeometry","setFromPoints","geometry_b","line_a","Line","line_b","console","error","render","remove"],"sources":["/Users/danny/Github/physics_engine_for_the_web/frontend/src/Playgrounds/Playground3.tsx"],"sourcesContent":["import React from \"react\";\nimport { World, checkCollision, getAllContacts, resolveCollision } from \"../physics_engine/physics_engine\";\nimport * as THREE from \"three\";\nimport { Matrix3, Scene, Vector3 } from \"three\";\nimport { Sphere } from \"../physics_engine/Sphere\";\nimport { Box } from \"../physics_engine/Box\";\nimport { Plane } from \"../physics_engine/Plane\";\nimport { OrbitControls } from \"three-orbitcontrols-ts\";\nimport { yRotationMatrix3, zRotationMatrix3, convertMatrix3ToMatrix4, xRotationMatrix3, getQuaternionRotatingV1ToV2 } from \"../physics_engine/math_library\";\n\nconst CANVAS_WIDTH = 1000;\nconst CANVAS_HEIGHT = 500;\n\n// camera\nconst camera = new THREE.PerspectiveCamera(45, CANVAS_WIDTH / CANVAS_HEIGHT, 1, 1000);\ncamera.position.set(0, -CANVAS_HEIGHT / 6, CANVAS_HEIGHT / 6);\ncamera.up.set(0, 1, 0);\n\n// add lighting\nconst light_color = 0xffffff;\nconst intensity = 1;\nconst point_light = new THREE.PointLight(light_color, intensity);\npoint_light.position.set(10, 10, 50);\n\nconst ambient_light = new THREE.AmbientLight(light_color, 0.2);\n\nexport default class Playground3 extends React.Component {\n    private canvasRef: any;\n\n    private w: World;\n\n    private renderer: any;\n    private animationRequestID: any;\n    private scene: THREE.Scene;\n\n    constructor(props: any) {\n        super(props);\n        this.canvasRef = React.createRef();\n        this.w = new World();\n\n        // graphics\n        this.renderer = null;\n        this.animationRequestID = null;\n\n        // bindings\n        this.onRestart = this.onRestart.bind(this);\n        this.onResume = this.onResume.bind(this);\n        this.onPause = this.onPause.bind(this);\n    }\n\n    componentDidMount(): void {\n        // graphics\n        this.renderer = new THREE.WebGLRenderer({ canvas: this.canvasRef.current, alpha: false })\n        this.renderer.setSize(CANVAS_WIDTH, CANVAS_HEIGHT);\n\n        // orbit controls\n        const controls = new OrbitControls(camera, this.renderer.domElement);\n\n        this.initialize();\n        this.onVisualize();\n    }\n\n    initialize(): void {\n        // cancel ongoing animation\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n\n        this.w = new World();\n        this.scene = new THREE.Scene();\n\n        // set up objects\n        const sphere = new Sphere(new Vector3(-50, 10, 10), 5);\n        sphere.velocity = new Vector3(10, 0, 0);\n        const sphere2 = new Sphere(new Vector3(-10, 10, 10), 5);\n        const sphere3 = new Sphere(new Vector3(10, 10, 10), 5);\n        const box = new Box(new Vector3(30, 0, 10), 10, 10, 10);\n\n        const box2 = new Box(new Vector3(0, 0, 30), 10, 10, 10);\n        box2.rotation = getQuaternionRotatingV1ToV2(new Vector3(0, 0, 1), new Vector3(1, 1, 1).normalize());\n\n        box2.velocity = new Vector3(0, 0, -5);\n        box2.angularMomentum = new Vector3(0, 0, 0);\n\n        const box3 = new Box(new Vector3(0, 0, 0), 10, 20, 10);\n        box3.angularMomentum = new Vector3(0, 0, 0);\n\n        this.w.addObject(sphere);\n        this.w.addObject(sphere2);\n        this.w.addObject(sphere3);\n        this.w.addObject(box);\n\n        //this.w.addObject(box2);\n        //this.w.addObject(box3);\n\n        const topBox = new Box(new Vector3(2, 0, 30), 10, 10, 10);\n        topBox.rotation.setFromAxisAngle(new Vector3(0, 1, 0), Math.PI/4);\n        topBox.velocity.z = -5;\n\n        const bottomBox = new Box(new Vector3(0, 0, 0), 10, 10, 10);\n        bottomBox.rotation.setFromAxisAngle(new Vector3(1, 0, 0), Math.PI/4);\n\n        // this.w.addObject(topBox);\n        // this.w.addObject(bottomBox);\n\n        const leftBox = new Box(new Vector3(-30, 0, 0), 10, 10, 10);\n        //leftBox.rotation = getQuaternionRotatingV1ToV2(new Vector3(1, 1, 1).normalize(), new Vector3(1, 0, 0.2).normalize());\n        //leftBox.rotation.setFromAxisAngle(new Vector3(0, 1, 0), Math.PI/4);\n        leftBox.velocity.x = 20;\n\n        const rightBox = new Box(new Vector3(0, 0, 0), 10, 10, 10);\n\n        // this.w.addObject(leftBox);\n        // this.w.addObject(rightBox);\n\n        // add plane\n        const plane = new Plane(new Vector3(55, 0, 0), new Vector3(-1, 0, 0), 1000, 1000);\n        this.w.addObject(plane);\n\n        // add object meshes and bounding box meshes to scene\n        for (let object of this.w.objects) {\n            this.scene.add(object.mesh);\n\n            if (object instanceof Plane) {\n                continue;\n            }\n            this.scene.add(object.boundingBoxMesh);\n        }\n\n        // add gridHelper\n        const gridHelper = new THREE.GridHelper( 100, 10 );\n        gridHelper.rotateOnWorldAxis(new Vector3(1, 0, 0), Math.PI/2);\n        this.scene.add(gridHelper);\n\n        // add lighting\n        this.scene.add(point_light, ambient_light);\n    }\n\n    onVisualize() {\n        // cancel ongoing animation\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n\n        const renderer = this.renderer;\n        const scene = this.scene;\n        const world = this.w;\n        const objects = world.objects;\n\n        let boundingBoxIntersections;\n        let contacts;\n\n        const currentInstance = this;\n        function animate() {\n            currentInstance.animationRequestID = requestAnimationFrame(animate);\n\n            // update bounding box intersections and contacts, for visualization\n            boundingBoxIntersections = world.getAllBoundingBoxIntersections();\n            contacts = getAllContacts(boundingBoxIntersections);\n\n            // resolve contacts\n            for (let contact of contacts) {\n                resolveCollision(contact);\n            }\n\n            // physics step\n            world.integrateObjects(1/60);\n\n            // graphics step\n            world.updateMeshes();\n\n            // reset mesh colors\n            for (let object of objects) {\n                object.mesh.material = new THREE.MeshPhongMaterial({ color: 0x00bcd6 })\n                object.mesh.material.opacity = 0.6;\n                object.mesh.material.transparent = true;\n\n                if (object instanceof Plane) {\n                    object.mesh.material = new THREE.MeshPhongMaterial({ color: 0xffcb3e });\n                    continue;\n                }\n                object.boundingBoxMesh.material = new THREE.LineBasicMaterial({ color: 0xffffff });\n            }\n\n            // color the bound boxes of intersecting boxes\n            for (let intersection of boundingBoxIntersections) {\n                const a = intersection.a, b = intersection.b;\n                if (!(a instanceof Plane) && ! (b instanceof Plane)) {\n                    a.boundingBoxMesh.material = new THREE.LineBasicMaterial({ color: 0xff0000 });\n                    b.boundingBoxMesh.material = new THREE.LineBasicMaterial({ color: 0xff0000 });\n                }\n\n                // check for collisions and color them\n                if (checkCollision(a, b)) {\n                    const red_material = new THREE.MeshPhongMaterial({ color: 0xff0000 });\n                    red_material.opacity = 0.6;\n                    red_material.transparent = true;\n                    a.mesh.material = red_material;\n                    b.mesh.material = red_material;\n                }\n            }\n\n            const toBeRemoved: any[] = [];\n\n            for (let contact of contacts) {\n                const sphere_geometry = new THREE.SphereGeometry(1);\n                const material = new THREE.MeshBasicMaterial({ color: 0xffff00 });\n                const sphere = new THREE.Mesh(sphere_geometry, material);\n                sphere.position.set(contact.contactPoint.x, contact.contactPoint.y, contact.contactPoint.z);\n                scene.add(sphere);\n                toBeRemoved.push(sphere);\n                const dir = contact.contactNormal.clone().normalize();\n                const origin = contact.contactPoint;\n                const length = 20;\n                const hex = 0xffff00;\n                const arrowHelper = new THREE.ArrowHelper(dir, origin, length, hex);\n                scene.add(arrowHelper);\n                toBeRemoved.push(arrowHelper);\n\n                if (contact.type === \"vertex-face\") {\n\n                } else if (contact.type === \"edge-edge\") {\n                    const a_points = [contact.edge_a.a, contact.edge_a.b];\n                    const b_points = [contact.edge_b.a, contact.edge_b.b];\n                    const material = new THREE.LineBasicMaterial({color: 0xffff00});\n                    const geometry_a = new THREE.BufferGeometry().setFromPoints(a_points);\n                    const geometry_b = new THREE.BufferGeometry().setFromPoints(b_points);\n                    const line_a = new THREE.Line(geometry_a, material);\n                    const line_b = new THREE.Line(geometry_b, material);\n                    scene.add(line_a);\n                    scene.add(line_b);\n                    toBeRemoved.push(line_a);\n                    toBeRemoved.push(line_b);\n                } else {\n                    console.error(\"contact type not recognized\");\n                }\n            }\n\n            currentInstance.renderer.render(scene, camera);\n            for (let object of toBeRemoved) {\n                scene.remove(object);\n            }\n        }\n\n        animate();\n    }\n\n    onRestart(): void {\n        this.initialize();\n        this.onVisualize();\n    }\n\n    onResume(): void {\n        this.onVisualize();\n    }\n\n    onPause(): void {\n        // cancel ongoing animation\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"playground\">\n                <h2>Playground 3 page desu...</h2>\n                <button onClick={this.onRestart}>Restart</button>\n                <button onClick={this.onResume}>Resume</button>\n                <button onClick={this.onPause}>Pause</button>\n                <div id=\"canvas_container\">\n                    <canvas ref={this.canvasRef} width={CANVAS_WIDTH} height={CANVAS_HEIGHT} />\n                </div>\n            </div>\n        )\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}