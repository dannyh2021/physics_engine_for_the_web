{"ast":null,"code":"/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { bindReporter } from './lib/bindReporter.js';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher.js';\nimport { initMetric } from './lib/initMetric.js';\nimport { observe } from './lib/observe.js';\nimport { onBFCacheRestore } from './lib/onBFCacheRestore.js';\nimport { onHidden } from './lib/onHidden.js';\nconst reportedMetricIDs = {};\nexport const getLCP = (onReport, reportAllChanges) => {\n  const visibilityWatcher = getVisibilityWatcher();\n  let metric = initMetric('LCP');\n  let report;\n\n  const entryHandler = entry => {\n    // The startTime attribute returns the value of the renderTime if it is not 0,\n    // and the value of the loadTime otherwise.\n    const value = entry.startTime; // If the page was hidden prior to paint time of the entry,\n    // ignore it and mark the metric as final, otherwise add the entry.\n\n    if (value < visibilityWatcher.firstHiddenTime) {\n      metric.value = value;\n      metric.entries.push(entry);\n      report();\n    }\n  };\n\n  const po = observe('largest-contentful-paint', entryHandler);\n\n  if (po) {\n    report = bindReporter(onReport, metric, reportAllChanges);\n\n    const stopListening = () => {\n      if (!reportedMetricIDs[metric.id]) {\n        po.takeRecords().map(entryHandler);\n        po.disconnect();\n        reportedMetricIDs[metric.id] = true;\n        report(true);\n      }\n    }; // Stop listening after input. Note: while scrolling is an input that\n    // stop LCP observation, it's unreliable since it can be programmatically\n    // generated. See: https://github.com/GoogleChrome/web-vitals/issues/75\n\n\n    ['keydown', 'click'].forEach(type => {\n      addEventListener(type, stopListening, {\n        once: true,\n        capture: true\n      });\n    });\n    onHidden(stopListening, true);\n    onBFCacheRestore(event => {\n      metric = initMetric('LCP');\n      report = bindReporter(onReport, metric, reportAllChanges);\n      requestAnimationFrame(() => {\n        requestAnimationFrame(() => {\n          metric.value = performance.now() - event.timeStamp;\n          reportedMetricIDs[metric.id] = true;\n          report(true);\n        });\n      });\n    });\n  }\n};","map":{"version":3,"names":["bindReporter","getVisibilityWatcher","initMetric","observe","onBFCacheRestore","onHidden","reportedMetricIDs","getLCP","onReport","reportAllChanges","visibilityWatcher","metric","report","entryHandler","entry","value","startTime","firstHiddenTime","entries","push","po","stopListening","id","takeRecords","map","disconnect","forEach","type","addEventListener","once","capture","event","requestAnimationFrame","performance","now","timeStamp"],"sources":["/Users/danny/Github/physics_engine_for_the_web/frontend/node_modules/web-vitals/dist/modules/getLCP.js"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { bindReporter } from './lib/bindReporter.js';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher.js';\nimport { initMetric } from './lib/initMetric.js';\nimport { observe } from './lib/observe.js';\nimport { onBFCacheRestore } from './lib/onBFCacheRestore.js';\nimport { onHidden } from './lib/onHidden.js';\nconst reportedMetricIDs = {};\nexport const getLCP = (onReport, reportAllChanges) => {\n    const visibilityWatcher = getVisibilityWatcher();\n    let metric = initMetric('LCP');\n    let report;\n    const entryHandler = (entry) => {\n        // The startTime attribute returns the value of the renderTime if it is not 0,\n        // and the value of the loadTime otherwise.\n        const value = entry.startTime;\n        // If the page was hidden prior to paint time of the entry,\n        // ignore it and mark the metric as final, otherwise add the entry.\n        if (value < visibilityWatcher.firstHiddenTime) {\n            metric.value = value;\n            metric.entries.push(entry);\n            report();\n        }\n    };\n    const po = observe('largest-contentful-paint', entryHandler);\n    if (po) {\n        report = bindReporter(onReport, metric, reportAllChanges);\n        const stopListening = () => {\n            if (!reportedMetricIDs[metric.id]) {\n                po.takeRecords().map(entryHandler);\n                po.disconnect();\n                reportedMetricIDs[metric.id] = true;\n                report(true);\n            }\n        };\n        // Stop listening after input. Note: while scrolling is an input that\n        // stop LCP observation, it's unreliable since it can be programmatically\n        // generated. See: https://github.com/GoogleChrome/web-vitals/issues/75\n        ['keydown', 'click'].forEach((type) => {\n            addEventListener(type, stopListening, { once: true, capture: true });\n        });\n        onHidden(stopListening, true);\n        onBFCacheRestore((event) => {\n            metric = initMetric('LCP');\n            report = bindReporter(onReport, metric, reportAllChanges);\n            requestAnimationFrame(() => {\n                requestAnimationFrame(() => {\n                    metric.value = performance.now() - event.timeStamp;\n                    reportedMetricIDs[metric.id] = true;\n                    report(true);\n                });\n            });\n        });\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,QAA6B,uBAA7B;AACA,SAASC,oBAAT,QAAqC,+BAArC;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,MAAMC,iBAAiB,GAAG,EAA1B;AACA,OAAO,MAAMC,MAAM,GAAG,CAACC,QAAD,EAAWC,gBAAX,KAAgC;EAClD,MAAMC,iBAAiB,GAAGT,oBAAoB,EAA9C;EACA,IAAIU,MAAM,GAAGT,UAAU,CAAC,KAAD,CAAvB;EACA,IAAIU,MAAJ;;EACA,MAAMC,YAAY,GAAIC,KAAD,IAAW;IAC5B;IACA;IACA,MAAMC,KAAK,GAAGD,KAAK,CAACE,SAApB,CAH4B,CAI5B;IACA;;IACA,IAAID,KAAK,GAAGL,iBAAiB,CAACO,eAA9B,EAA+C;MAC3CN,MAAM,CAACI,KAAP,GAAeA,KAAf;MACAJ,MAAM,CAACO,OAAP,CAAeC,IAAf,CAAoBL,KAApB;MACAF,MAAM;IACT;EACJ,CAXD;;EAYA,MAAMQ,EAAE,GAAGjB,OAAO,CAAC,0BAAD,EAA6BU,YAA7B,CAAlB;;EACA,IAAIO,EAAJ,EAAQ;IACJR,MAAM,GAAGZ,YAAY,CAACQ,QAAD,EAAWG,MAAX,EAAmBF,gBAAnB,CAArB;;IACA,MAAMY,aAAa,GAAG,MAAM;MACxB,IAAI,CAACf,iBAAiB,CAACK,MAAM,CAACW,EAAR,CAAtB,EAAmC;QAC/BF,EAAE,CAACG,WAAH,GAAiBC,GAAjB,CAAqBX,YAArB;QACAO,EAAE,CAACK,UAAH;QACAnB,iBAAiB,CAACK,MAAM,CAACW,EAAR,CAAjB,GAA+B,IAA/B;QACAV,MAAM,CAAC,IAAD,CAAN;MACH;IACJ,CAPD,CAFI,CAUJ;IACA;IACA;;;IACA,CAAC,SAAD,EAAY,OAAZ,EAAqBc,OAArB,CAA8BC,IAAD,IAAU;MACnCC,gBAAgB,CAACD,IAAD,EAAON,aAAP,EAAsB;QAAEQ,IAAI,EAAE,IAAR;QAAcC,OAAO,EAAE;MAAvB,CAAtB,CAAhB;IACH,CAFD;IAGAzB,QAAQ,CAACgB,aAAD,EAAgB,IAAhB,CAAR;IACAjB,gBAAgB,CAAE2B,KAAD,IAAW;MACxBpB,MAAM,GAAGT,UAAU,CAAC,KAAD,CAAnB;MACAU,MAAM,GAAGZ,YAAY,CAACQ,QAAD,EAAWG,MAAX,EAAmBF,gBAAnB,CAArB;MACAuB,qBAAqB,CAAC,MAAM;QACxBA,qBAAqB,CAAC,MAAM;UACxBrB,MAAM,CAACI,KAAP,GAAekB,WAAW,CAACC,GAAZ,KAAoBH,KAAK,CAACI,SAAzC;UACA7B,iBAAiB,CAACK,MAAM,CAACW,EAAR,CAAjB,GAA+B,IAA/B;UACAV,MAAM,CAAC,IAAD,CAAN;QACH,CAJoB,CAArB;MAKH,CANoB,CAArB;IAOH,CAVe,CAAhB;EAWH;AACJ,CA9CM"},"metadata":{},"sourceType":"module"}