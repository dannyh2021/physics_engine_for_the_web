{"ast":null,"code":"import { Vector3 } from \"three\";\nimport * as THREE from \"three\";\nexport class Plane {\n  // for graphics\n  constructor(point, normal, width, length) {\n    this.point = void 0;\n    this.normal = void 0;\n    this.width = void 0;\n    this.length = void 0;\n    this.boundingBox = void 0;\n    this.mesh = void 0;\n    this.point = point;\n    this.normal = normal;\n    this.width = width;\n    this.length = length;\n    const r = Math.sqrt(width * width + length * length);\n    this.boundingBox = new Vector3(r, r, r);\n    this.createMesh();\n  }\n\n  createMesh() {\n    const planeGeometry = new THREE.PlaneGeometry(this.width, this.length);\n    const material = new THREE.MeshPhongMaterial({\n      color: 0xffcb3e\n    });\n    this.mesh = new THREE.Mesh(planeGeometry, material);\n    this.mesh.position.set(this.point.x, this.point.y, this.point.z); // todo: set orientation based on normal\n  }\n\n}","map":{"version":3,"names":["Vector3","THREE","Plane","constructor","point","normal","width","length","boundingBox","mesh","r","Math","sqrt","createMesh","planeGeometry","PlaneGeometry","material","MeshPhongMaterial","color","Mesh","position","set","x","y","z"],"sources":["/Users/danny/Github/physics_engine_for_the_web/frontend/src/physics_engine/Plane.ts"],"sourcesContent":["import { Mesh, Vector3 } from \"three\";\nimport * as THREE from \"three\";\n\nexport class Plane {\n    public point: Vector3;\n    public normal: Vector3;\n\n    public width: number;\n    public length: number;\n\n    public boundingBox: Vector3;\n\n    // for graphics\n    public mesh: Mesh;\n\n    constructor(point: Vector3, normal: Vector3, width: number, length: number) {\n        this.point = point;\n        this.normal = normal;\n\n        this.width = width;\n        this.length = length;\n\n        const r = Math.sqrt(width*width + length*length);\n        this.boundingBox = new Vector3(r, r, r);\n\n        this.createMesh();\n    }\n\n    private createMesh(): void {\n        const planeGeometry = new THREE.PlaneGeometry(this.width, this.length);\n        const material = new THREE.MeshPhongMaterial({ color: 0xffcb3e });\n        this.mesh = new THREE.Mesh(planeGeometry, material);\n        this.mesh.position.set(this.point.x, this.point.y, this.point.z);\n        // todo: set orientation based on normal\n    }\n}"],"mappings":"AAAA,SAAeA,OAAf,QAA8B,OAA9B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAO,MAAMC,KAAN,CAAY;EASf;EAGAC,WAAW,CAACC,KAAD,EAAiBC,MAAjB,EAAkCC,KAAlC,EAAiDC,MAAjD,EAAiE;IAAA,KAXrEH,KAWqE;IAAA,KAVrEC,MAUqE;IAAA,KARrEC,KAQqE;IAAA,KAPrEC,MAOqE;IAAA,KALrEC,WAKqE;IAAA,KAFrEC,IAEqE;IACxE,KAAKL,KAAL,GAAaA,KAAb;IACA,KAAKC,MAAL,GAAcA,MAAd;IAEA,KAAKC,KAAL,GAAaA,KAAb;IACA,KAAKC,MAAL,GAAcA,MAAd;IAEA,MAAMG,CAAC,GAAGC,IAAI,CAACC,IAAL,CAAUN,KAAK,GAACA,KAAN,GAAcC,MAAM,GAACA,MAA/B,CAAV;IACA,KAAKC,WAAL,GAAmB,IAAIR,OAAJ,CAAYU,CAAZ,EAAeA,CAAf,EAAkBA,CAAlB,CAAnB;IAEA,KAAKG,UAAL;EACH;;EAEOA,UAAU,GAAS;IACvB,MAAMC,aAAa,GAAG,IAAIb,KAAK,CAACc,aAAV,CAAwB,KAAKT,KAA7B,EAAoC,KAAKC,MAAzC,CAAtB;IACA,MAAMS,QAAQ,GAAG,IAAIf,KAAK,CAACgB,iBAAV,CAA4B;MAAEC,KAAK,EAAE;IAAT,CAA5B,CAAjB;IACA,KAAKT,IAAL,GAAY,IAAIR,KAAK,CAACkB,IAAV,CAAeL,aAAf,EAA8BE,QAA9B,CAAZ;IACA,KAAKP,IAAL,CAAUW,QAAV,CAAmBC,GAAnB,CAAuB,KAAKjB,KAAL,CAAWkB,CAAlC,EAAqC,KAAKlB,KAAL,CAAWmB,CAAhD,EAAmD,KAAKnB,KAAL,CAAWoB,CAA9D,EAJuB,CAKvB;EACH;;AA/Bc"},"metadata":{},"sourceType":"module"}