{"ast":null,"code":"import { Vector3, Matrix3 } from \"three\";\nexport class Box {\n  // the orientation\n  constructor(position, width, length, height) {\n    this.position = void 0;\n    this.momentum = void 0;\n    this.rotation = void 0;\n    this.angularMomentum = void 0;\n    this.inverseMass = void 0;\n    this.width = void 0;\n    this.length = void 0;\n    this.height = void 0;\n    this.position = position;\n    this.momentum = new Vector3(0, 0, 0);\n    this.rotation = new Matrix3();\n    this.width = width;\n    this.length = length;\n    this.height = height;\n    this.inverseMass = 1 / (width * length * height);\n  }\n\n  integrate(duration) {\n    // Don't integrate if mass is infinite or duration <= 0.\n    if (this.inverseMass <= 0 || duration <= 0) this.position.addScaledVector(this.momentum, this.inverseMass);\n    return;\n  }\n\n}","map":{"version":3,"names":["Vector3","Matrix3","Box","constructor","position","width","length","height","momentum","rotation","angularMomentum","inverseMass","integrate","duration","addScaledVector"],"sources":["/Users/danny/Github/physics_engine_for_the_web/frontend/src/physics_engine/Box.ts"],"sourcesContent":["import * as THREE from \"three\";\nimport { Vector3, Matrix3 } from \"three\";\n\nexport class Box {\n    public position: Vector3;\n    public momentum: Vector3;\n\n    public rotation: Matrix3; // the orientation\n    public angularMomentum: Vector3;\n\n    public inverseMass: number;\n\n    public width: number;\n    public length: number;\n    public height: number;\n\n    constructor(position: Vector3, width: number, length: number, height: number) {\n        this.position = position;\n        this.momentum = new Vector3(0, 0, 0);\n\n        this.rotation = new Matrix3();\n\n        this.width = width;\n        this.length = length;\n        this.height = height;\n\n        this.inverseMass = 1 / (width * length * height);\n    }\n\n    integrate(duration: number): void {\n        // Don't integrate if mass is infinite or duration <= 0.\n        if (this.inverseMass <= 0 || duration <= 0)\n\n        this.position.addScaledVector(this.momentum, this.inverseMass);\n        \n        return;\n    }\n}"],"mappings":"AACA,SAASA,OAAT,EAAkBC,OAAlB,QAAiC,OAAjC;AAEA,OAAO,MAAMC,GAAN,CAAU;EAIa;EAS1BC,WAAW,CAACC,QAAD,EAAoBC,KAApB,EAAmCC,MAAnC,EAAmDC,MAAnD,EAAmE;IAAA,KAZvEH,QAYuE;IAAA,KAXvEI,QAWuE;IAAA,KATvEC,QASuE;IAAA,KARvEC,eAQuE;IAAA,KANvEC,WAMuE;IAAA,KAJvEN,KAIuE;IAAA,KAHvEC,MAGuE;IAAA,KAFvEC,MAEuE;IAC1E,KAAKH,QAAL,GAAgBA,QAAhB;IACA,KAAKI,QAAL,GAAgB,IAAIR,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAhB;IAEA,KAAKS,QAAL,GAAgB,IAAIR,OAAJ,EAAhB;IAEA,KAAKI,KAAL,GAAaA,KAAb;IACA,KAAKC,MAAL,GAAcA,MAAd;IACA,KAAKC,MAAL,GAAcA,MAAd;IAEA,KAAKI,WAAL,GAAmB,KAAKN,KAAK,GAAGC,MAAR,GAAiBC,MAAtB,CAAnB;EACH;;EAEDK,SAAS,CAACC,QAAD,EAAyB;IAC9B;IACA,IAAI,KAAKF,WAAL,IAAoB,CAApB,IAAyBE,QAAQ,IAAI,CAAzC,EAEA,KAAKT,QAAL,CAAcU,eAAd,CAA8B,KAAKN,QAAnC,EAA6C,KAAKG,WAAlD;IAEA;EACH;;AAjCY"},"metadata":{},"sourceType":"module"}