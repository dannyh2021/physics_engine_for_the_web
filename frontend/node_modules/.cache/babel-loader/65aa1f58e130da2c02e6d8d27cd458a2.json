{"ast":null,"code":"/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { onBFCacheRestore } from './onBFCacheRestore.js';\nimport { onHidden } from './onHidden.js';\nlet firstHiddenTime = -1;\n\nconst initHiddenTime = () => {\n  return document.visibilityState === 'hidden' ? 0 : Infinity;\n};\n\nconst trackChanges = () => {\n  // Update the time if/when the document becomes hidden.\n  onHidden(_ref => {\n    let {\n      timeStamp\n    } = _ref;\n    firstHiddenTime = timeStamp;\n  }, true);\n};\n\nexport const getVisibilityWatcher = () => {\n  if (firstHiddenTime < 0) {\n    // If the document is hidden when this code runs, assume it was hidden\n    // since navigation start. This isn't a perfect heuristic, but it's the\n    // best we can do until an API is available to support querying past\n    // visibilityState.\n    if (window.__WEB_VITALS_POLYFILL__) {\n      firstHiddenTime = window.webVitals.firstHiddenTime;\n\n      if (firstHiddenTime === Infinity) {\n        trackChanges();\n      }\n    } else {\n      firstHiddenTime = initHiddenTime();\n      trackChanges();\n    } // Reset the time on bfcache restores.\n\n\n    onBFCacheRestore(() => {\n      // Schedule a task in order to track the `visibilityState` once it's\n      // had an opportunity to change to visible in all browsers.\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=1133363\n      setTimeout(() => {\n        firstHiddenTime = initHiddenTime();\n        trackChanges();\n      }, 0);\n    });\n  }\n\n  return {\n    get firstHiddenTime() {\n      return firstHiddenTime;\n    }\n\n  };\n};","map":{"version":3,"names":["onBFCacheRestore","onHidden","firstHiddenTime","initHiddenTime","document","visibilityState","Infinity","trackChanges","timeStamp","getVisibilityWatcher","window","__WEB_VITALS_POLYFILL__","webVitals","setTimeout"],"sources":["/Users/danny/Github/physics_engine_for_the_web/frontend/node_modules/web-vitals/dist/modules/lib/getVisibilityWatcher.js"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { onBFCacheRestore } from './onBFCacheRestore.js';\nimport { onHidden } from './onHidden.js';\nlet firstHiddenTime = -1;\nconst initHiddenTime = () => {\n    return document.visibilityState === 'hidden' ? 0 : Infinity;\n};\nconst trackChanges = () => {\n    // Update the time if/when the document becomes hidden.\n    onHidden(({ timeStamp }) => {\n        firstHiddenTime = timeStamp;\n    }, true);\n};\nexport const getVisibilityWatcher = () => {\n    if (firstHiddenTime < 0) {\n        // If the document is hidden when this code runs, assume it was hidden\n        // since navigation start. This isn't a perfect heuristic, but it's the\n        // best we can do until an API is available to support querying past\n        // visibilityState.\n        if (window.__WEB_VITALS_POLYFILL__) {\n            firstHiddenTime = window.webVitals.firstHiddenTime;\n            if (firstHiddenTime === Infinity) {\n                trackChanges();\n            }\n        }\n        else {\n            firstHiddenTime = initHiddenTime();\n            trackChanges();\n        }\n        // Reset the time on bfcache restores.\n        onBFCacheRestore(() => {\n            // Schedule a task in order to track the `visibilityState` once it's\n            // had an opportunity to change to visible in all browsers.\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=1133363\n            setTimeout(() => {\n                firstHiddenTime = initHiddenTime();\n                trackChanges();\n            }, 0);\n        });\n    }\n    return {\n        get firstHiddenTime() {\n            return firstHiddenTime;\n        }\n    };\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,gBAAT,QAAiC,uBAAjC;AACA,SAASC,QAAT,QAAyB,eAAzB;AACA,IAAIC,eAAe,GAAG,CAAC,CAAvB;;AACA,MAAMC,cAAc,GAAG,MAAM;EACzB,OAAOC,QAAQ,CAACC,eAAT,KAA6B,QAA7B,GAAwC,CAAxC,GAA4CC,QAAnD;AACH,CAFD;;AAGA,MAAMC,YAAY,GAAG,MAAM;EACvB;EACAN,QAAQ,CAAC,QAAmB;IAAA,IAAlB;MAAEO;IAAF,CAAkB;IACxBN,eAAe,GAAGM,SAAlB;EACH,CAFO,EAEL,IAFK,CAAR;AAGH,CALD;;AAMA,OAAO,MAAMC,oBAAoB,GAAG,MAAM;EACtC,IAAIP,eAAe,GAAG,CAAtB,EAAyB;IACrB;IACA;IACA;IACA;IACA,IAAIQ,MAAM,CAACC,uBAAX,EAAoC;MAChCT,eAAe,GAAGQ,MAAM,CAACE,SAAP,CAAiBV,eAAnC;;MACA,IAAIA,eAAe,KAAKI,QAAxB,EAAkC;QAC9BC,YAAY;MACf;IACJ,CALD,MAMK;MACDL,eAAe,GAAGC,cAAc,EAAhC;MACAI,YAAY;IACf,CAdoB,CAerB;;;IACAP,gBAAgB,CAAC,MAAM;MACnB;MACA;MACA;MACAa,UAAU,CAAC,MAAM;QACbX,eAAe,GAAGC,cAAc,EAAhC;QACAI,YAAY;MACf,CAHS,EAGP,CAHO,CAAV;IAIH,CARe,CAAhB;EASH;;EACD,OAAO;IACH,IAAIL,eAAJ,GAAsB;MAClB,OAAOA,eAAP;IACH;;EAHE,CAAP;AAKH,CAhCM"},"metadata":{},"sourceType":"module"}