{"ast":null,"code":"var _jsxFileName = \"/Users/danny/Github/physics_engine_for_the_web/frontend/src/Playgrounds/Playground3.tsx\";\nimport React from \"react\";\nimport { World, checkCollision, getAllContacts, resolveCollision } from \"../physics_engine/physics_engine\";\nimport * as THREE from \"three\";\nimport { Vector3 } from \"three\";\nimport { Sphere } from \"../physics_engine/Sphere\";\nimport { Box } from \"../physics_engine/Box\";\nimport { Plane } from \"../physics_engine/Plane\";\nimport { OrbitControls } from \"three-orbitcontrols-ts\";\nimport { getQuaternionRotatingV1ToV2 } from \"../physics_engine/math_library\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CANVAS_WIDTH = 1000;\nconst CANVAS_HEIGHT = 500; // camera\n\nconst camera = new THREE.PerspectiveCamera(45, CANVAS_WIDTH / CANVAS_HEIGHT, 1, 1000);\ncamera.position.set(0, -CANVAS_HEIGHT / 6, CANVAS_HEIGHT / 6);\ncamera.up.set(0, 1, 0); // add lighting\n\nconst light_color = 0xffffff;\nconst intensity = 1;\nconst point_light = new THREE.PointLight(light_color, intensity);\npoint_light.position.set(10, 10, 50);\nconst ambient_light = new THREE.AmbientLight(light_color, 0.2);\nexport default class Playground3 extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = void 0;\n    this.w = void 0;\n    this.renderer = void 0;\n    this.animationRequestID = void 0;\n    this.scene = void 0;\n    this.canvasRef = /*#__PURE__*/React.createRef();\n    this.w = new World(); // graphics\n\n    this.renderer = null;\n    this.animationRequestID = null; // bindings\n\n    this.onRestart = this.onRestart.bind(this);\n    this.onResume = this.onResume.bind(this);\n    this.onPause = this.onPause.bind(this);\n  }\n\n  componentDidMount() {\n    // graphics\n    this.renderer = new THREE.WebGLRenderer({\n      canvas: this.canvasRef.current,\n      alpha: false\n    });\n    this.renderer.setSize(CANVAS_WIDTH, CANVAS_HEIGHT); // orbit controls\n\n    const controls = new OrbitControls(camera, this.renderer.domElement);\n    this.initialize();\n    this.onVisualize();\n  }\n\n  initialize() {\n    // cancel ongoing animation\n    if (this.animationRequestID) {\n      cancelAnimationFrame(this.animationRequestID);\n    }\n\n    this.w = new World();\n    this.scene = new THREE.Scene(); // set up objects\n\n    const sphere = new Sphere(new Vector3(-50, 0, 10), 5);\n    sphere.velocity = new Vector3(10, 0, 0);\n    const sphere2 = new Sphere(new Vector3(0, 30, 10), 5);\n    const box = new Box(new Vector3(0, -5, 5), 10, 10, 10);\n    box.angularMomentum = new Vector3(0, 0, 0);\n    const box2 = new Box(new Vector3(0, 0, 30), 10, 10, 10);\n    box2.rotation = getQuaternionRotatingV1ToV2(new Vector3(0, 0, 1), new Vector3(1, 1, 1).normalize());\n    box2.velocity = new Vector3(0, 0, -5);\n    box2.angularMomentum = new Vector3(0, 0, 0);\n    const box3 = new Box(new Vector3(0, 0, 0), 10, 10, 10);\n    box3.angularMomentum = new Vector3(0, 0, 0);\n    this.w.addObject(sphere); // this.w.addObject(sphere2);\n\n    this.w.addObject(box); //this.w.addObject(box2);\n    //this.w.addObject(box3);\n    // add plane\n\n    const plane = new Plane(new Vector3(55, 0, 0), new Vector3(-1, 0, 0), 1000, 1000); // this.w.addObject(plane);\n    // add object meshes and bounding box meshes to scene\n\n    for (let object of this.w.objects) {\n      this.scene.add(object.mesh);\n\n      if (object instanceof Plane) {\n        continue;\n      }\n\n      this.scene.add(object.boundingBoxMesh);\n    } // add gridHelper\n\n\n    const gridHelper = new THREE.GridHelper(100, 10);\n    gridHelper.rotateOnWorldAxis(new Vector3(1, 0, 0), Math.PI / 2);\n    this.scene.add(gridHelper); // add lighting\n\n    this.scene.add(point_light, ambient_light);\n  }\n\n  onVisualize() {\n    // cancel ongoing animation\n    if (this.animationRequestID) {\n      cancelAnimationFrame(this.animationRequestID);\n    }\n\n    const renderer = this.renderer;\n    const scene = this.scene;\n    const world = this.w;\n    const objects = world.objects;\n    let boundingBoxIntersections;\n    let contacts;\n    const currentInstance = this;\n\n    function animate() {\n      currentInstance.animationRequestID = requestAnimationFrame(animate); // update bounding box intersections and contacts, for visualization\n\n      boundingBoxIntersections = world.getAllBoundingBoxIntersections();\n      contacts = getAllContacts(boundingBoxIntersections); // physics step\n\n      world.integrateObjects(1 / 60); // graphics step\n\n      world.updateMeshes(); // reset mesh colors\n\n      for (let object of objects) {\n        if (object instanceof Plane) {\n          continue;\n        }\n\n        object.mesh.material = new THREE.MeshPhongMaterial({\n          color: 0x00bcd6\n        });\n        object.boundingBoxMesh.material = new THREE.LineBasicMaterial({\n          color: 0xffffff\n        });\n      } // color the bound boxes of intersecting boxes\n\n\n      for (let intersection of boundingBoxIntersections) {\n        const a = intersection.a,\n              b = intersection.b;\n\n        if (a instanceof Plane || b instanceof Plane) {\n          continue;\n        }\n\n        a.boundingBoxMesh.material = new THREE.LineBasicMaterial({\n          color: 0xff0000\n        });\n        b.boundingBoxMesh.material = new THREE.LineBasicMaterial({\n          color: 0xff0000\n        }); // check for collisions and color them\n\n        if (checkCollision(a, b)) {\n          const red_material = new THREE.MeshPhongMaterial({\n            color: 0xff0000\n          });\n          red_material.opacity = 0.6;\n          red_material.transparent = true;\n          a.mesh.material = red_material;\n          b.mesh.material = red_material;\n        }\n      }\n\n      const toBeRemoved = [];\n\n      for (let contact of contacts) {\n        const sphere_geometry = new THREE.SphereGeometry(1);\n        const material = new THREE.MeshBasicMaterial({\n          color: 0xffff00\n        });\n        const sphere = new THREE.Mesh(sphere_geometry, material);\n        sphere.position.set(contact.contactPoint.x, contact.contactPoint.y, contact.contactPoint.z);\n        scene.add(sphere);\n        toBeRemoved.push(sphere);\n        const dir = contact.contactNormal.clone().normalize();\n        const origin = contact.contactPoint;\n        const length = 20;\n        const hex = 0xffff00;\n        const arrowHelper = new THREE.ArrowHelper(dir, origin, length, hex);\n        scene.add(arrowHelper);\n        toBeRemoved.push(arrowHelper);\n        console.log(\"contact: \", contact);\n        resolveCollision(contact);\n\n        if (contact.type === \"vertex-face\") {} else if (contact.type === \"edge-edge\") {// console.log(\"edge: \", contact.);\n        } else {\n          console.error(\"contact type not recognized\");\n        }\n      }\n\n      currentInstance.renderer.render(scene, camera);\n\n      for (let object of toBeRemoved) {\n        scene.remove(object);\n      }\n    }\n\n    animate();\n  }\n\n  onRestart() {\n    this.initialize();\n    this.onVisualize();\n  }\n\n  onResume() {\n    this.onVisualize();\n  }\n\n  onPause() {\n    // cancel ongoing animation\n    if (this.animationRequestID) {\n      cancelAnimationFrame(this.animationRequestID);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playground\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Playground 3 page desu...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.onRestart,\n        children: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.onResume,\n        children: \"Resume\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.onPause,\n        children: \"Pause\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"canvas_container\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: this.canvasRef,\n          width: CANVAS_WIDTH,\n          height: CANVAS_HEIGHT\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nfunction convertMatrix3toMatrix4(arg0) {\n  throw new Error(\"Function not implemented.\");\n}","map":{"version":3,"names":["React","World","checkCollision","getAllContacts","resolveCollision","THREE","Vector3","Sphere","Box","Plane","OrbitControls","getQuaternionRotatingV1ToV2","CANVAS_WIDTH","CANVAS_HEIGHT","camera","PerspectiveCamera","position","set","up","light_color","intensity","point_light","PointLight","ambient_light","AmbientLight","Playground3","Component","constructor","props","canvasRef","w","renderer","animationRequestID","scene","createRef","onRestart","bind","onResume","onPause","componentDidMount","WebGLRenderer","canvas","current","alpha","setSize","controls","domElement","initialize","onVisualize","cancelAnimationFrame","Scene","sphere","velocity","sphere2","box","angularMomentum","box2","rotation","normalize","box3","addObject","plane","object","objects","add","mesh","boundingBoxMesh","gridHelper","GridHelper","rotateOnWorldAxis","Math","PI","world","boundingBoxIntersections","contacts","currentInstance","animate","requestAnimationFrame","getAllBoundingBoxIntersections","integrateObjects","updateMeshes","material","MeshPhongMaterial","color","LineBasicMaterial","intersection","a","b","red_material","opacity","transparent","toBeRemoved","contact","sphere_geometry","SphereGeometry","MeshBasicMaterial","Mesh","contactPoint","x","y","z","push","dir","contactNormal","clone","origin","length","hex","arrowHelper","ArrowHelper","console","log","type","error","render","remove","convertMatrix3toMatrix4","arg0","Error"],"sources":["/Users/danny/Github/physics_engine_for_the_web/frontend/src/Playgrounds/Playground3.tsx"],"sourcesContent":["import React from \"react\";\nimport { World, checkCollision, getAllContacts, resolveCollision } from \"../physics_engine/physics_engine\";\nimport * as THREE from \"three\";\nimport { Matrix3, Scene, Vector3 } from \"three\";\nimport { Sphere } from \"../physics_engine/Sphere\";\nimport { Box } from \"../physics_engine/Box\";\nimport { Plane } from \"../physics_engine/Plane\";\nimport { OrbitControls } from \"three-orbitcontrols-ts\";\nimport { yRotationMatrix3, zRotationMatrix3, convertMatrix3ToMatrix4, xRotationMatrix3, getQuaternionRotatingV1ToV2 } from \"../physics_engine/math_library\";\n\nconst CANVAS_WIDTH = 1000;\nconst CANVAS_HEIGHT = 500;\n\n// camera\nconst camera = new THREE.PerspectiveCamera(45, CANVAS_WIDTH / CANVAS_HEIGHT, 1, 1000);\ncamera.position.set(0, -CANVAS_HEIGHT / 6, CANVAS_HEIGHT / 6);\ncamera.up.set(0, 1, 0);\n\n// add lighting\nconst light_color = 0xffffff;\nconst intensity = 1;\nconst point_light = new THREE.PointLight(light_color, intensity);\npoint_light.position.set(10, 10, 50);\n\nconst ambient_light = new THREE.AmbientLight(light_color, 0.2);\n\nexport default class Playground3 extends React.Component {\n    private canvasRef: any;\n\n    private w: World;\n\n    private renderer: any;\n    private animationRequestID: any;\n    private scene: THREE.Scene;\n\n    constructor(props: any) {\n        super(props);\n        this.canvasRef = React.createRef();\n        this.w = new World();\n\n        // graphics\n        this.renderer = null;\n        this.animationRequestID = null;\n\n        // bindings\n        this.onRestart = this.onRestart.bind(this);\n        this.onResume = this.onResume.bind(this);\n        this.onPause = this.onPause.bind(this);\n    }\n\n    componentDidMount(): void {\n        // graphics\n        this.renderer = new THREE.WebGLRenderer({ canvas: this.canvasRef.current, alpha: false })\n        this.renderer.setSize(CANVAS_WIDTH, CANVAS_HEIGHT);\n\n        // orbit controls\n        const controls = new OrbitControls(camera, this.renderer.domElement);\n\n        this.initialize();\n        this.onVisualize();\n    }\n\n    initialize(): void {\n        // cancel ongoing animation\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n\n        this.w = new World();\n        this.scene = new THREE.Scene();\n\n        // set up objects\n        const sphere = new Sphere(new Vector3(-50, 0, 10), 5);\n        sphere.velocity = new Vector3(10, 0, 0);\n        const sphere2 = new Sphere(new Vector3(0, 30, 10), 5);\n\n        const box = new Box(new Vector3(0, -5, 5), 10, 10, 10);\n        box.angularMomentum = new Vector3(0, 0, 0);\n\n        const box2 = new Box(new Vector3(0, 0, 30), 10, 10, 10);\n        box2.rotation = getQuaternionRotatingV1ToV2(new Vector3(0, 0, 1), new Vector3(1, 1, 1).normalize());\n\n        box2.velocity = new Vector3(0, 0, -5);\n        box2.angularMomentum = new Vector3(0, 0, 0);\n\n        const box3 = new Box(new Vector3(0, 0, 0), 10, 10, 10);\n        box3.angularMomentum = new Vector3(0, 0, 0);\n\n        this.w.addObject(sphere);\n        // this.w.addObject(sphere2);\n        this.w.addObject(box);\n\n        //this.w.addObject(box2);\n        //this.w.addObject(box3);\n\n        // add plane\n        const plane = new Plane(new Vector3(55, 0, 0), new Vector3(-1, 0, 0), 1000, 1000);\n        // this.w.addObject(plane);\n\n        // add object meshes and bounding box meshes to scene\n        for (let object of this.w.objects) {\n            this.scene.add(object.mesh);\n\n            if (object instanceof Plane) {\n                continue;\n            }\n            this.scene.add(object.boundingBoxMesh);\n        }\n\n        // add gridHelper\n        const gridHelper = new THREE.GridHelper( 100, 10 );\n        gridHelper.rotateOnWorldAxis(new Vector3(1, 0, 0), Math.PI/2);\n        this.scene.add(gridHelper);\n\n        // add lighting\n        this.scene.add(point_light, ambient_light);\n    }\n\n    onVisualize() {\n        // cancel ongoing animation\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n\n        const renderer = this.renderer;\n        const scene = this.scene;\n        const world = this.w;\n        const objects = world.objects;\n\n        let boundingBoxIntersections;\n        let contacts;\n\n        const currentInstance = this;\n        function animate() {\n            currentInstance.animationRequestID = requestAnimationFrame(animate);\n\n            // update bounding box intersections and contacts, for visualization\n            boundingBoxIntersections = world.getAllBoundingBoxIntersections();\n            contacts = getAllContacts(boundingBoxIntersections);\n\n            // physics step\n            world.integrateObjects(1/60);\n\n            // graphics step\n            world.updateMeshes();\n\n            // reset mesh colors\n            for (let object of objects) {\n                if (object instanceof Plane) {\n                    continue;\n                }\n\n                object.mesh.material = new THREE.MeshPhongMaterial({ color: 0x00bcd6 })\n                object.boundingBoxMesh.material = new THREE.LineBasicMaterial({ color: 0xffffff });\n            }\n\n            // color the bound boxes of intersecting boxes\n            for (let intersection of boundingBoxIntersections) {\n                const a = intersection.a, b = intersection.b;\n                if (a instanceof Plane || b instanceof Plane) {\n                    continue;\n                }\n\n                a.boundingBoxMesh.material = new THREE.LineBasicMaterial({ color: 0xff0000 });\n                b.boundingBoxMesh.material = new THREE.LineBasicMaterial({ color: 0xff0000 });\n\n                // check for collisions and color them\n                if (checkCollision(a, b)) {\n                    const red_material = new THREE.MeshPhongMaterial({ color: 0xff0000 });\n                    red_material.opacity = 0.6;\n                    red_material.transparent = true;\n                    a.mesh.material = red_material;\n                    b.mesh.material = red_material;\n                }\n            }\n\n            const toBeRemoved: any[] = [];\n\n            for (let contact of contacts) {\n                const sphere_geometry = new THREE.SphereGeometry(1);\n                const material = new THREE.MeshBasicMaterial({ color: 0xffff00 });\n                const sphere = new THREE.Mesh(sphere_geometry, material);\n                sphere.position.set(contact.contactPoint.x, contact.contactPoint.y, contact.contactPoint.z);\n                scene.add(sphere);\n                toBeRemoved.push(sphere);\n                const dir = contact.contactNormal.clone().normalize();\n                const origin = contact.contactPoint;\n                const length = 20;\n                const hex = 0xffff00;\n                const arrowHelper = new THREE.ArrowHelper(dir, origin, length, hex);\n                scene.add(arrowHelper);\n                toBeRemoved.push(arrowHelper);\n\n                console.log(\"contact: \", contact);\n\n                resolveCollision(contact);\n\n                if (contact.type === \"vertex-face\") {\n\n                } else if (contact.type === \"edge-edge\") {\n                    // console.log(\"edge: \", contact.);\n                } else {\n                    console.error(\"contact type not recognized\");\n                }\n            }\n\n            currentInstance.renderer.render(scene, camera);\n            for (let object of toBeRemoved) {\n                scene.remove(object);\n            }\n        }\n\n        animate();\n    }\n\n    onRestart(): void {\n        this.initialize();\n        this.onVisualize();\n    }\n\n    onResume(): void {\n        this.onVisualize();\n    }\n\n    onPause(): void {\n        // cancel ongoing animation\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"playground\">\n                <h2>Playground 3 page desu...</h2>\n                <button onClick={this.onRestart}>Restart</button>\n                <button onClick={this.onResume}>Resume</button>\n                <button onClick={this.onPause}>Pause</button>\n                <div id=\"canvas_container\">\n                    <canvas ref={this.canvasRef} width={CANVAS_WIDTH} height={CANVAS_HEIGHT} />\n                </div>\n            </div>\n        )\n    }\n}\n\nfunction convertMatrix3toMatrix4(arg0: THREE.Matrix3) {\n    throw new Error(\"Function not implemented.\");\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}