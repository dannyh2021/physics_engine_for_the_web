{"ast":null,"code":"var _jsxFileName = \"/Users/danny/Github/physics_engine_for_the_web/frontend/src/Playgrounds/Playground.tsx\";\nimport React from \"react\";\nimport { World } from \"../physics_engine/physics_engine\";\nimport * as THREE from \"three\";\nimport { Vector3 } from \"three\";\nimport { Sphere } from \"../physics_engine/Sphere\";\nimport { Box } from \"../physics_engine/Box\";\nimport { OrbitControls } from \"three-orbitcontrols-ts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CANVAS_WIDTH = 1000;\nconst CANVAS_HEIGHT = 500; // camera\n\nconst camera = new THREE.PerspectiveCamera(45, CANVAS_WIDTH / CANVAS_HEIGHT, 1, 1000);\ncamera.position.set(0, -CANVAS_HEIGHT / 6, CANVAS_HEIGHT / 6);\ncamera.up.set(0, 1, 0); // add lighting\n\nconst light_color = 0xffffff;\nconst intensity = 1;\nconst point_light = new THREE.PointLight(light_color, intensity);\npoint_light.position.set(50, 50, 50);\nconst ambient_light = new THREE.AmbientLight(light_color, 0.2);\nexport default class Playground extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = void 0;\n    this.w = void 0;\n    this.renderer = void 0;\n    this.animationRequestID = void 0;\n    this.scene = void 0;\n    this.canvasRef = /*#__PURE__*/React.createRef();\n    this.w = new World(); // graphics\n\n    this.renderer = null;\n    this.animationRequestID = null; // bindings\n\n    this.onRestart = this.onRestart.bind(this);\n    this.onResume = this.onResume.bind(this);\n    this.onPause = this.onPause.bind(this);\n  }\n\n  componentDidMount() {\n    this.w = new World(); // graphics\n\n    this.renderer = new THREE.WebGLRenderer({\n      canvas: this.canvasRef.current,\n      alpha: false\n    });\n    this.renderer.setSize(CANVAS_WIDTH, CANVAS_HEIGHT); // orbit controls\n\n    const controls = new OrbitControls(camera, this.renderer.domElement);\n    this.initialize();\n    this.onVisualize();\n  }\n\n  initialize() {\n    // cancel ongoing animation\n    if (this.animationRequestID) {\n      cancelAnimationFrame(this.animationRequestID);\n    }\n\n    this.scene = new THREE.Scene(); // set up objects\n\n    const sphere = new Sphere(new Vector3(-1, 0, 0), 5);\n    const box = new Box(new Vector3(30, 0, 0), 3, 3, 3);\n    const box2 = new Box(new Vector3(50, 0, 0), 5, 5, 5);\n    box.velocity = new Vector3(0, 5, 0);\n    box2.velocity = new Vector3(-2, 3, 0);\n    this.w.addObject(sphere);\n    this.w.addObject(box); // this.w.addObject(box2);\n    // add object meshes and bounding box meshes to scene\n\n    for (let object of this.w.objects) {\n      this.scene.add(object.mesh);\n      this.scene.add(object.boundingBoxMesh);\n    } // add gridHelper\n\n\n    const gridHelper = new THREE.GridHelper(100, 10);\n    gridHelper.rotateOnWorldAxis(new Vector3(1, 0, 0), Math.PI / 2);\n    this.scene.add(gridHelper); // add lighting\n\n    this.scene.add(point_light, ambient_light);\n  }\n\n  onVisualize() {\n    // cancel ongoing animation\n    if (this.animationRequestID) {\n      cancelAnimationFrame(this.animationRequestID);\n    }\n\n    const renderer = this.renderer;\n    const scene = this.scene;\n    const world = this.w;\n    const objects = world.objects;\n    let gravitational_constant = 1;\n    const currentInstance = this;\n\n    function animate() {\n      currentInstance.animationRequestID = requestAnimationFrame(animate); // apply forces\n\n      for (let obj1 of objects) {\n        if (obj1.inverseMass === 0) {\n          continue;\n        }\n\n        const mass1 = 1 / obj1.inverseMass;\n\n        for (let obj2 of objects) {\n          const relative_position = obj2.position.clone().sub(obj1.position);\n\n          if (obj2.inverseMass === 0 || relative_position.length() === 0) {\n            console.log(\"skipped\");\n            continue;\n          }\n\n          const mass2 = 1 / obj2.inverseMass;\n          const direction = obj2.position.clone().multiplyScalar(-1).normalize();\n          const radius_squared = obj2.position.length() * obj2.position.length();\n          obj2.forceAccum.addScaledVector(direction, gravitational_constant * mass1 * mass2 / radius_squared);\n        }\n      } // physics step\n\n\n      world.integrateObjects(1 / 60); // graphics step\n\n      world.updateMeshes(); // reset mesh colors\n\n      /*for (let object of objects) {\n          object.mesh.material = new THREE.MeshPhongMaterial({ color: 0x00bcd6 });\n          object.boundingBoxMesh.material = new THREE.LineBasicMaterial({ color: 0xffffff });\n      }*/\n      // color intersecting bounding boxes and objects\n\n      /*const boundingBoxIntersections = getAllBoundingBoxIntersections(objects);\n      for(let boundingBoxIntersection of boundingBoxIntersections) {\n          boundingBoxIntersection.a.boundingBoxMesh.material = new THREE.LineBasicMaterial({ color: 0xff0000 });\n          boundingBoxIntersection.b.boundingBoxMesh.material = new THREE.LineBasicMaterial({ color: 0xff0000 });\n           // todo: color collisions\n      }*/\n      // camera.lookAt(0, 0, 0);\n\n      renderer.render(scene, camera);\n    }\n\n    animate();\n  }\n\n  onRestart() {\n    this.initialize();\n    this.onVisualize();\n  }\n\n  onResume() {\n    this.onVisualize();\n  }\n\n  onPause() {\n    // cancel ongoing animation\n    if (this.animationRequestID) {\n      cancelAnimationFrame(this.animationRequestID);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playground\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Playground page desu...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"canvas_container\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: this.canvasRef,\n          width: CANVAS_WIDTH,\n          height: CANVAS_HEIGHT\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"names":["React","World","THREE","Vector3","Sphere","Box","OrbitControls","CANVAS_WIDTH","CANVAS_HEIGHT","camera","PerspectiveCamera","position","set","up","light_color","intensity","point_light","PointLight","ambient_light","AmbientLight","Playground","Component","constructor","props","canvasRef","w","renderer","animationRequestID","scene","createRef","onRestart","bind","onResume","onPause","componentDidMount","WebGLRenderer","canvas","current","alpha","setSize","controls","domElement","initialize","onVisualize","cancelAnimationFrame","Scene","sphere","box","box2","velocity","addObject","object","objects","add","mesh","boundingBoxMesh","gridHelper","GridHelper","rotateOnWorldAxis","Math","PI","world","gravitational_constant","currentInstance","animate","requestAnimationFrame","obj1","inverseMass","mass1","obj2","relative_position","clone","sub","length","console","log","mass2","direction","multiplyScalar","normalize","radius_squared","forceAccum","addScaledVector","integrateObjects","updateMeshes","render"],"sources":["/Users/danny/Github/physics_engine_for_the_web/frontend/src/Playgrounds/Playground.tsx"],"sourcesContent":["import React from \"react\";\nimport { getAllBoundingBoxIntersections, World } from \"../physics_engine/physics_engine\";\nimport * as THREE from \"three\";\nimport { Vector3 } from \"three\";\nimport { Sphere } from \"../physics_engine/Sphere\";\nimport { Box } from \"../physics_engine/Box\";\nimport { OrbitControls } from \"three-orbitcontrols-ts\";\n\nconst CANVAS_WIDTH = 1000;\nconst CANVAS_HEIGHT = 500;\n\n// camera\nconst camera = new THREE.PerspectiveCamera(45, CANVAS_WIDTH / CANVAS_HEIGHT, 1, 1000);\ncamera.position.set(0, -CANVAS_HEIGHT / 6, CANVAS_HEIGHT / 6);\ncamera.up.set(0, 1, 0);\n\n// add lighting\nconst light_color = 0xffffff;\nconst intensity = 1;\nconst point_light = new THREE.PointLight(light_color, intensity);\npoint_light.position.set(50, 50, 50);\n\nconst ambient_light = new THREE.AmbientLight(light_color, 0.2);\n\nexport default class Playground extends React.Component {\n    private canvasRef: any;\n\n    private w: World;\n\n    private renderer: any;\n    private animationRequestID: any;\n    private scene: THREE.Scene;\n\n    constructor(props: any) {\n        super(props);\n        this.canvasRef = React.createRef();\n        this.w = new World();\n\n        // graphics\n        this.renderer = null;\n        this.animationRequestID = null;\n\n        // bindings\n        this.onRestart = this.onRestart.bind(this);\n        this.onResume = this.onResume.bind(this);\n        this.onPause = this.onPause.bind(this);\n    }\n\n    componentDidMount(): void {\n        this.w = new World();\n\n        // graphics\n        this.renderer = new THREE.WebGLRenderer({ canvas: this.canvasRef.current, alpha: false })\n        this.renderer.setSize(CANVAS_WIDTH, CANVAS_HEIGHT);\n\n        // orbit controls\n        const controls = new OrbitControls(camera, this.renderer.domElement);\n\n        this.initialize();\n        this.onVisualize();\n    }\n\n    initialize(): void {\n        // cancel ongoing animation\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n\n        this.scene = new THREE.Scene();\n\n        // set up objects\n        const sphere = new Sphere(new Vector3(-1, 0, 0), 5);\n        const box = new Box(new Vector3(30, 0, 0), 3, 3, 3);\n        const box2 = new Box(new Vector3(50, 0, 0), 5, 5, 5);\n\n\n        box.velocity = new Vector3(0, 5, 0);\n        box2.velocity = new Vector3(-2, 3, 0);\n\n        this.w.addObject(sphere);\n        this.w.addObject(box);\n        // this.w.addObject(box2);\n\n        // add object meshes and bounding box meshes to scene\n        for (let object of this.w.objects) {\n            this.scene.add(object.mesh);\n            this.scene.add(object.boundingBoxMesh);\n        }\n\n        // add gridHelper\n        const gridHelper = new THREE.GridHelper( 100, 10 );\n        gridHelper.rotateOnWorldAxis(new Vector3(1, 0, 0), Math.PI/2);\n        this.scene.add(gridHelper);\n\n        // add lighting\n        this.scene.add(point_light, ambient_light);\n    }\n\n    onVisualize(): void {\n        // cancel ongoing animation\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n\n        const renderer = this.renderer;\n        const scene = this.scene;\n        const world = this.w;\n        const objects = world.objects;\n\n        let gravitational_constant = 1;\n\n        const currentInstance = this;\n        function animate() {\n            currentInstance.animationRequestID = requestAnimationFrame(animate);\n\n            // apply forces\n            for (let obj1 of objects) {\n                if (obj1.inverseMass === 0) {\n                    continue;\n                }\n\n                const mass1 = 1/obj1.inverseMass;\n\n                for (let obj2 of objects) {\n                    const relative_position = obj2.position.clone().sub(obj1.position);\n                    if (obj2.inverseMass === 0 || relative_position.length() === 0) {\n                        console.log(\"skipped\");\n                        continue;\n                    }\n\n                    const mass2 = 1/obj2.inverseMass;\n                    const direction = obj2.position.clone().multiplyScalar(-1).normalize();\n                    const radius_squared = obj2.position.length() * obj2.position.length();\n                    obj2.forceAccum.addScaledVector(direction, gravitational_constant * mass1 * mass2 / radius_squared);\n                }\n            }\n\n            // physics step\n            world.integrateObjects(1/60);\n            \n            // graphics step\n            world.updateMeshes();\n\n            // reset mesh colors\n            /*for (let object of objects) {\n                object.mesh.material = new THREE.MeshPhongMaterial({ color: 0x00bcd6 });\n                object.boundingBoxMesh.material = new THREE.LineBasicMaterial({ color: 0xffffff });\n            }*/\n\n            // color intersecting bounding boxes and objects\n            /*const boundingBoxIntersections = getAllBoundingBoxIntersections(objects);\n            for(let boundingBoxIntersection of boundingBoxIntersections) {\n                boundingBoxIntersection.a.boundingBoxMesh.material = new THREE.LineBasicMaterial({ color: 0xff0000 });\n                boundingBoxIntersection.b.boundingBoxMesh.material = new THREE.LineBasicMaterial({ color: 0xff0000 });\n\n                // todo: color collisions\n            }*/\n\n            // camera.lookAt(0, 0, 0);\n\n            renderer.render(scene, camera);\n        }\n        animate();\n    }\n\n    onRestart(): void {\n        this.initialize();\n        this.onVisualize();\n    }\n\n    onResume(): void {\n        this.onVisualize();\n    }\n\n    onPause(): void {\n        // cancel ongoing animation\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"playground\">\n                <h2>Playground page desu...</h2>\n                <div id=\"canvas_container\">\n                    <canvas ref={this.canvasRef} width={CANVAS_WIDTH} height={CANVAS_HEIGHT} />\n                </div>\n            </div>\n        )\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}