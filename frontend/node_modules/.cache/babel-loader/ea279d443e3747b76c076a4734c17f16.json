{"ast":null,"code":"var _jsxFileName = \"/Users/danny/Github/physics_engine_for_the_web/frontend/src/Playgrounds/Playground6.tsx\";\nimport React from \"react\";\nimport { getAllBoundingBoxIntersections, checkCollision, getContacts } from \"../physics_engine/physics_engine\";\nimport * as THREE from \"three\";\nimport { Vector3 } from \"three\";\nimport { Box } from \"../physics_engine/Box\";\nimport { OrbitControls } from \"three-orbitcontrols-ts\";\nimport { convertMatrix3ToMatrix4, yRotationMatrix3, zRotationMatrix3 } from \"../physics_engine/math_library\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CANVAS_WIDTH = 1000;\nconst CANVAS_HEIGHT = 500; // camera\n\nconst camera = new THREE.PerspectiveCamera(45, CANVAS_WIDTH / CANVAS_HEIGHT, 1, 1000);\ncamera.position.set(0, -CANVAS_HEIGHT / 6, CANVAS_HEIGHT / 6);\ncamera.up.set(0, 1, 0); // add lighting\n\nconst light_color = 0xffffff;\nconst intensity = 1;\nconst point_light = new THREE.PointLight(light_color, intensity);\npoint_light.position.set(50, 50, 50);\nconst ambient_light = new THREE.AmbientLight(light_color, 0.3);\nexport default class Playground6 extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = void 0;\n    this.renderer = void 0;\n    this.animationRequestID = void 0;\n    this.scene = void 0;\n    this.boxes = void 0;\n    this.canvasRef = /*#__PURE__*/React.createRef();\n    this.scene = new THREE.Scene();\n    this.boxes = []; // graphics\n\n    this.renderer = null;\n    this.animationRequestID = null; // bindings\n\n    this.onRestart = this.onRestart.bind(this);\n    this.onResume = this.onResume.bind(this);\n    this.onPause = this.onPause.bind(this);\n  }\n\n  componentDidMount() {\n    // graphics\n    this.renderer = new THREE.WebGLRenderer({\n      canvas: this.canvasRef.current,\n      alpha: false\n    });\n    this.renderer.setSize(CANVAS_WIDTH, CANVAS_HEIGHT); // orbit controls\n\n    const controls = new OrbitControls(camera, this.renderer.domElement);\n    this.initialize();\n    this.onVisualize();\n  }\n\n  initialize() {\n    // cancel ongoing animation\n    if (this.animationRequestID) {\n      cancelAnimationFrame(this.animationRequestID);\n    }\n\n    this.scene = new THREE.Scene(); // set up objects\n\n    this.boxes = [];\n    this.boxes.push(new Box(new Vector3(0, 0, 0), 10, 10, 10));\n    this.boxes.push(new Box(new Vector3(0, 0, 20), 10, 10, 10));\n    const yRotation = yRotationMatrix3(Math.PI / 4);\n    const zRotation = zRotationMatrix3(Math.PI / 4);\n    const rotationMatrix3 = yRotation.clone().multiply(zRotation);\n    this.boxes[1].rotation.setFromRotationMatrix(convertMatrix3ToMatrix4(rotationMatrix3));\n    this.boxes[1].velocity = new Vector3(0, 0, -2);\n    this.boxes[0].angularMomentum = new Vector3(0, 0, 0);\n    this.boxes[1].angularMomentum = new Vector3(0, 0, 1).applyMatrix3(this.boxes[1].inertia);\n\n    for (let box of this.boxes) {\n      this.scene.add(box.mesh); // add bounding box mesh\n\n      this.scene.add(box.boundingBoxMesh);\n    } // add lighting\n\n\n    this.scene.add(point_light, ambient_light); // add gridHelper\n\n    const gridHelper = new THREE.GridHelper(100, 10);\n    gridHelper.rotateOnWorldAxis(new Vector3(1, 0, 0), Math.PI / 2);\n    this.scene.add(gridHelper);\n  }\n\n  onVisualize() {\n    // cancel ongoing animation\n    if (this.animationRequestID) {\n      cancelAnimationFrame(this.animationRequestID);\n    }\n\n    const scene = this.scene;\n    const boxes = this.boxes;\n    let boundingBoxIntersections = getAllBoundingBoxIntersections(boxes);\n    console.log(\"bounding box intersections: \", boundingBoxIntersections);\n    let contacts = getContacts(boundingBoxIntersections);\n    console.log(\"contacts: \", contacts);\n    const currentInstance = this;\n\n    function animate() {\n      currentInstance.animationRequestID = requestAnimationFrame(animate);\n      const toBeRemoved = []; // get bounding box intersections\n\n      boundingBoxIntersections = getAllBoundingBoxIntersections(boxes); // get contacts\n\n      contacts = getContacts(boundingBoxIntersections); // physics step\n\n      for (let box of boxes) {\n        box.integrate(1 / 60);\n      } // graphics step\n\n\n      for (let box of boxes) {\n        // update position and rotation of the box mesh\n        box.updateMesh();\n        box.updateBoundingBoxMesh(); // clear bounding box color\n\n        box.mesh.material = new THREE.MeshPhongMaterial({\n          color: 0x00bcd6\n        });\n        box.mesh.material.transparent = true;\n        box.mesh.material.opacity = 0.6;\n        box.boundingBoxMesh.material = new THREE.LineBasicMaterial({\n          color: 0xffffff\n        });\n      } // color the bound boxes of intersecting boxes\n\n\n      for (let i = 0; i < boundingBoxIntersections.length; i++) {\n        const a = boundingBoxIntersections[i].a;\n        const b = boundingBoxIntersections[i].b;\n        a.boundingBoxMesh.material = new THREE.LineBasicMaterial({\n          color: 0xff0000\n        });\n        b.boundingBoxMesh.material = new THREE.LineBasicMaterial({\n          color: 0xff0000\n        }); // check for collisions and color them\n\n        if (checkCollision(a, b)) {\n          const red_material = new THREE.MeshPhongMaterial({\n            color: 0xff0000\n          });\n          red_material.transparent = true;\n          red_material.opacity = 0.6;\n          a.mesh.material = red_material;\n          b.mesh.material = red_material;\n        }\n      }\n\n      for (let i = 0; i < contacts.length; i++) {\n        let origin = new Vector3(0, 0, 0);\n\n        if (contacts[i].type === \"vertex-face\") {\n          const sphere_geometry = new THREE.SphereGeometry(1);\n          const material = new THREE.MeshBasicMaterial({\n            color: 0xffff00\n          });\n          const sphere = new THREE.Mesh(sphere_geometry, material);\n          sphere.position.set(contacts[i].contactPoint.x, contacts[i].contactPoint.y, contacts[i].contactPoint.z);\n          origin = contacts[i].contactPoint;\n          scene.add(sphere);\n          toBeRemoved.push(sphere);\n        } else if (contacts[i].type === \"edge-edge\") {\n          const a_points = [contacts[i].edge_a.a, contacts[i].edge_a.b];\n          const b_points = [contacts[i].edge_b.a, contacts[i].edge_b.b];\n          const material = new THREE.LineBasicMaterial({\n            color: 0xffff00\n          });\n          const geometry_a = new THREE.BufferGeometry().setFromPoints(a_points);\n          const geometry_b = new THREE.BufferGeometry().setFromPoints(b_points);\n          const line_a = new THREE.Line(geometry_a, material);\n          const line_b = new THREE.Line(geometry_b, material);\n          scene.add(line_a);\n          scene.add(line_b);\n          toBeRemoved.push(line_a);\n          toBeRemoved.push(line_b);\n        }\n\n        const dir = contacts[i].contactNormal.clone().normalize();\n        const length = 20;\n        const hex = 0xffff00;\n        const arrowHelper = new THREE.ArrowHelper(dir, origin, length, hex);\n        scene.add(arrowHelper);\n        toBeRemoved.push(arrowHelper);\n      }\n\n      currentInstance.renderer.render(scene, camera);\n\n      for (let object of toBeRemoved) {\n        scene.remove(object);\n      }\n    }\n\n    animate();\n  }\n\n  onRestart() {\n    this.initialize();\n    this.onVisualize();\n  }\n\n  onResume() {\n    this.onVisualize();\n  }\n\n  onPause() {\n    // cancel ongoing animation\n    if (this.animationRequestID) {\n      cancelAnimationFrame(this.animationRequestID);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playground\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Playground 6 page desu...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.onRestart,\n        children: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.onResume,\n        children: \"Resume\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.onPause,\n        children: \"Pause\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"canvas_container\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: this.canvasRef,\n          width: CANVAS_WIDTH,\n          height: CANVAS_HEIGHT\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"names":["React","getAllBoundingBoxIntersections","checkCollision","getContacts","THREE","Vector3","Box","OrbitControls","convertMatrix3ToMatrix4","yRotationMatrix3","zRotationMatrix3","CANVAS_WIDTH","CANVAS_HEIGHT","camera","PerspectiveCamera","position","set","up","light_color","intensity","point_light","PointLight","ambient_light","AmbientLight","Playground6","Component","constructor","props","canvasRef","renderer","animationRequestID","scene","boxes","createRef","Scene","onRestart","bind","onResume","onPause","componentDidMount","WebGLRenderer","canvas","current","alpha","setSize","controls","domElement","initialize","onVisualize","cancelAnimationFrame","push","yRotation","Math","PI","zRotation","rotationMatrix3","clone","multiply","rotation","setFromRotationMatrix","velocity","angularMomentum","applyMatrix3","inertia","box","add","mesh","boundingBoxMesh","gridHelper","GridHelper","rotateOnWorldAxis","boundingBoxIntersections","console","log","contacts","currentInstance","animate","requestAnimationFrame","toBeRemoved","integrate","updateMesh","updateBoundingBoxMesh","material","MeshPhongMaterial","color","transparent","opacity","LineBasicMaterial","i","length","a","b","red_material","origin","type","sphere_geometry","SphereGeometry","MeshBasicMaterial","sphere","Mesh","contactPoint","x","y","z","a_points","edge_a","b_points","edge_b","geometry_a","BufferGeometry","setFromPoints","geometry_b","line_a","Line","line_b","dir","contactNormal","normalize","hex","arrowHelper","ArrowHelper","render","object","remove"],"sources":["/Users/danny/Github/physics_engine_for_the_web/frontend/src/Playgrounds/Playground6.tsx"],"sourcesContent":["import React from \"react\";\nimport { checkBoundingBoxIntersection, getAllBoundingBoxIntersections, World, checkCollision, getContacts } from \"../physics_engine/physics_engine\";\nimport * as THREE from \"three\";\nimport { Matrix3, MeshPhongMaterial, Vector3 } from \"three\";\nimport { Sphere } from \"../physics_engine/Sphere\";\nimport { Box } from \"../physics_engine/Box\";\nimport { OrbitControls } from \"three-orbitcontrols-ts\";\nimport { convertMatrix3ToMatrix4, xRotationMatrix3, yRotationMatrix3, zRotationMatrix3 } from \"../physics_engine/math_library\";\n\nconst CANVAS_WIDTH = 1000;\nconst CANVAS_HEIGHT = 500;\n\n// camera\nconst camera = new THREE.PerspectiveCamera(45, CANVAS_WIDTH / CANVAS_HEIGHT, 1, 1000);\ncamera.position.set(0, -CANVAS_HEIGHT / 6, CANVAS_HEIGHT / 6);\ncamera.up.set(0, 1, 0);\n\n// add lighting\nconst light_color = 0xffffff;\nconst intensity = 1;\nconst point_light = new THREE.PointLight(light_color, intensity);\npoint_light.position.set(50, 50, 50);\n\nconst ambient_light = new THREE.AmbientLight(light_color, 0.3);\n\nexport default class Playground6 extends React.Component {\n    private canvasRef: any;\n    private renderer: any;\n    private animationRequestID: any;\n    private scene: THREE.Scene;\n    private boxes: any[];\n\n    constructor(props: any) {\n        super(props);\n        this.canvasRef = React.createRef();\n        this.scene = new THREE.Scene();\n        this.boxes = [];\n\n        // graphics\n        this.renderer = null;\n        this.animationRequestID = null;\n\n        // bindings\n        this.onRestart = this.onRestart.bind(this);\n        this.onResume = this.onResume.bind(this);\n        this.onPause = this.onPause.bind(this);\n    }\n\n    componentDidMount(): void {\n        // graphics\n        this.renderer = new THREE.WebGLRenderer({ canvas: this.canvasRef.current, alpha: false })\n        this.renderer.setSize(CANVAS_WIDTH, CANVAS_HEIGHT);\n\n        // orbit controls\n        const controls = new OrbitControls(camera, this.renderer.domElement);\n\n        this.initialize();\n        this.onVisualize();\n    }\n\n    initialize() {\n        // cancel ongoing animation\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n\n        this.scene = new THREE.Scene();\n\n        // set up objects\n        this.boxes = [];\n        this.boxes.push(new Box(new Vector3(0, 0, 0), 10, 10, 10));\n\n        this.boxes.push(new Box(new Vector3(0, 0, 20), 10, 10, 10));\n        \n        const yRotation = yRotationMatrix3(Math.PI/4);\n        const zRotation = zRotationMatrix3(Math.PI/4);\n        const rotationMatrix3 = yRotation.clone().multiply(zRotation);\n        this.boxes[1].rotation.setFromRotationMatrix(convertMatrix3ToMatrix4(rotationMatrix3));\n\n        this.boxes[1].velocity = new Vector3(0, 0, -2);\n\n        this.boxes[0].angularMomentum = new Vector3(0, 0, 0);\n        this.boxes[1].angularMomentum = (new Vector3(0, 0, 1)).applyMatrix3(this.boxes[1].inertia);\n\n        for (let box of this.boxes) {\n            this.scene.add(box.mesh);\n            \n            // add bounding box mesh\n            this.scene.add(box.boundingBoxMesh);\n        }\n\n        // add lighting\n        this.scene.add(point_light, ambient_light);\n\n        // add gridHelper\n        const gridHelper = new THREE.GridHelper( 100, 10 );\n        gridHelper.rotateOnWorldAxis(new Vector3(1, 0, 0), Math.PI/2);\n        this.scene.add(gridHelper);\n    }\n\n    onVisualize() {\n        // cancel ongoing animation\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n\n        const scene = this.scene;\n        const boxes = this.boxes;\n\n        let boundingBoxIntersections = getAllBoundingBoxIntersections(boxes);\n        console.log(\"bounding box intersections: \", boundingBoxIntersections);\n\n        let contacts = getContacts(boundingBoxIntersections);\n        console.log(\"contacts: \", contacts);\n\n        const currentInstance = this;\n        function animate() {\n            currentInstance.animationRequestID = requestAnimationFrame(animate);\n\n            const toBeRemoved = [];\n\n            // get bounding box intersections\n            boundingBoxIntersections = getAllBoundingBoxIntersections(boxes);\n\n            // get contacts\n            contacts = getContacts(boundingBoxIntersections);\n\n            // physics step\n            for (let box of boxes) {\n                box.integrate(1/60);\n            }\n\n            // graphics step\n            for (let box of boxes) {\n                // update position and rotation of the box mesh\n                box.updateMesh();\n                box.updateBoundingBoxMesh();\n\n                // clear bounding box color\n                box.mesh.material = new THREE.MeshPhongMaterial({ color: 0x00bcd6 });\n                box.mesh.material.transparent = true;\n                box.mesh.material.opacity = 0.6;\n                box.boundingBoxMesh.material = new THREE.LineBasicMaterial({ color: 0xffffff });\n            }\n\n            // color the bound boxes of intersecting boxes\n            for (let i = 0; i < boundingBoxIntersections.length; i++) {\n                const a = boundingBoxIntersections[i].a;\n                const b = boundingBoxIntersections[i].b;\n                a.boundingBoxMesh.material = new THREE.LineBasicMaterial({ color: 0xff0000 });\n                b.boundingBoxMesh.material = new THREE.LineBasicMaterial({ color: 0xff0000 });\n\n                // check for collisions and color them\n                if (checkCollision(a, b)) {\n                    const red_material = new THREE.MeshPhongMaterial({ color: 0xff0000 });\n                    red_material.transparent = true;\n                    red_material.opacity = 0.6;\n                    a.mesh.material = red_material;\n                    b.mesh.material = red_material;\n                }\n            }\n\n            \n\n            for (let i = 0; i < contacts.length; i++) {\n                let origin = new Vector3(0, 0, 0);\n                if (contacts[i].type === \"vertex-face\") {\n                    const sphere_geometry = new THREE.SphereGeometry(1);\n                    const material = new THREE.MeshBasicMaterial({ color: 0xffff00 });\n                    const sphere = new THREE.Mesh(sphere_geometry, material);\n                    sphere.position.set(contacts[i].contactPoint.x, contacts[i].contactPoint.y, contacts[i].contactPoint.z);\n                    origin = contacts[i].contactPoint;\n                    scene.add(sphere);\n                    toBeRemoved.push(sphere);\n                } else if (contacts[i].type === \"edge-edge\") {\n                    const a_points = [contacts[i].edge_a.a, contacts[i].edge_a.b];\n                    const b_points = [contacts[i].edge_b.a, contacts[i].edge_b.b];\n                    const material = new THREE.LineBasicMaterial({color: 0xffff00});\n                    const geometry_a = new THREE.BufferGeometry().setFromPoints(a_points);\n                    const geometry_b = new THREE.BufferGeometry().setFromPoints(b_points);\n                    const line_a = new THREE.Line(geometry_a, material);\n                    const line_b = new THREE.Line(geometry_b, material);\n                    scene.add(line_a);\n                    scene.add(line_b);\n                    toBeRemoved.push(line_a);\n                    toBeRemoved.push(line_b);\n                }\n                const dir = contacts[i].contactNormal.clone().normalize();\n                const length = 20;\n                const hex = 0xffff00;\n                const arrowHelper = new THREE.ArrowHelper(dir, origin, length, hex);\n                scene.add(arrowHelper);\n                toBeRemoved.push(arrowHelper);\n            }\n\n\n\n            currentInstance.renderer.render(scene, camera);\n\n            for (let object of toBeRemoved) {\n                scene.remove(object);\n            }\n        }\n        animate();\n    }\n\n    onRestart(): void {\n        this.initialize();\n        this.onVisualize();\n    }\n\n    onResume(): void {\n        this.onVisualize();\n    }\n\n    onPause(): void {\n        // cancel ongoing animation\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"playground\">\n                <h2>Playground 6 page desu...</h2>\n                <button onClick={this.onRestart}>Restart</button>\n                <button onClick={this.onResume}>Resume</button>\n                <button onClick={this.onPause}>Pause</button>\n                <div id=\"canvas_container\">\n                    <canvas ref={this.canvasRef} width={CANVAS_WIDTH} height={CANVAS_HEIGHT} />\n                </div>\n            </div>\n        )\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}