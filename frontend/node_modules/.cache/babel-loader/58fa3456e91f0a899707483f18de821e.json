{"ast":null,"code":"import { Quaternion, Vector3 } from \"three\";\nimport * as THREE from \"three\";\nimport { yRotationMatrix3 } from \"./math_library\";\nexport class Plane {\n  // for graphics\n  constructor(position, normal, width, length) {\n    this.position = void 0;\n    this.normal = void 0;\n    this.width = void 0;\n    this.length = void 0;\n    this.boundingBox = void 0;\n    this.mesh = void 0;\n    this.boundingBoxMesh = void 0;\n    this.position = position;\n    this.normal = normal;\n    this.width = width;\n    this.length = length;\n    const r = Math.sqrt(width * width + length * length);\n    this.boundingBox = new Vector3(2 * r, 2 * r, 2 * r);\n    this.createMesh();\n    this.createBoundingBoxMesh();\n  }\n\n  createMesh() {\n    const planeGeometry = new THREE.PlaneGeometry(this.width, this.length);\n    const material = new THREE.MeshPhongMaterial({\n      color: 0xffcb3e\n    });\n    this.mesh = new THREE.Mesh(planeGeometry, material); // set orientation based on normal\n\n    const v1 = new Vector3(0, 0, 1);\n    const v2 = new Vector3(-1, 0, 0);\n    const a = v1.clone().cross(v2);\n    console.log(\"v1: \", v1);\n    const w = Math.sqrt(v1.length() * v1.length() + v2.length() * v2.length()) + v1.clone().dot(v2);\n    const rotation = new Quaternion(a.x, a.y, a.z, w);\n    console.log(\"length: \", rotation.length());\n    rotation.normalize();\n    this.mesh.setRotationFromQuaternion(rotation);\n    const matrix = yRotationMatrix3(-Math.PI / 2); // this.mesh.setRotationFromMatrix(convertMatrix3ToMatrix4(matrix));\n\n    this.mesh.position.set(this.position.x, this.position.y, this.position.z);\n    this.mesh.position.set(0, 0, 0);\n  }\n\n  createBoundingBoxMesh() {\n    const boxGeometry = new THREE.BoxGeometry(this.boundingBox.x, this.boundingBox.y, this.boundingBox.z);\n    const wireframe = new THREE.WireframeGeometry(boxGeometry);\n    this.boundingBoxMesh = new THREE.LineSegments(wireframe);\n    this.boundingBoxMesh.material = new THREE.LineBasicMaterial({\n      color: 0xffffff\n    });\n  }\n\n}","map":{"version":3,"names":["Quaternion","Vector3","THREE","yRotationMatrix3","Plane","constructor","position","normal","width","length","boundingBox","mesh","boundingBoxMesh","r","Math","sqrt","createMesh","createBoundingBoxMesh","planeGeometry","PlaneGeometry","material","MeshPhongMaterial","color","Mesh","v1","v2","a","clone","cross","console","log","w","dot","rotation","x","y","z","normalize","setRotationFromQuaternion","matrix","PI","set","boxGeometry","BoxGeometry","wireframe","WireframeGeometry","LineSegments","LineBasicMaterial"],"sources":["/Users/danny/Github/physics_engine_for_the_web/frontend/src/physics_engine/Plane.ts"],"sourcesContent":["import { LineSegments, Mesh, Quaternion, Vector3 } from \"three\";\nimport * as THREE from \"three\";\nimport { convertMatrix3ToMatrix4, yRotationMatrix3 } from \"./math_library\";\n\nexport class Plane {\n    public position: Vector3;\n    public normal: Vector3;\n\n    public width: number;\n    public length: number;\n\n    public boundingBox: Vector3;\n\n    // for graphics\n    public mesh: Mesh;\n    public boundingBoxMesh: LineSegments;\n\n    constructor(position: Vector3, normal: Vector3, width: number, length: number) {\n        this.position = position;\n        this.normal = normal;\n\n        this.width = width;\n        this.length = length;\n\n        const r = Math.sqrt(width*width + length*length);\n        this.boundingBox = new Vector3(2*r, 2*r, 2*r);\n\n        this.createMesh();\n        this.createBoundingBoxMesh();\n    }\n\n    private createMesh(): void {\n        const planeGeometry = new THREE.PlaneGeometry(this.width, this.length);\n        const material = new THREE.MeshPhongMaterial({ color: 0xffcb3e });\n        this.mesh = new THREE.Mesh(planeGeometry, material);\n\n        // set orientation based on normal\n        const v1 = new Vector3(0, 0, 1);\n        const v2 = new Vector3(-1, 0, 0);\n        const a = v1.clone().cross(v2);\n        console.log(\"v1: \", v1);\n        const w = Math.sqrt(v1.length()*v1.length() + v2.length()*v2.length()) + v1.clone().dot(v2);\n        const rotation = new Quaternion(a.x, a.y, a.z, w);\n        console.log(\"length: \", rotation.length());\n        rotation.normalize();\n        this.mesh.setRotationFromQuaternion(rotation);\n\n        const matrix = yRotationMatrix3(-Math.PI/2);\n        // this.mesh.setRotationFromMatrix(convertMatrix3ToMatrix4(matrix));\n\n        this.mesh.position.set(this.position.x, this.position.y, this.position.z);\n        this.mesh.position.set(0, 0, 0);\n    }\n\n    private createBoundingBoxMesh(): void {\n        const boxGeometry = new THREE.BoxGeometry(this.boundingBox.x, this.boundingBox.y, this.boundingBox.z);\n        const wireframe = new THREE.WireframeGeometry(boxGeometry);\n        this.boundingBoxMesh = new THREE.LineSegments( wireframe );\n        this.boundingBoxMesh.material = new THREE.LineBasicMaterial({ color: 0xffffff });\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}