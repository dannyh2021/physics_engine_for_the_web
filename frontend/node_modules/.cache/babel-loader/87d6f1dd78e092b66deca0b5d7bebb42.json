{"ast":null,"code":"var _jsxFileName = \"/Users/danny/Github/physics_engine_for_the_web/frontend/src/About/About.tsx\";\nimport React from \"react\";\nimport { World } from \"../physics_engine/physics_engine\";\nimport * as THREE from \"three\";\nimport { Box } from \"../physics_engine/Box\";\nimport { Vector3 } from \"three\";\nimport \"./Home.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CANVAS_WIDTH = 1000;\nconst CANVAS_HEIGHT = 200; // camera\n\nconst camera = new THREE.PerspectiveCamera(45, CANVAS_WIDTH / CANVAS_HEIGHT, 1, 1000);\ncamera.position.set(0, 0, CANVAS_HEIGHT / 4);\ncamera.up.set(0, 1, 0); // add lighting\n\nconst light_color = 0xffffff;\nconst intensity = 1;\nconst point_light = new THREE.PointLight(light_color, intensity);\npoint_light.position.set(0, 0, 50);\nconst ambient_light = new THREE.AmbientLight(light_color, 0.2);\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = void 0;\n    this.w = void 0;\n    this.renderer = void 0;\n    this.animationRequestID = void 0;\n    this.canvasRef = /*#__PURE__*/React.createRef();\n    this.w = new World(); // graphics\n\n    this.renderer = null;\n    this.animationRequestID = null;\n  }\n\n  componentDidMount() {\n    this.w = new World(); // graphics\n\n    this.renderer = new THREE.WebGLRenderer({\n      canvas: this.canvasRef.current,\n      alpha: true\n    });\n    this.renderer.setSize(CANVAS_WIDTH, CANVAS_HEIGHT); // orbit controls\n    // const controls = new OrbitControls(camera, this.renderer.domElement);\n\n    this.onVisualize();\n  }\n\n  componentWillUnmount() {\n    if (this.renderer) {\n      this.renderer = null;\n    }\n\n    if (this.animationRequestID) {\n      cancelAnimationFrame(this.animationRequestID);\n    }\n  }\n\n  onVisualize() {\n    // cancel ongoing animation\n    if (this.animationRequestID) {\n      cancelAnimationFrame(this.animationRequestID);\n    }\n\n    this.w = new World();\n    const box = new Box(new Vector3(0, 0, 0), 15, 15, 15);\n    box.angularMomentum = new Vector3(2, 2, 1).applyMatrix3(box.getInertia());\n    this.w.addObject(box);\n    const boxMesh = box.mesh;\n    const scene = new THREE.Scene();\n    scene.add(boxMesh);\n    scene.add(point_light, ambient_light);\n    const currentInstance = this;\n\n    function animate() {\n      currentInstance.animationRequestID = requestAnimationFrame(animate);\n      currentInstance.w.integrateObjects(1 / 60);\n      currentInstance.w.updateMeshes();\n      currentInstance.renderer.render(scene, camera);\n    }\n\n    animate();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"about\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"About\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Hello. I recently created a simpe rigid-body physics engine as a personal project. This site is meant to serve as a visual demo to showcase its functionality. \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"For anyone interested, the source code is available on the \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://github.com/dannyh2021/physics_game_engine\",\n          target: \"_blank\",\n          children: \"Github repo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 79\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"canvas_container\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: this.canvasRef,\n          width: CANVAS_WIDTH,\n          height: CANVAS_HEIGHT\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"names":["React","World","THREE","Box","Vector3","CANVAS_WIDTH","CANVAS_HEIGHT","camera","PerspectiveCamera","position","set","up","light_color","intensity","point_light","PointLight","ambient_light","AmbientLight","Home","Component","constructor","props","canvasRef","w","renderer","animationRequestID","createRef","componentDidMount","WebGLRenderer","canvas","current","alpha","setSize","onVisualize","componentWillUnmount","cancelAnimationFrame","box","angularMomentum","applyMatrix3","getInertia","addObject","boxMesh","mesh","scene","Scene","add","currentInstance","animate","requestAnimationFrame","integrateObjects","updateMeshes","render"],"sources":["/Users/danny/Github/physics_engine_for_the_web/frontend/src/About/About.tsx"],"sourcesContent":["import React from \"react\";\nimport { World } from \"../physics_engine/physics_engine\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three-orbitcontrols-ts\";\nimport { Box } from \"../physics_engine/Box\";\nimport { Sphere } from \"../physics_engine/Sphere\";\nimport { Vector3 } from \"three\";\n\nimport \"./Home.css\";\n\nconst CANVAS_WIDTH = 1000;\nconst CANVAS_HEIGHT = 200;\n\n// camera\nconst camera = new THREE.PerspectiveCamera(45, CANVAS_WIDTH / CANVAS_HEIGHT, 1, 1000);\ncamera.position.set(0, 0, CANVAS_HEIGHT / 4);\ncamera.up.set(0, 1, 0);\n\n// add lighting\nconst light_color = 0xffffff;\nconst intensity = 1;\nconst point_light = new THREE.PointLight(light_color, intensity);\npoint_light.position.set(0, 0, 50);\n\nconst ambient_light = new THREE.AmbientLight(light_color, 0.2);\n\nexport default class Home extends React.Component {\n    canvasRef: any;\n    private w: World;\n    private renderer: any;\n    private animationRequestID: any;\n\n    constructor(props: any) {\n        super(props);\n        this.canvasRef = React.createRef();\n        this.w = new World();\n\n        // graphics\n        this.renderer = null;\n        this.animationRequestID = null;\n    }\n\n    componentDidMount(): void {\n        this.w = new World();\n\n        // graphics\n        this.renderer = new THREE.WebGLRenderer({ canvas: this.canvasRef.current, alpha: true })\n        this.renderer.setSize(CANVAS_WIDTH, CANVAS_HEIGHT);\n\n        // orbit controls\n        // const controls = new OrbitControls(camera, this.renderer.domElement);\n\n        this.onVisualize();\n    }\n\n    componentWillUnmount() {\n        if(this.renderer) {\n            this.renderer = null;\n        }\n\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n    }\n\n    onVisualize() {\n        // cancel ongoing animation\n        if (this.animationRequestID) {\n            cancelAnimationFrame(this.animationRequestID);\n        }\n\n        this.w = new World();\n\n        const box = new Box(new Vector3(0, 0, 0), 15, 15, 15);\n        box.angularMomentum = new Vector3(2, 2, 1).applyMatrix3(box.getInertia());\n        this.w.addObject(box);\n\n        const boxMesh = box.mesh;\n        \n        const scene = new THREE.Scene();\n        scene.add(boxMesh);\n        scene.add(point_light, ambient_light);\n\n        const currentInstance = this;\n        function animate() {\n            currentInstance.animationRequestID = requestAnimationFrame(animate);\n\n            currentInstance.w.integrateObjects(1/60);\n            currentInstance.w.updateMeshes();\n\n            currentInstance.renderer.render(scene, camera);\n        }\n\n        animate();\n    }\n\n    render() {\n        return (\n            <div className=\"about\" >\n                <h2>About</h2>\n                <p>Hello. I recently created a simpe rigid-body physics engine as a personal project.\n                     This site is meant to serve as a visual demo to showcase its functionality. </p>\n                <p>For anyone interested, the source code is available on the <a href=\"https://github.com/dannyh2021/physics_game_engine\" target=\"_blank\">Github repo</a>.</p>\n                <div id=\"canvas_container\">\n                    <canvas ref={this.canvasRef} width={CANVAS_WIDTH} height={CANVAS_HEIGHT} />\n                </div>\n            </div>\n        )\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}