{"ast":null,"code":"/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { initMetric } from './lib/initMetric.js';\nimport { observe } from './lib/observe.js';\nimport { onHidden } from './lib/onHidden.js';\nimport { onBFCacheRestore } from './lib/onBFCacheRestore.js';\nimport { bindReporter } from './lib/bindReporter.js';\nimport { getFCP } from './getFCP.js';\nlet isMonitoringFCP = false;\nlet fcpValue = -1;\nexport const getCLS = (onReport, reportAllChanges) => {\n  // Start monitoring FCP so we can only report CLS if FCP is also reported.\n  // Note: this is done to match the current behavior of CrUX.\n  if (!isMonitoringFCP) {\n    getFCP(metric => {\n      fcpValue = metric.value;\n    });\n    isMonitoringFCP = true;\n  }\n\n  const onReportWrapped = arg => {\n    if (fcpValue > -1) {\n      onReport(arg);\n    }\n  };\n\n  let metric = initMetric('CLS', 0);\n  let report;\n  let sessionValue = 0;\n  let sessionEntries = [];\n\n  const entryHandler = entry => {\n    // Only count layout shifts without recent user input.\n    if (!entry.hadRecentInput) {\n      const firstSessionEntry = sessionEntries[0];\n      const lastSessionEntry = sessionEntries[sessionEntries.length - 1]; // If the entry occurred less than 1 second after the previous entry and\n      // less than 5 seconds after the first entry in the session, include the\n      // entry in the current session. Otherwise, start a new session.\n\n      if (sessionValue && entry.startTime - lastSessionEntry.startTime < 1000 && entry.startTime - firstSessionEntry.startTime < 5000) {\n        sessionValue += entry.value;\n        sessionEntries.push(entry);\n      } else {\n        sessionValue = entry.value;\n        sessionEntries = [entry];\n      } // If the current session value is larger than the current CLS value,\n      // update CLS and the entries contributing to it.\n\n\n      if (sessionValue > metric.value) {\n        metric.value = sessionValue;\n        metric.entries = sessionEntries;\n        report();\n      }\n    }\n  };\n\n  const po = observe('layout-shift', entryHandler);\n\n  if (po) {\n    report = bindReporter(onReportWrapped, metric, reportAllChanges);\n    onHidden(() => {\n      po.takeRecords().map(entryHandler);\n      report(true);\n    });\n    onBFCacheRestore(() => {\n      sessionValue = 0;\n      fcpValue = -1;\n      metric = initMetric('CLS', 0);\n      report = bindReporter(onReportWrapped, metric, reportAllChanges);\n    });\n  }\n};","map":{"version":3,"names":["initMetric","observe","onHidden","onBFCacheRestore","bindReporter","getFCP","isMonitoringFCP","fcpValue","getCLS","onReport","reportAllChanges","metric","value","onReportWrapped","arg","report","sessionValue","sessionEntries","entryHandler","entry","hadRecentInput","firstSessionEntry","lastSessionEntry","length","startTime","push","entries","po","takeRecords","map"],"sources":["/Users/danny/Github/physics_engine_for_the_web/frontend/node_modules/web-vitals/dist/modules/getCLS.js"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { initMetric } from './lib/initMetric.js';\nimport { observe } from './lib/observe.js';\nimport { onHidden } from './lib/onHidden.js';\nimport { onBFCacheRestore } from './lib/onBFCacheRestore.js';\nimport { bindReporter } from './lib/bindReporter.js';\nimport { getFCP } from './getFCP.js';\nlet isMonitoringFCP = false;\nlet fcpValue = -1;\nexport const getCLS = (onReport, reportAllChanges) => {\n    // Start monitoring FCP so we can only report CLS if FCP is also reported.\n    // Note: this is done to match the current behavior of CrUX.\n    if (!isMonitoringFCP) {\n        getFCP((metric) => {\n            fcpValue = metric.value;\n        });\n        isMonitoringFCP = true;\n    }\n    const onReportWrapped = (arg) => {\n        if (fcpValue > -1) {\n            onReport(arg);\n        }\n    };\n    let metric = initMetric('CLS', 0);\n    let report;\n    let sessionValue = 0;\n    let sessionEntries = [];\n    const entryHandler = (entry) => {\n        // Only count layout shifts without recent user input.\n        if (!entry.hadRecentInput) {\n            const firstSessionEntry = sessionEntries[0];\n            const lastSessionEntry = sessionEntries[sessionEntries.length - 1];\n            // If the entry occurred less than 1 second after the previous entry and\n            // less than 5 seconds after the first entry in the session, include the\n            // entry in the current session. Otherwise, start a new session.\n            if (sessionValue &&\n                entry.startTime - lastSessionEntry.startTime < 1000 &&\n                entry.startTime - firstSessionEntry.startTime < 5000) {\n                sessionValue += entry.value;\n                sessionEntries.push(entry);\n            }\n            else {\n                sessionValue = entry.value;\n                sessionEntries = [entry];\n            }\n            // If the current session value is larger than the current CLS value,\n            // update CLS and the entries contributing to it.\n            if (sessionValue > metric.value) {\n                metric.value = sessionValue;\n                metric.entries = sessionEntries;\n                report();\n            }\n        }\n    };\n    const po = observe('layout-shift', entryHandler);\n    if (po) {\n        report = bindReporter(onReportWrapped, metric, reportAllChanges);\n        onHidden(() => {\n            po.takeRecords().map(entryHandler);\n            report(true);\n        });\n        onBFCacheRestore(() => {\n            sessionValue = 0;\n            fcpValue = -1;\n            metric = initMetric('CLS', 0);\n            report = bindReporter(onReportWrapped, metric, reportAllChanges);\n        });\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAT,QAA2B,qBAA3B;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AACA,SAASC,YAAT,QAA6B,uBAA7B;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,IAAIC,eAAe,GAAG,KAAtB;AACA,IAAIC,QAAQ,GAAG,CAAC,CAAhB;AACA,OAAO,MAAMC,MAAM,GAAG,CAACC,QAAD,EAAWC,gBAAX,KAAgC;EAClD;EACA;EACA,IAAI,CAACJ,eAAL,EAAsB;IAClBD,MAAM,CAAEM,MAAD,IAAY;MACfJ,QAAQ,GAAGI,MAAM,CAACC,KAAlB;IACH,CAFK,CAAN;IAGAN,eAAe,GAAG,IAAlB;EACH;;EACD,MAAMO,eAAe,GAAIC,GAAD,IAAS;IAC7B,IAAIP,QAAQ,GAAG,CAAC,CAAhB,EAAmB;MACfE,QAAQ,CAACK,GAAD,CAAR;IACH;EACJ,CAJD;;EAKA,IAAIH,MAAM,GAAGX,UAAU,CAAC,KAAD,EAAQ,CAAR,CAAvB;EACA,IAAIe,MAAJ;EACA,IAAIC,YAAY,GAAG,CAAnB;EACA,IAAIC,cAAc,GAAG,EAArB;;EACA,MAAMC,YAAY,GAAIC,KAAD,IAAW;IAC5B;IACA,IAAI,CAACA,KAAK,CAACC,cAAX,EAA2B;MACvB,MAAMC,iBAAiB,GAAGJ,cAAc,CAAC,CAAD,CAAxC;MACA,MAAMK,gBAAgB,GAAGL,cAAc,CAACA,cAAc,CAACM,MAAf,GAAwB,CAAzB,CAAvC,CAFuB,CAGvB;MACA;MACA;;MACA,IAAIP,YAAY,IACZG,KAAK,CAACK,SAAN,GAAkBF,gBAAgB,CAACE,SAAnC,GAA+C,IAD/C,IAEAL,KAAK,CAACK,SAAN,GAAkBH,iBAAiB,CAACG,SAApC,GAAgD,IAFpD,EAE0D;QACtDR,YAAY,IAAIG,KAAK,CAACP,KAAtB;QACAK,cAAc,CAACQ,IAAf,CAAoBN,KAApB;MACH,CALD,MAMK;QACDH,YAAY,GAAGG,KAAK,CAACP,KAArB;QACAK,cAAc,GAAG,CAACE,KAAD,CAAjB;MACH,CAfsB,CAgBvB;MACA;;;MACA,IAAIH,YAAY,GAAGL,MAAM,CAACC,KAA1B,EAAiC;QAC7BD,MAAM,CAACC,KAAP,GAAeI,YAAf;QACAL,MAAM,CAACe,OAAP,GAAiBT,cAAjB;QACAF,MAAM;MACT;IACJ;EACJ,CA1BD;;EA2BA,MAAMY,EAAE,GAAG1B,OAAO,CAAC,cAAD,EAAiBiB,YAAjB,CAAlB;;EACA,IAAIS,EAAJ,EAAQ;IACJZ,MAAM,GAAGX,YAAY,CAACS,eAAD,EAAkBF,MAAlB,EAA0BD,gBAA1B,CAArB;IACAR,QAAQ,CAAC,MAAM;MACXyB,EAAE,CAACC,WAAH,GAAiBC,GAAjB,CAAqBX,YAArB;MACAH,MAAM,CAAC,IAAD,CAAN;IACH,CAHO,CAAR;IAIAZ,gBAAgB,CAAC,MAAM;MACnBa,YAAY,GAAG,CAAf;MACAT,QAAQ,GAAG,CAAC,CAAZ;MACAI,MAAM,GAAGX,UAAU,CAAC,KAAD,EAAQ,CAAR,CAAnB;MACAe,MAAM,GAAGX,YAAY,CAACS,eAAD,EAAkBF,MAAlB,EAA0BD,gBAA1B,CAArB;IACH,CALe,CAAhB;EAMH;AACJ,CA3DM"},"metadata":{},"sourceType":"module"}