{"ast":null,"code":"import { Vector3, Matrix3 } from \"three\";\nimport { getVectorCrossMatrix, addMatrices } from \"./math_library\";\nexport class Box {\n  // inertia tensor in body space\n  // the orientation\n  constructor(position, width, length, height) {\n    this.inverseMass = void 0;\n    this.width = void 0;\n    this.length = void 0;\n    this.height = void 0;\n    this.inertia = void 0;\n    this.position = void 0;\n    this.momentum = void 0;\n    this.rotation = void 0;\n    this.angularMomentum = void 0;\n    this.inverseMass = 1 / (width * length * height);\n    this.width = width;\n    this.length = length;\n    this.height = height;\n    this.inertia = new Matrix3();\n    this.setInertia();\n    this.position = position;\n    this.momentum = new Vector3(1, 0, 0).multiplyScalar(1 / this.inverseMass);\n    this.rotation = new Matrix3();\n    console.log(\"rotation: \", this.rotation.elements);\n    this.angularMomentum = new Vector3(0, 0, 1).applyMatrix3(this.inertia);\n  }\n\n  setInertia() {\n    const I_xx = 1 / 12 * (this.length * this.length + this.height * this.height);\n    const I_yy = 1 / 12 * (this.width * this.width + this.height * this.height);\n    const I_zz = 1 / 12 * (this.width * this.width + this.length * this.length);\n    const I_xy = -1 / 16 * (this.width * this.length);\n    const I_yx = I_xy;\n    const I_xz = -1 / 16 * (this.width * this.height);\n    const I_zx = I_xz;\n    const I_yz = -1 / 16 * (this.length * this.height);\n    const I_zy = I_yz;\n    this.inertia.set(I_xx, I_xy, I_xz, I_yx, I_yy, I_yz, I_zx, I_zy, I_zz);\n  }\n\n  integrate(duration) {\n    // Don't integrate if mass is infinite or duration <= 0.\n    if (this.inverseMass <= 0 || duration <= 0) {\n      return;\n    }\n\n    this.position.addScaledVector(this.momentum, this.inverseMass * duration); // update rotation matrix\n\n    const I_b_inverse = this.inertia.clone().invert();\n    const I_inverse = I_b_inverse.clone().premultiply(this.rotation).multiply(this.rotation.clone().transpose());\n    const angularVelocity = this.angularMomentum.clone().applyMatrix3(I_inverse);\n    const dRotation = angularVelocity.multiplyScalar(duration);\n    const dRotation_star = new Matrix3();\n    dRotation_star.set(0, -dRotation.z, dRotation.y, dRotation.z, 0, dRotation.x, -dRotation.y, dRotation.x, 0); // this.rotation.premultiply(dRotation_star);\n  }\n\n  testIntegrate(duration) {\n    // update rotation matrix\n    const I_b_inverse = this.inertia.clone().invert();\n    const I_inverse = this.rotation.clone().multiply(I_b_inverse).multiply(this.rotation.clone().transpose());\n    const angularVelocity = this.angularMomentum.clone().applyMatrix3(I_inverse);\n    const angularVelocity_star = getVectorCrossMatrix(angularVelocity);\n    const ddt_Rotation = angularVelocity_star.clone().multiply(this.rotation);\n    this.rotation = addMatrices(this.rotation, ddt_Rotation.clone().multiplyScalar(duration));\n    /*console.log(\"angularVelocity: \", angularVelocity);\n    console.log(\"angularVelocity_star\", angularVelocity_star);\n    console.log(\"ddt_Rotation: \", ddt_Rotation);\n    console.log(\"ddt_Rotation * duration: \", ddt_Rotation.multiplyScalar(1/60));*/\n\n    console.log(\"this.rotation: \", this.rotation);\n  }\n\n}","map":{"version":3,"names":["Vector3","Matrix3","getVectorCrossMatrix","addMatrices","Box","constructor","position","width","length","height","inverseMass","inertia","momentum","rotation","angularMomentum","setInertia","multiplyScalar","console","log","elements","applyMatrix3","I_xx","I_yy","I_zz","I_xy","I_yx","I_xz","I_zx","I_yz","I_zy","set","integrate","duration","addScaledVector","I_b_inverse","clone","invert","I_inverse","premultiply","multiply","transpose","angularVelocity","dRotation","dRotation_star","z","y","x","testIntegrate","angularVelocity_star","ddt_Rotation"],"sources":["/Users/danny/Github/physics_engine_for_the_web/frontend/src/physics_engine/Box.ts"],"sourcesContent":["import * as THREE from \"three\";\nimport { Vector3, Matrix3 } from \"three\";\nimport { getVectorCrossMatrix, addMatrices } from \"./math_library\";\n\nexport class Box {\n    public inverseMass: number;\n\n    public width: number;\n    public length: number;\n    public height: number;\n\n    public inertia: Matrix3; // inertia tensor in body space\n\n    public position: Vector3;\n    public momentum: Vector3;\n\n    public rotation: Matrix3; // the orientation\n    public angularMomentum: Vector3;\n\n    constructor(position: Vector3, width: number, length: number, height: number) {\n        this.inverseMass = 1 / (width * length * height);\n\n        this.width = width;\n        this.length = length;\n        this.height = height;\n\n        this.inertia = new Matrix3();\n        this.setInertia();\n        \n        this.position = position;\n        this.momentum = (new Vector3(1, 0, 0)).multiplyScalar(1/this.inverseMass);\n\n        this.rotation = new Matrix3();\n        console.log(\"rotation: \", this.rotation.elements);\n        this.angularMomentum = new Vector3(0, 0, 1).applyMatrix3(this.inertia);\n    }\n\n    private setInertia(): void {\n        const I_xx = (1/12) * (this.length*this.length + this.height*this.height);\n        const I_yy = (1/12) * (this.width*this.width + this.height*this.height);\n        const I_zz = (1/12) * (this.width*this.width + this.length*this.length);\n        const I_xy = (-1/16) * (this.width*this.length);\n        const I_yx = I_xy;\n        const I_xz = (-1/16) * (this.width*this.height);\n        const I_zx = I_xz;\n        const I_yz = (-1/16) * (this.length*this.height);\n        const I_zy = I_yz;\n\n        this.inertia.set(\n            I_xx, I_xy, I_xz,\n            I_yx, I_yy, I_yz,\n            I_zx, I_zy, I_zz\n        );\n    }\n\n    integrate(duration: number): void {\n        // Don't integrate if mass is infinite or duration <= 0.\n        if (this.inverseMass <= 0 || duration <= 0) {\n            return;\n        }\n\n        this.position.addScaledVector(this.momentum, this.inverseMass * duration);\n\n        // update rotation matrix\n        const I_b_inverse = this.inertia.clone().invert();\n        const I_inverse = (I_b_inverse.clone().premultiply(this.rotation)).multiply(this.rotation.clone().transpose());\n        const angularVelocity = this.angularMomentum.clone().applyMatrix3(I_inverse);\n        const dRotation = angularVelocity.multiplyScalar(duration);\n        const dRotation_star = new Matrix3();\n        dRotation_star.set(\n            0, -dRotation.z, dRotation.y,\n            dRotation.z, 0, dRotation.x,\n            -dRotation.y, dRotation.x, 0\n        );\n        // this.rotation.premultiply(dRotation_star);\n    }\n\n    testIntegrate(duration: number): void {\n        // update rotation matrix\n\n        const I_b_inverse = this.inertia.clone().invert();\n        const I_inverse = this.rotation.clone().multiply(I_b_inverse).multiply(this.rotation.clone().transpose());\n        const angularVelocity = this.angularMomentum.clone().applyMatrix3(I_inverse);\n        const angularVelocity_star = getVectorCrossMatrix(angularVelocity);\n\n        const ddt_Rotation = angularVelocity_star.clone().multiply(this.rotation);\n        this.rotation = addMatrices(this.rotation, ddt_Rotation.clone().multiplyScalar(duration));\n\n        /*console.log(\"angularVelocity: \", angularVelocity);\n        console.log(\"angularVelocity_star\", angularVelocity_star);\n        console.log(\"ddt_Rotation: \", ddt_Rotation);\n        console.log(\"ddt_Rotation * duration: \", ddt_Rotation.multiplyScalar(1/60));*/\n        console.log(\"this.rotation: \", this.rotation);\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}