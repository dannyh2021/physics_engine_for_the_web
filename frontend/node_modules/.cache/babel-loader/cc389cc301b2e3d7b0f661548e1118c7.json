{"ast":null,"code":"import { Vector3 } from \"three\";\nimport { Sphere } from \"./Sphere\"; // import { Sphere } from \"three\";\n\nexport class World {\n  constructor() {\n    this.objects = [];\n    this.currentLoopInterval = null;\n    this.characterForce = void 0;\n    this.objects = [];\n    this.characterForce = new Vector3(0, 0, 0);\n  }\n\n  startLoop() {\n    const currentInstance = this; // stop current loop if it exits\n\n    if (this.currentLoopInterval) {}\n  }\n  /** Stops current loop if it exists. */\n\n\n  stopCurrentLoop() {\n    if (this.currentLoopInterval) {\n      clearInterval(this.currentLoopInterval);\n    }\n  }\n\n  startGameLoop() {\n    const s = new Sphere(new Vector3(0, 0, 0), 3);\n    const s2 = new Sphere(new Vector3(10, 0, 0), 3);\n    const s3 = new Sphere(new Vector3(0, 5, 0), 3);\n    this.objects = [];\n    this.objects.push(s);\n    this.objects.push(s2); //this.objects.push(s3);\n\n    this.clearCurrentLoop();\n    let lastCalledTime = performance.now(); // returns timestamp in ms\n\n    let fps = 0;\n    let times = [];\n    let i = 0; // this.currentLoopInterval = setInterval(() => {i++; console.log(i)}, 1000);\n\n    const currentInstance = this;\n\n    function animate() {\n      requestAnimationFrame(animate);\n      s.forceAccum.add(currentInstance.characterForce);\n      currentInstance.characterForce = new Vector3(0, 0, 0);\n      s.integrate(1 / 60);\n    }\n\n    animate();\n  }\n\n  getObjects() {\n    return this.objects;\n  }\n\n  updateCharacterForce(f) {\n    this.characterForce = f;\n  }\n\n  detectCollisions() {}\n\n  checkCollisionSpheres(s1, s2) {\n    const d = s1.position.clone().sub(s2.position).length(); // distance between centers\n    // collision if distance between spheres is smaller than sub of radiuses\n\n    if (d < s1.radius + s2.radius) {\n      return true;\n    }\n\n    return false;\n  }\n\n  clearCurrentLoop() {\n    clearInterval(this.currentLoopInterval);\n  }\n\n}","map":{"version":3,"names":["Vector3","Sphere","World","constructor","objects","currentLoopInterval","characterForce","startLoop","currentInstance","stopCurrentLoop","clearInterval","startGameLoop","s","s2","s3","push","clearCurrentLoop","lastCalledTime","performance","now","fps","times","i","animate","requestAnimationFrame","forceAccum","add","integrate","getObjects","updateCharacterForce","f","detectCollisions","checkCollisionSpheres","s1","d","position","clone","sub","length","radius"],"sources":["/Users/danny/Github/physics_engine_for_the_web/frontend/src/physics_engine/physics_engine.ts"],"sourcesContent":["import { Vector3 } from \"three\";\nimport * as THREE from \"three\";\nimport { Sphere } from \"./Sphere\";\n// import { Sphere } from \"three\";\n\nexport class World {\n    private objects: any[] = [];\n    private currentLoopInterval: any = null;\n\n    private characterForce: Vector3;\n\n    constructor() {\n        this.objects = [];\n\n        this.characterForce = new Vector3(0, 0, 0);\n    }\n\n    startLoop(): void {\n        const currentInstance = this;\n\n        // stop current loop if it exits\n        if (this.currentLoopInterval) {\n\n        }\n    }\n\n    /** Stops current loop if it exists. */\n    stopCurrentLoop(): void {\n        if (this.currentLoopInterval) {\n            clearInterval(this.currentLoopInterval);\n        }\n    }\n\n    startGameLoop(): void {\n        const s = new Sphere(new Vector3(0, 0, 0), 3);\n        const s2 = new Sphere(new Vector3(10, 0, 0), 3);\n        const s3 = new Sphere(new Vector3(0, 5, 0), 3);\n        \n        this.objects = [];\n        this.objects.push(s);\n        this.objects.push(s2);\n        //this.objects.push(s3);\n\n        this.clearCurrentLoop();\n\n        let lastCalledTime = performance.now() // returns timestamp in ms\n        let fps = 0;\n        let times = [];\n\n        let i = 0;\n        // this.currentLoopInterval = setInterval(() => {i++; console.log(i)}, 1000);\n\n        const currentInstance = this;\n        function animate(): void {\n            requestAnimationFrame(animate);\n\n            s.forceAccum.add(currentInstance.characterForce);\n            currentInstance.characterForce = new Vector3(0, 0, 0);\n\n            s.integrate(1/60);\n        }\n        animate();\n    }\n\n    getObjects(): any[] {\n        return this.objects;\n    }\n\n    updateCharacterForce(f: Vector3) {\n        this.characterForce = f;\n    }\n\n    detectCollisions(): void {\n\n    }\n\n    checkCollisionSpheres(s1: Sphere, s2: Sphere) {\n        const d = (s1.position.clone().sub(s2.position)).length(); // distance between centers\n\n        // collision if distance between spheres is smaller than sub of radiuses\n        if (d < (s1.radius + s2.radius)) {\n            return true;\n        }\n        return false;\n    }\n\n    clearCurrentLoop(): void {\n        clearInterval(this.currentLoopInterval);\n    }\n}"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AAEA,SAASC,MAAT,QAAuB,UAAvB,C,CACA;;AAEA,OAAO,MAAMC,KAAN,CAAY;EAMfC,WAAW,GAAG;IAAA,KALNC,OAKM,GALW,EAKX;IAAA,KAJNC,mBAIM,GAJqB,IAIrB;IAAA,KAFNC,cAEM;IACV,KAAKF,OAAL,GAAe,EAAf;IAEA,KAAKE,cAAL,GAAsB,IAAIN,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAtB;EACH;;EAEDO,SAAS,GAAS;IACd,MAAMC,eAAe,GAAG,IAAxB,CADc,CAGd;;IACA,IAAI,KAAKH,mBAAT,EAA8B,CAE7B;EACJ;EAED;;;EACAI,eAAe,GAAS;IACpB,IAAI,KAAKJ,mBAAT,EAA8B;MAC1BK,aAAa,CAAC,KAAKL,mBAAN,CAAb;IACH;EACJ;;EAEDM,aAAa,GAAS;IAClB,MAAMC,CAAC,GAAG,IAAIX,MAAJ,CAAW,IAAID,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAX,EAAiC,CAAjC,CAAV;IACA,MAAMa,EAAE,GAAG,IAAIZ,MAAJ,CAAW,IAAID,OAAJ,CAAY,EAAZ,EAAgB,CAAhB,EAAmB,CAAnB,CAAX,EAAkC,CAAlC,CAAX;IACA,MAAMc,EAAE,GAAG,IAAIb,MAAJ,CAAW,IAAID,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAX,EAAiC,CAAjC,CAAX;IAEA,KAAKI,OAAL,GAAe,EAAf;IACA,KAAKA,OAAL,CAAaW,IAAb,CAAkBH,CAAlB;IACA,KAAKR,OAAL,CAAaW,IAAb,CAAkBF,EAAlB,EAPkB,CAQlB;;IAEA,KAAKG,gBAAL;IAEA,IAAIC,cAAc,GAAGC,WAAW,CAACC,GAAZ,EAArB,CAZkB,CAYqB;;IACvC,IAAIC,GAAG,GAAG,CAAV;IACA,IAAIC,KAAK,GAAG,EAAZ;IAEA,IAAIC,CAAC,GAAG,CAAR,CAhBkB,CAiBlB;;IAEA,MAAMd,eAAe,GAAG,IAAxB;;IACA,SAASe,OAAT,GAAyB;MACrBC,qBAAqB,CAACD,OAAD,CAArB;MAEAX,CAAC,CAACa,UAAF,CAAaC,GAAb,CAAiBlB,eAAe,CAACF,cAAjC;MACAE,eAAe,CAACF,cAAhB,GAAiC,IAAIN,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAjC;MAEAY,CAAC,CAACe,SAAF,CAAY,IAAE,EAAd;IACH;;IACDJ,OAAO;EACV;;EAEDK,UAAU,GAAU;IAChB,OAAO,KAAKxB,OAAZ;EACH;;EAEDyB,oBAAoB,CAACC,CAAD,EAAa;IAC7B,KAAKxB,cAAL,GAAsBwB,CAAtB;EACH;;EAEDC,gBAAgB,GAAS,CAExB;;EAEDC,qBAAqB,CAACC,EAAD,EAAapB,EAAb,EAAyB;IAC1C,MAAMqB,CAAC,GAAID,EAAE,CAACE,QAAH,CAAYC,KAAZ,GAAoBC,GAApB,CAAwBxB,EAAE,CAACsB,QAA3B,CAAD,CAAuCG,MAAvC,EAAV,CAD0C,CACiB;IAE3D;;IACA,IAAIJ,CAAC,GAAID,EAAE,CAACM,MAAH,GAAY1B,EAAE,CAAC0B,MAAxB,EAAiC;MAC7B,OAAO,IAAP;IACH;;IACD,OAAO,KAAP;EACH;;EAEDvB,gBAAgB,GAAS;IACrBN,aAAa,CAAC,KAAKL,mBAAN,CAAb;EACH;;AAnFc"},"metadata":{},"sourceType":"module"}