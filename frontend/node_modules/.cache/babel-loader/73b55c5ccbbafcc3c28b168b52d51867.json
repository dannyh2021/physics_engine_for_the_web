{"ast":null,"code":"import { Matrix3, Matrix4, Quaternion } from \"three\"; // R = R_z(phi) R_y(theta) R_x(psi)\n// Two solutions if theta not equal to +1 or -1, otherwise infinite solutions (gimbal lock)\n\n/** Returns Euler angles assuming matrix is a rotation matrix. */\n\nexport function printEulerAngles(rotationMatrix) {\n  const elements = rotationMatrix.elements;\n  const r_11 = elements[0];\n  const r_12 = elements[3];\n  const r_13 = elements[6];\n  const r_21 = elements[1];\n  const r_31 = elements[2];\n  const r_32 = elements[5];\n  const r_33 = elements[8];\n\n  if (!(r_31 === 1 || r_31 === -1)) {\n    const theta_1 = -Math.asin(r_31);\n    const theta_2 = Math.PI - theta_1;\n    const psi_1 = Math.atan2(r_32 / Math.cos(theta_1), r_33 / Math.cos(theta_1));\n    const psi_2 = Math.atan2(r_32 / Math.cos(theta_2), r_33 / Math.cos(theta_2));\n    const phi_1 = Math.atan2(r_21 / Math.cos(theta_1), r_11 / Math.cos(theta_1));\n    const phi_2 = Math.atan2(r_21 / Math.cos(theta_2), r_11 / Math.cos(theta_2));\n    console.log(`psi_1: ${psi_1}, psi_2: ${psi_2}`);\n    console.log(`theta_1: ${theta_1}, theta_2: ${theta_2}`);\n    console.log(`phi_1: ${phi_1}, phi_2: ${phi_2}`);\n  } else {\n    const phi = 0;\n    let theta;\n    let psi;\n\n    if (r_31 === -1) {\n      theta = Math.PI / 2;\n      psi = phi + Math.atan2(r_12, r_13);\n    } else {\n      theta = -Math.PI / 2;\n      psi = -phi + Math.atan2(-r_12, -r_13);\n    }\n\n    console.log(`psi: ${psi},`);\n    console.log(`theta: ${theta}`);\n    console.log(`phi: ${phi}`);\n  }\n}\n;\n/**\n* R = R_z(phi) R_y(theta) R_x(psi)\n* @param rotationMatrix assumes valid rotation matrix\n* @return JSON of euler angles psi, theta, and phi {psi: number, theta: number, phi: number}\n*/\n\nexport function getEulerAngles(rotationMatrix) {\n  const elements = rotationMatrix.elements;\n  const r_11 = elements[0];\n  const r_12 = elements[3];\n  const r_13 = elements[6];\n  const r_21 = elements[1];\n  const r_31 = elements[2];\n  const r_32 = elements[5];\n  const r_33 = elements[8];\n  let psi;\n  let theta;\n  let phi;\n\n  if (!(r_31 === 1 || r_31 === -1)) {\n    theta = -Math.asin(r_31);\n    psi = Math.atan2(r_32 / Math.cos(theta), r_33 / Math.cos(theta));\n    phi = Math.atan2(r_21 / Math.cos(theta), r_11 / Math.cos(theta));\n  } else {\n    phi = 0;\n\n    if (r_31 === -1) {\n      theta = Math.PI / 2;\n      psi = phi + Math.atan2(r_12, r_13);\n    } else {\n      theta = -Math.PI / 2;\n      psi = -phi + Math.atan2(-r_12, -r_13);\n    }\n  }\n\n  const angles = {\n    psi: psi,\n    theta: theta,\n    phi: phi\n  };\n  return angles;\n}\nexport function xRotationMatrix3(angle) {\n  const c = Math.cos(angle);\n  const s = Math.sin(angle);\n  const m = new Matrix3();\n  m.set(1, 0, 0, 0, c, -s, 0, s, c);\n  return m;\n}\nexport function yRotationMatrix3(angle) {\n  const c = Math.cos(angle);\n  const s = Math.sin(angle);\n  const m = new Matrix3();\n  m.set(c, 0, s, 0, 1, 0, -s, 0, c);\n  return m;\n}\nexport function zRotationMatrix3(angle) {\n  const c = Math.cos(angle);\n  const s = Math.sin(angle);\n  const m = new Matrix3();\n  m.set(c, -s, 0, s, c, 0, 0, 0, 1);\n  return m;\n}\nexport function convertMatrix3ToMatrix4(matrix) {\n  const elements = matrix.elements;\n  const m = new Matrix4();\n  m.set(elements[0], elements[3], elements[6], 0, elements[1], elements[4], elements[7], 0, elements[2], elements[5], elements[8], 0, 0, 0, 0, 1);\n  return m;\n}\n/**\n * Not sure what it's called but suppose you have vectors a and b.\n * Then this function will return a matrix a_star, where a_star(b) = a x b\n * In other words, a_star is a linear map that acts returns the cross product of a with its input.\n * Derived in chapter 4.8 of Goldstein's Classical Mechanics book.\n * @param vector the vector\n */\n\nexport function getVectorCrossMatrix(v) {\n  const m = new Matrix3();\n  m.set(0, -v.z, v.y, v.z, 0, -v.x, -v.y, v.x, 0);\n  return m;\n}\nexport function addMatrices(a, b) {\n  const aElements = a.elements;\n  const bElements = b.elements;\n  const m = new Matrix3();\n  const elements = [];\n\n  for (let i = 0; i < 9; i++) {\n    elements.push(aElements[i] + bElements[i]);\n  }\n\n  m.elements = elements;\n  return m;\n}\n;\nexport function convertQuaternionToMatrix(q) {\n  const rMatrix = new Matrix3();\n  rMatrix.set(1 - 2 * q.y * q.y - 2 * q.z * q.z, 2 * q.x * q.y - 2 * q.w * q.z, 2 * q.x * q.z + 2 * q.w * q.y, 2 * q.x * q.y + 2 * q.w * q.z, 1 - 2 * q.x * q.x - 2 * q.z * q.z, 2 * q.y * q.z - 2 * q.w * q.x, 2 * q.x * q.z - 2 * q.w * q.y, 2 * q.y * q.z + 2 * q.w * q.x, 1 - 2 * q.x * q.x - 2 * q.y * q.y);\n  return rMatrix;\n}\nexport function scaleQuaternion(q, s) {\n  return new Quaternion(q.x * s, q.y * s, q.z * s, q.w * s);\n}\nexport function addQuaternions(q1, q2) {\n  return new Quaternion(q1.x + q2.x, q1.y + q2.y, q1.z + q2.z, q1.w + q2.w);\n}","map":{"version":3,"names":["Matrix3","Matrix4","Quaternion","printEulerAngles","rotationMatrix","elements","r_11","r_12","r_13","r_21","r_31","r_32","r_33","theta_1","Math","asin","theta_2","PI","psi_1","atan2","cos","psi_2","phi_1","phi_2","console","log","phi","theta","psi","getEulerAngles","angles","xRotationMatrix3","angle","c","s","sin","m","set","yRotationMatrix3","zRotationMatrix3","convertMatrix3ToMatrix4","matrix","getVectorCrossMatrix","v","z","y","x","addMatrices","a","b","aElements","bElements","i","push","convertQuaternionToMatrix","q","rMatrix","w","scaleQuaternion","addQuaternions","q1","q2"],"sources":["/Users/danny/Github/physics_engine_for_the_web/frontend/src/physics_engine/math_library.ts"],"sourcesContent":["import { Matrix3, Matrix4, Vector3, Quaternion } from \"three\";\n\n// R = R_z(phi) R_y(theta) R_x(psi)\n// Two solutions if theta not equal to +1 or -1, otherwise infinite solutions (gimbal lock)\n/** Returns Euler angles assuming matrix is a rotation matrix. */\nexport function printEulerAngles(rotationMatrix: Matrix3) {\n    const elements = rotationMatrix.elements;\n    const r_11 = elements[0];\n    const r_12 = elements[3];\n    const r_13 = elements[6];\n    const r_21 = elements[1];\n    const r_31 = elements[2];\n    const r_32 = elements[5];\n    const r_33 = elements[8];\n\n    if (!(r_31 === 1 || r_31 === -1)) {\n        const theta_1 = - Math.asin(r_31);\n        const theta_2 = Math.PI - theta_1;\n\n        const psi_1 = Math.atan2(r_32/Math.cos(theta_1), r_33/Math.cos(theta_1));\n        const psi_2 = Math.atan2(r_32/Math.cos(theta_2), r_33/Math.cos(theta_2));\n\n        const phi_1 = Math.atan2(r_21/Math.cos(theta_1), r_11/Math.cos(theta_1));\n        const phi_2 = Math.atan2(r_21/Math.cos(theta_2), r_11/Math.cos(theta_2));\n\n        console.log(`psi_1: ${psi_1}, psi_2: ${psi_2}`);\n        console.log(`theta_1: ${theta_1}, theta_2: ${theta_2}`);\n        console.log(`phi_1: ${phi_1}, phi_2: ${phi_2}`);\n    } else {\n        const phi = 0;\n        let theta: number;\n        let psi: number;\n\n        if (r_31 === -1) {\n            theta = Math.PI/2;\n            psi = phi + Math.atan2(r_12, r_13);\n        } else {\n            theta = -Math.PI/2;\n            psi = -phi + Math.atan2(-r_12, -r_13);\n        }\n\n        console.log(`psi: ${psi},`);\n        console.log(`theta: ${theta}`);\n        console.log(`phi: ${phi}`);\n    }\n};\n\n/**\n* R = R_z(phi) R_y(theta) R_x(psi)\n* @param rotationMatrix assumes valid rotation matrix\n* @return JSON of euler angles psi, theta, and phi {psi: number, theta: number, phi: number}\n*/\nexport function getEulerAngles(rotationMatrix: Matrix3) {\n   const elements = rotationMatrix.elements;\n   const r_11 = elements[0];\n   const r_12 = elements[3];\n   const r_13 = elements[6];\n   const r_21 = elements[1];\n   const r_31 = elements[2];\n   const r_32 = elements[5];\n   const r_33 = elements[8];\n\n   let psi: number;\n   let theta: number;\n   let phi: number;\n\n   if (!(r_31 === 1 || r_31 === -1)) {\n       theta = - Math.asin(r_31);\n\n       psi = Math.atan2(r_32/Math.cos(theta), r_33/Math.cos(theta));\n\n       phi = Math.atan2(r_21/Math.cos(theta), r_11/Math.cos(theta));\n   } else {\n       phi = 0;\n\n       if (r_31 === -1) {\n           theta = Math.PI/2;\n           psi = phi + Math.atan2(r_12, r_13);\n       } else {\n           theta = -Math.PI/2;\n           psi = -phi + Math.atan2(-r_12, -r_13);\n       }\n   }\n\n   const angles = {psi: psi, theta: theta, phi: phi};\n   return angles;\n}\n\nexport function xRotationMatrix3(angle: number) {\n    const c = Math.cos(angle);\n    const s = Math.sin(angle);\n\n    const m = new Matrix3()\n    m.set(\n        1, 0, 0,\n        0, c, -s,\n        0, s, c\n    );\n    return m;\n}\n\nexport function yRotationMatrix3(angle: number) {\n    const c = Math.cos(angle);\n    const s = Math.sin(angle);\n\n    const m = new Matrix3();\n    m.set(\n        c, 0, s,\n        0, 1, 0,\n        -s, 0, c,\n    );\n    return m;\n}\n\nexport function zRotationMatrix3(angle: number) {\n    const c = Math.cos(angle);\n    const s = Math.sin(angle);\n\n    const m = new Matrix3();\n    m.set(\n        c, -s, 0,\n        s, c, 0,\n        0, 0, 1,\n    );\n    return m;\n}\n\nexport function convertMatrix3ToMatrix4(matrix: Matrix3): Matrix4 {\n    const elements = matrix.elements;\n    \n    const m = new Matrix4();\n    m.set(\n        elements[0], elements[3], elements[6], 0,\n        elements[1], elements[4], elements[7], 0,\n        elements[2], elements[5], elements[8], 0,\n        0, 0, 0, 1\n    );\n\n    return m;\n}\n\n/**\n * Not sure what it's called but suppose you have vectors a and b.\n * Then this function will return a matrix a_star, where a_star(b) = a x b\n * In other words, a_star is a linear map that acts returns the cross product of a with its input.\n * Derived in chapter 4.8 of Goldstein's Classical Mechanics book.\n * @param vector the vector\n */\nexport function getVectorCrossMatrix(v: Vector3) {\n    const m = new Matrix3();\n    m.set(\n        0, -v.z, v.y,\n        v.z, 0, -v.x,\n        -v.y, v.x, 0\n    );\n    return m;\n}\n\nexport function addMatrices(a: Matrix3, b: Matrix3) {\n    const aElements = a.elements;\n    const bElements = b.elements;\n    const m = new Matrix3();\n    const elements = [];\n    for (let i = 0; i < 9; i++) {\n        elements.push(aElements[i] + bElements[i]);\n    }\n    m.elements = elements;\n    return m;\n};\n\nexport function convertQuaternionToMatrix(q: Quaternion) {\n    const rMatrix = new Matrix3();\n    rMatrix.set(\n        1 - 2*q.y*q.y - 2*q.z*q.z, 2*q.x*q.y - 2*q.w*q.z, 2*q.x*q.z + 2*q.w*q.y,\n        2*q.x*q.y + 2*q.w*q.z, 1 - 2*q.x*q.x - 2*q.z*q.z, 2*q.y*q.z - 2*q.w*q.x,\n        2*q.x*q.z - 2*q.w*q.y, 2*q.y*q.z + 2*q.w*q.x, 1 - 2*q.x*q.x - 2*q.y*q.y\n    );\n    return rMatrix;\n}\n\nexport function scaleQuaternion(q: Quaternion, s: number) {\n    return new Quaternion(q.x*s, q.y*s, q.z*s, q.w*s);\n}\n\nexport function addQuaternions(q1: Quaternion, q2: Quaternion) {\n    return new Quaternion(q1.x+q2.x, q1.y+q2.y, q1.z+q2.z, q1.w+q2.w);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}